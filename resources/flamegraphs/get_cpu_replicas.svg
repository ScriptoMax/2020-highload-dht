<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Replication control | CPU</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (7,156 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (10 samples, 0.14%)</title><rect x="10.0" y="883.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (10 samples, 0.14%)</title><rect x="10.0" y="867.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (10 samples, 0.14%)</title><rect x="10.0" y="851.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (8 samples, 0.11%)</title><rect x="10.0" y="835.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (7 samples, 0.10%)</title><rect x="10.0" y="819.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>[no_Java_frame] (4 samples, 0.06%)</title><rect x="11.6" y="883.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="14.6" y="894.0"></text>
</g>
<g>
<title>[not_walkable_Java] (6 samples, 0.08%)</title><rect x="12.3" y="883.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="15.3" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 0.07%)</title><rect x="12.5" y="867.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="15.5" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.06%)</title><rect x="12.6" y="851.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="15.6" y="862.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.03%)</title><rect x="12.6" y="835.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="15.6" y="846.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.03%)</title><rect x="12.6" y="819.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="15.6" y="830.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.03%)</title><rect x="13.0" y="835.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="16.0" y="846.0"></text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.04%)</title><rect x="13.3" y="883.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="16.3" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.03%)</title><rect x="13.5" y="867.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="16.5" y="878.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="13.5" y="851.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="16.5" y="862.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.03%)</title><rect x="13.5" y="835.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="16.5" y="846.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.03%)</title><rect x="13.5" y="819.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="16.5" y="830.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.03%)</title><rect x="13.5" y="803.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="16.5" y="814.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.03%)</title><rect x="13.5" y="787.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="16.5" y="798.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.03%)</title><rect x="13.5" y="771.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="16.5" y="782.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.03%)</title><rect x="13.5" y="755.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="16.5" y="766.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.03%)</title><rect x="13.5" y="739.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="16.5" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (7 samples, 0.10%)</title><rect x="13.8" y="883.0" width="1.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="16.8" y="894.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 0.08%)</title><rect x="14.0" y="867.0" width="0.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="17.0" y="878.0"></text>
</g>
<g>
<title>do_syscall_64 (6 samples, 0.08%)</title><rect x="14.0" y="851.0" width="0.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="17.0" y="862.0"></text>
</g>
<g>
<title>__x64_sys_futex (5 samples, 0.07%)</title><rect x="14.1" y="835.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="17.1" y="846.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.06%)</title><rect x="14.1" y="819.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="17.1" y="830.0"></text>
</g>
<g>
<title>futex_wait (4 samples, 0.06%)</title><rect x="14.1" y="803.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="17.1" y="814.0"></text>
</g>
<g>
<title>futex_wait_queue_me (3 samples, 0.04%)</title><rect x="14.1" y="787.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="17.1" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.run (5,572 samples, 77.86%)</title><rect x="15.3" y="883.0" width="918.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.3" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (5,572 samples, 77.86%)</title><rect x="15.3" y="867.0" width="918.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.3" y="878.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (5,572 samples, 77.86%)</title><rect x="15.3" y="851.0" width="918.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.3" y="862.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (4 samples, 0.06%)</title><rect x="16.6" y="835.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="19.6" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="16.9" y="819.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.9" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="16.9" y="803.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.9" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="16.9" y="787.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (9 samples, 0.13%)</title><rect x="17.3" y="835.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.13%)</title><rect x="17.3" y="819.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.13%)</title><rect x="17.3" y="803.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.13%)</title><rect x="17.3" y="787.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="20.3" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/RepliServiceImpl$$Lambda$68/2145359531.run (4 samples, 0.06%)</title><rect x="18.1" y="771.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="21.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (421 samples, 5.88%)</title><rect x="18.7" y="835.0" width="69.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="21.7" y="846.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (420 samples, 5.87%)</title><rect x="18.9" y="819.0" width="69.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="21.9" y="830.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.dequeue (6 samples, 0.08%)</title><rect x="20.4" y="803.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (6 samples, 0.08%)</title><rect x="20.4" y="787.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="23.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (6 samples, 0.08%)</title><rect x="20.4" y="771.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="23.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (6 samples, 0.08%)</title><rect x="20.4" y="755.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="23.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (382 samples, 5.34%)</title><rect x="21.4" y="803.0" width="63.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.4" y="814.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (12 samples, 0.17%)</title><rect x="22.2" y="787.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (8 samples, 0.11%)</title><rect x="24.2" y="787.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.11%)</title><rect x="24.2" y="771.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.03%)</title><rect x="25.0" y="755.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="28.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.03%)</title><rect x="25.0" y="739.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (8 samples, 0.11%)</title><rect x="25.5" y="787.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (8 samples, 0.11%)</title><rect x="25.5" y="771.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (347 samples, 4.85%)</title><rect x="26.8" y="787.0" width="57.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="29.8" y="798.0">java/u..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (345 samples, 4.82%)</title><rect x="27.1" y="771.0" width="56.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="30.1" y="782.0">jdk/in..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.03%)</title><rect x="28.0" y="755.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="31.0" y="766.0"></text>
</g>
<g>
<title>Unsafe_Park (162 samples, 2.26%)</title><rect x="28.6" y="755.0" width="26.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="31.6" y="766.0">U..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (4 samples, 0.06%)</title><rect x="29.1" y="739.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="32.1" y="750.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.03%)</title><rect x="29.8" y="739.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="32.8" y="750.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.03%)</title><rect x="30.1" y="739.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="33.1" y="750.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (38 samples, 0.53%)</title><rect x="30.4" y="739.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="33.4" y="750.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.06%)</title><rect x="33.7" y="723.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="36.7" y="734.0"></text>
</g>
<g>
<title>__tls_get_addr (8 samples, 0.11%)</title><rect x="34.6" y="723.0" width="1.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="37.6" y="734.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (4 samples, 0.06%)</title><rect x="35.9" y="723.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="38.9" y="734.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (3 samples, 0.04%)</title><rect x="36.7" y="739.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="39.7" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.03%)</title><rect x="37.2" y="739.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="40.2" y="750.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (2 samples, 0.03%)</title><rect x="37.5" y="739.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="40.5" y="750.0"></text>
</g>
<g>
<title>__lll_unlock_wake (71 samples, 0.99%)</title><rect x="37.9" y="739.0" width="11.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="40.9" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (58 samples, 0.81%)</title><rect x="40.0" y="723.0" width="9.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="43.0" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (57 samples, 0.80%)</title><rect x="40.2" y="707.0" width="9.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="43.2" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (19 samples, 0.27%)</title><rect x="46.4" y="691.0" width="3.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="49.4" y="702.0"></text>
</g>
<g>
<title>do_futex (16 samples, 0.22%)</title><rect x="46.6" y="675.0" width="2.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="49.6" y="686.0"></text>
</g>
<g>
<title>futex_wake (8 samples, 0.11%)</title><rect x="47.3" y="659.0" width="1.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="50.3" y="670.0"></text>
</g>
<g>
<title>get_futex_key (3 samples, 0.04%)</title><rect x="48.1" y="643.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="51.1" y="654.0"></text>
</g>
<g>
<title>hash_futex (3 samples, 0.04%)</title><rect x="48.8" y="659.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="51.8" y="670.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.03%)</title><rect x="49.2" y="675.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="52.2" y="686.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 0.04%)</title><rect x="49.6" y="739.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="52.6" y="750.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="50.1" y="739.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="53.1" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.03%)</title><rect x="50.6" y="739.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="53.6" y="750.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (6 samples, 0.08%)</title><rect x="50.9" y="739.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="53.9" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (13 samples, 0.18%)</title><rect x="51.9" y="739.0" width="2.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="54.9" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_unlock@plt (8 samples, 0.11%)</title><rect x="54.0" y="739.0" width="1.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="57.0" y="750.0"></text>
</g>
<g>
<title>[unknown] (172 samples, 2.40%)</title><rect x="55.3" y="755.0" width="28.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="58.3" y="766.0">[u..</text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (2 samples, 0.03%)</title><rect x="55.3" y="739.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="58.3" y="750.0"></text>
</g>
<g>
<title>__pthread_cleanup_pop (8 samples, 0.11%)</title><rect x="55.7" y="739.0" width="1.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="58.7" y="750.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (26 samples, 0.36%)</title><rect x="57.2" y="739.0" width="4.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="60.2" y="750.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (6 samples, 0.08%)</title><rect x="61.4" y="739.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="64.4" y="750.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (127 samples, 1.77%)</title><rect x="62.8" y="739.0" width="20.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="65.8" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (70 samples, 0.98%)</title><rect x="72.2" y="723.0" width="11.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="75.2" y="734.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.04%)</title><rect x="72.2" y="707.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="75.2" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (67 samples, 0.94%)</title><rect x="72.7" y="707.0" width="11.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="75.7" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (45 samples, 0.63%)</title><rect x="76.3" y="691.0" width="7.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="79.3" y="702.0"></text>
</g>
<g>
<title>do_futex (42 samples, 0.59%)</title><rect x="76.8" y="675.0" width="6.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="79.8" y="686.0"></text>
</g>
<g>
<title>futex_wait (38 samples, 0.53%)</title><rect x="77.4" y="659.0" width="6.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="80.4" y="670.0"></text>
</g>
<g>
<title>futex_wait_queue_me (6 samples, 0.08%)</title><rect x="78.8" y="643.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="81.8" y="654.0"></text>
</g>
<g>
<title>schedule (5 samples, 0.07%)</title><rect x="78.9" y="627.0" width="0.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="81.9" y="638.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.04%)</title><rect x="79.3" y="611.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="82.3" y="622.0"></text>
</g>
<g>
<title>futex_wait_setup (19 samples, 0.27%)</title><rect x="79.8" y="643.0" width="3.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="82.8" y="654.0"></text>
</g>
<g>
<title>get_futex_key (4 samples, 0.06%)</title><rect x="81.1" y="627.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="84.1" y="638.0"></text>
</g>
<g>
<title>get_futex_value_locked (6 samples, 0.08%)</title><rect x="81.9" y="627.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="84.9" y="638.0"></text>
</g>
<g>
<title>plist_add (3 samples, 0.04%)</title><rect x="83.2" y="643.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="86.2" y="654.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.03%)</title><rect x="83.7" y="755.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="86.7" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="84.0" y="787.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="87.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (23 samples, 0.32%)</title><rect x="84.4" y="803.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="87.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (23 samples, 0.32%)</title><rect x="84.4" y="787.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="87.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (23 samples, 0.32%)</title><rect x="84.4" y="771.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="87.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (23 samples, 0.32%)</title><rect x="84.4" y="755.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="87.4" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (16 samples, 0.22%)</title><rect x="85.5" y="739.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="88.5" y="750.0"></text>
</g>
<g>
<title>Unsafe_Unpark (2 samples, 0.03%)</title><rect x="85.7" y="723.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="88.7" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_signal (13 samples, 0.18%)</title><rect x="86.0" y="723.0" width="2.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="89.0" y="734.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (13 samples, 0.18%)</title><rect x="86.0" y="707.0" width="2.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="89.0" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (13 samples, 0.18%)</title><rect x="86.0" y="691.0" width="2.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="89.0" y="702.0"></text>
</g>
<g>
<title>__x64_sys_futex (12 samples, 0.17%)</title><rect x="86.2" y="675.0" width="2.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="89.2" y="686.0"></text>
</g>
<g>
<title>do_futex (12 samples, 0.17%)</title><rect x="86.2" y="659.0" width="2.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="89.2" y="670.0"></text>
</g>
<g>
<title>futex_wake (12 samples, 0.17%)</title><rect x="86.2" y="643.0" width="2.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="89.2" y="654.0"></text>
</g>
<g>
<title>wake_up_q (12 samples, 0.17%)</title><rect x="86.2" y="627.0" width="2.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="89.2" y="638.0"></text>
</g>
<g>
<title>try_to_wake_up (12 samples, 0.17%)</title><rect x="86.2" y="611.0" width="2.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="89.2" y="622.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (12 samples, 0.17%)</title><rect x="86.2" y="595.0" width="2.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="89.2" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/RepliServiceImpl$$Lambda$68/2145359531.run (5,129 samples, 71.67%)</title><rect x="88.2" y="835.0" width="845.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="91.2" y="846.0">ru/mail/polis/service/codearound/RepliServiceImpl$$Lambda$68/2145359531.run</text>
</g>
<g>
<title>ru/mail/polis/service/codearound/RepliServiceImpl.lambda$runAsyncHandler$7 (5,129 samples, 71.67%)</title><rect x="88.2" y="819.0" width="845.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="91.2" y="830.0">ru/mail/polis/service/codearound/RepliServiceImpl.lambda$runAsyncHandler$7</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,445 samples, 20.19%)</title><rect x="88.2" y="803.0" width="238.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="91.2" y="814.0">one/nio/http/HttpSession.sendRes..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (15 samples, 0.21%)</title><rect x="91.5" y="787.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="94.5" y="798.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (15 samples, 0.21%)</title><rect x="91.5" y="771.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="94.5" y="782.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (14 samples, 0.20%)</title><rect x="91.6" y="755.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="94.6" y="766.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (13 samples, 0.18%)</title><rect x="91.6" y="739.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="94.6" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,391 samples, 19.44%)</title><rect x="93.9" y="787.0" width="229.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="96.9" y="798.0">one/nio/http/HttpSession.write..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (45 samples, 0.63%)</title><rect x="94.4" y="771.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="97.4" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (21 samples, 0.29%)</title><rect x="98.2" y="755.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="101.2" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (21 samples, 0.29%)</title><rect x="98.2" y="739.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="101.2" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (21 samples, 0.29%)</title><rect x="98.2" y="723.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="101.2" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="101.2" y="707.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="104.2" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,343 samples, 18.77%)</title><rect x="101.8" y="771.0" width="221.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="104.8" y="782.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,342 samples, 18.75%)</title><rect x="102.0" y="755.0" width="221.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="105.0" y="766.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,332 samples, 18.61%)</title><rect x="103.7" y="739.0" width="219.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="106.7" y="750.0">one/nio/net/Session$ArrayQueu..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.06%)</title><rect x="105.0" y="723.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="108.0" y="734.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,320 samples, 18.45%)</title><rect x="105.6" y="723.0" width="217.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="108.6" y="734.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (31 samples, 0.43%)</title><rect x="111.1" y="707.0" width="5.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="114.1" y="718.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.03%)</title><rect x="114.2" y="691.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="117.2" y="702.0"></text>
</g>
<g>
<title>__memmove_ssse3 (3 samples, 0.04%)</title><rect x="114.7" y="691.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="117.7" y="702.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.07%)</title><rect x="115.2" y="691.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="118.2" y="702.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.04%)</title><rect x="115.5" y="675.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="118.5" y="686.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (11 samples, 0.15%)</title><rect x="116.2" y="707.0" width="1.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="119.2" y="718.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (3 samples, 0.04%)</title><rect x="118.0" y="707.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="121.0" y="718.0"></text>
</g>
<g>
<title>__libc_send (1,238 samples, 17.30%)</title><rect x="118.5" y="707.0" width="204.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="121.5" y="718.0">__libc_send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,215 samples, 16.98%)</title><rect x="122.3" y="691.0" width="200.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="125.3" y="702.0">entry_SYSCALL_64_after_hwf..</text>
</g>
<g>
<title>__x64_sys_sendto (3 samples, 0.04%)</title><rect x="122.3" y="675.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="125.3" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (1,211 samples, 16.92%)</title><rect x="123.0" y="675.0" width="199.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="126.0" y="686.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (1,144 samples, 15.99%)</title><rect x="133.8" y="659.0" width="188.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="136.8" y="670.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (1,141 samples, 15.94%)</title><rect x="134.2" y="643.0" width="188.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="137.2" y="654.0">__sys_sendto</text>
</g>
<g>
<title>__fdget (2 samples, 0.03%)</title><rect x="136.0" y="627.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="139.0" y="638.0"></text>
</g>
<g>
<title>inet_sendmsg (4 samples, 0.06%)</title><rect x="136.5" y="627.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="139.5" y="638.0"></text>
</g>
<g>
<title>sock_sendmsg (1,112 samples, 15.54%)</title><rect x="137.1" y="627.0" width="183.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="140.1" y="638.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (3 samples, 0.04%)</title><rect x="137.3" y="611.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="140.3" y="622.0"></text>
</g>
<g>
<title>inet_sendmsg (1,097 samples, 15.33%)</title><rect x="137.8" y="611.0" width="180.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="140.8" y="622.0">inet_sendmsg</text>
</g>
<g>
<title>release_sock (2 samples, 0.03%)</title><rect x="138.8" y="595.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="141.8" y="606.0"></text>
</g>
<g>
<title>tcp_sendmsg (1,088 samples, 15.20%)</title><rect x="139.1" y="595.0" width="179.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="142.1" y="606.0">tcp_sendmsg</text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.03%)</title><rect x="139.8" y="579.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="142.8" y="590.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (3 samples, 0.04%)</title><rect x="140.1" y="579.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="143.1" y="590.0"></text>
</g>
<g>
<title>lock_sock_nested (8 samples, 0.11%)</title><rect x="140.6" y="579.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="143.6" y="590.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (8 samples, 0.11%)</title><rect x="140.6" y="563.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="143.6" y="574.0"></text>
</g>
<g>
<title>release_sock (7 samples, 0.10%)</title><rect x="141.9" y="579.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="144.9" y="590.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.03%)</title><rect x="142.1" y="563.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="145.1" y="574.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.03%)</title><rect x="142.4" y="563.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="145.4" y="574.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (2 samples, 0.03%)</title><rect x="142.7" y="563.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="145.7" y="574.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.03%)</title><rect x="142.7" y="547.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="145.7" y="558.0"></text>
</g>
<g>
<title>sock_zerocopy_put (4 samples, 0.06%)</title><rect x="143.2" y="579.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="146.2" y="590.0"></text>
</g>
<g>
<title>tcp_push (3 samples, 0.04%)</title><rect x="143.9" y="579.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="146.9" y="590.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (5 samples, 0.07%)</title><rect x="144.4" y="579.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="147.4" y="590.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1,045 samples, 14.60%)</title><rect x="145.4" y="579.0" width="172.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="148.4" y="590.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (7 samples, 0.10%)</title><rect x="148.5" y="563.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="151.5" y="574.0"></text>
</g>
<g>
<title>__virt_addr_valid (6 samples, 0.08%)</title><rect x="148.5" y="547.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="151.5" y="558.0"></text>
</g>
<g>
<title>__virt_addr_valid (3 samples, 0.04%)</title><rect x="149.7" y="563.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="152.7" y="574.0"></text>
</g>
<g>
<title>_copy_from_iter_full (14 samples, 0.20%)</title><rect x="150.2" y="563.0" width="2.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="153.2" y="574.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (11 samples, 0.15%)</title><rect x="150.5" y="547.0" width="1.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="153.5" y="558.0"></text>
</g>
<g>
<title>check_stack_object (5 samples, 0.07%)</title><rect x="152.5" y="563.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="155.5" y="574.0"></text>
</g>
<g>
<title>sk_forced_mem_schedule (5 samples, 0.07%)</title><rect x="153.5" y="563.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="156.5" y="574.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (74 samples, 1.03%)</title><rect x="154.3" y="563.0" width="12.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="157.3" y="574.0"></text>
</g>
<g>
<title>__alloc_skb (55 samples, 0.77%)</title><rect x="156.1" y="547.0" width="9.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="159.1" y="558.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.54 (24 samples, 0.34%)</title><rect x="157.1" y="531.0" width="3.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="160.1" y="542.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (21 samples, 0.29%)</title><rect x="157.1" y="515.0" width="3.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="160.1" y="526.0"></text>
</g>
<g>
<title>__slab_alloc (11 samples, 0.15%)</title><rect x="158.4" y="499.0" width="1.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="161.4" y="510.0"></text>
</g>
<g>
<title>_cond_resched (2 samples, 0.03%)</title><rect x="160.2" y="499.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="163.2" y="510.0"></text>
</g>
<g>
<title>kmalloc_slab (2 samples, 0.03%)</title><rect x="160.7" y="515.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="163.7" y="526.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (25 samples, 0.35%)</title><rect x="161.0" y="531.0" width="4.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="164.0" y="542.0"></text>
</g>
<g>
<title>__slab_alloc (7 samples, 0.10%)</title><rect x="163.7" y="515.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="166.7" y="526.0"></text>
</g>
<g>
<title>ksize (7 samples, 0.10%)</title><rect x="165.3" y="547.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="168.3" y="558.0"></text>
</g>
<g>
<title>skb_entail (4 samples, 0.06%)</title><rect x="166.5" y="563.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="169.5" y="574.0"></text>
</g>
<g>
<title>tcp_push (885 samples, 12.37%)</title><rect x="167.5" y="563.0" width="145.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="170.5" y="574.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (881 samples, 12.31%)</title><rect x="168.0" y="547.0" width="145.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="171.0" y="558.0">__tcp_push_pending..</text>
</g>
<g>
<title>ktime_get (2 samples, 0.03%)</title><rect x="168.3" y="531.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="171.3" y="542.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (2 samples, 0.03%)</title><rect x="168.6" y="531.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="171.6" y="542.0"></text>
</g>
<g>
<title>tcp_write_xmit (875 samples, 12.23%)</title><rect x="169.0" y="531.0" width="144.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="172.0" y="542.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (804 samples, 11.24%)</title><rect x="172.3" y="515.0" width="132.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="175.3" y="526.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__ip_queue_xmit (2 samples, 0.03%)</title><rect x="175.2" y="499.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="178.2" y="510.0"></text>
</g>
<g>
<title>__skb_clone (3 samples, 0.04%)</title><rect x="175.6" y="499.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="178.6" y="510.0"></text>
</g>
<g>
<title>ip_queue_xmit (764 samples, 10.68%)</title><rect x="176.4" y="499.0" width="126.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="179.4" y="510.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (760 samples, 10.62%)</title><rect x="176.4" y="483.0" width="125.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="179.4" y="494.0">__ip_queue_xmit</text>
</g>
<g>
<title>ip_local_out (747 samples, 10.44%)</title><rect x="178.0" y="467.0" width="123.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="181.0" y="478.0">ip_local_out</text>
</g>
<g>
<title>ip_finish_output (2 samples, 0.03%)</title><rect x="178.5" y="451.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="181.5" y="462.0"></text>
</g>
<g>
<title>ip_output (739 samples, 10.33%)</title><rect x="178.9" y="451.0" width="121.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="181.9" y="462.0">ip_output</text>
</g>
<g>
<title>ip_finish_output2 (2 samples, 0.03%)</title><rect x="179.7" y="435.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="182.7" y="446.0"></text>
</g>
<g>
<title>ip_finish_output (731 samples, 10.22%)</title><rect x="180.0" y="435.0" width="120.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="183.0" y="446.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (4 samples, 0.06%)</title><rect x="182.3" y="419.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="185.3" y="430.0"></text>
</g>
<g>
<title>ip_finish_output2 (710 samples, 9.92%)</title><rect x="183.3" y="419.0" width="117.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="186.3" y="430.0">ip_finish_outp..</text>
</g>
<g>
<title>__local_bh_enable_ip (628 samples, 8.78%)</title><rect x="185.4" y="403.0" width="103.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="188.4" y="414.0">__local_bh_e..</text>
</g>
<g>
<title>do_softirq.part.21 (628 samples, 8.78%)</title><rect x="185.4" y="387.0" width="103.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="188.4" y="398.0">do_softirq.p..</text>
</g>
<g>
<title>do_softirq_own_stack (624 samples, 8.72%)</title><rect x="186.1" y="371.0" width="102.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="189.1" y="382.0">do_softirq_o..</text>
</g>
<g>
<title>__softirqentry_text_start (621 samples, 8.68%)</title><rect x="186.1" y="355.0" width="102.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="189.1" y="366.0">__softirqent..</text>
</g>
<g>
<title>__kfree_skb_flush (3 samples, 0.04%)</title><rect x="187.4" y="339.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="190.4" y="350.0"></text>
</g>
<g>
<title>net_rx_action (609 samples, 8.51%)</title><rect x="188.1" y="339.0" width="100.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="191.1" y="350.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (596 samples, 8.33%)</title><rect x="190.2" y="323.0" width="98.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="193.2" y="334.0">process_back..</text>
</g>
<g>
<title>__netif_receive_skb (577 samples, 8.06%)</title><rect x="193.2" y="307.0" width="95.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="196.2" y="318.0">__netif_rec..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (574 samples, 8.02%)</title><rect x="193.5" y="291.0" width="94.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="196.5" y="302.0">__netif_rec..</text>
</g>
<g>
<title>__netif_receive_skb_core (13 samples, 0.18%)</title><rect x="194.5" y="275.0" width="2.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="197.5" y="286.0"></text>
</g>
<g>
<title>ip_rcv (551 samples, 7.70%)</title><rect x="196.7" y="275.0" width="90.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="199.7" y="286.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (5 samples, 0.07%)</title><rect x="197.3" y="259.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="200.3" y="270.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.21 (10 samples, 0.14%)</title><rect x="198.1" y="259.0" width="1.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="201.1" y="270.0"></text>
</g>
<g>
<title>ip_rcv_finish (530 samples, 7.41%)</title><rect x="199.8" y="259.0" width="87.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="202.8" y="270.0">ip_rcv_fin..</text>
</g>
<g>
<title>ip_local_deliver (523 samples, 7.31%)</title><rect x="199.8" y="243.0" width="86.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="202.8" y="254.0">ip_local_d..</text>
</g>
<g>
<title>ip_local_deliver_finish (523 samples, 7.31%)</title><rect x="199.8" y="227.0" width="86.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="202.8" y="238.0">ip_local_d..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (521 samples, 7.28%)</title><rect x="200.0" y="211.0" width="85.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="203.0" y="222.0">ip_protoco..</text>
</g>
<g>
<title>raw_local_deliver (3 samples, 0.04%)</title><rect x="201.1" y="195.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="204.1" y="206.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (2 samples, 0.03%)</title><rect x="201.8" y="195.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="204.8" y="206.0"></text>
</g>
<g>
<title>tcp_v4_rcv (507 samples, 7.08%)</title><rect x="202.3" y="195.0" width="83.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="205.3" y="206.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (17 samples, 0.24%)</title><rect x="204.6" y="179.0" width="2.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="207.6" y="190.0"></text>
</g>
<g>
<title>inet_ehashfn (3 samples, 0.04%)</title><rect x="206.9" y="163.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="209.9" y="174.0"></text>
</g>
<g>
<title>inet_ehashfn (3 samples, 0.04%)</title><rect x="207.4" y="179.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="210.4" y="190.0"></text>
</g>
<g>
<title>ipv4_dst_check (3 samples, 0.04%)</title><rect x="207.9" y="179.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="210.9" y="190.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (9 samples, 0.13%)</title><rect x="208.5" y="179.0" width="1.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="211.5" y="190.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (4 samples, 0.06%)</title><rect x="209.0" y="163.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="212.0" y="174.0"></text>
</g>
<g>
<title>tcp_parse_md5sig_option (3 samples, 0.04%)</title><rect x="210.0" y="179.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="213.0" y="190.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (453 samples, 6.33%)</title><rect x="210.7" y="179.0" width="74.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="213.7" y="190.0">tcp_v4_d..</text>
</g>
<g>
<title>tcp_check_space (2 samples, 0.03%)</title><rect x="211.2" y="163.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="214.2" y="174.0"></text>
</g>
<g>
<title>tcp_rcv_established (447 samples, 6.25%)</title><rect x="211.5" y="163.0" width="73.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="214.5" y="174.0">tcp_rcv_..</text>
</g>
<g>
<title>__tcp_ack_snd_check (22 samples, 0.31%)</title><rect x="213.3" y="147.0" width="3.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="216.3" y="158.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (19 samples, 0.27%)</title><rect x="213.8" y="131.0" width="3.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="216.8" y="142.0"></text>
</g>
<g>
<title>sk_reset_timer (17 samples, 0.24%)</title><rect x="214.1" y="115.0" width="2.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="217.1" y="126.0"></text>
</g>
<g>
<title>lock_timer_base (3 samples, 0.04%)</title><rect x="214.1" y="99.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="217.1" y="110.0"></text>
</g>
<g>
<title>mod_timer (14 samples, 0.20%)</title><rect x="214.6" y="99.0" width="2.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="217.6" y="110.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (10 samples, 0.14%)</title><rect x="215.1" y="83.0" width="1.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="218.1" y="94.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (3 samples, 0.04%)</title><rect x="216.9" y="147.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="219.9" y="158.0"></text>
</g>
<g>
<title>dst_release (3 samples, 0.04%)</title><rect x="217.4" y="147.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="220.4" y="158.0"></text>
</g>
<g>
<title>ktime_get_seconds (2 samples, 0.03%)</title><rect x="217.9" y="147.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="220.9" y="158.0"></text>
</g>
<g>
<title>sk_forced_mem_schedule (4 samples, 0.06%)</title><rect x="218.3" y="147.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="221.3" y="158.0"></text>
</g>
<g>
<title>sock_def_readable (3 samples, 0.04%)</title><rect x="218.9" y="147.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="221.9" y="158.0"></text>
</g>
<g>
<title>tcp_ack (94 samples, 1.31%)</title><rect x="219.4" y="147.0" width="15.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="222.4" y="158.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (3 samples, 0.04%)</title><rect x="223.2" y="131.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="226.2" y="142.0"></text>
</g>
<g>
<title>rb_first (2 samples, 0.03%)</title><rect x="223.7" y="131.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="226.7" y="142.0"></text>
</g>
<g>
<title>rb_next (5 samples, 0.07%)</title><rect x="224.0" y="131.0" width="0.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="227.0" y="142.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (55 samples, 0.77%)</title><rect x="225.0" y="131.0" width="9.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="228.0" y="142.0"></text>
</g>
<g>
<title>__kfree_skb (26 samples, 0.36%)</title><rect x="228.2" y="115.0" width="4.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="231.2" y="126.0"></text>
</g>
<g>
<title>kfree_skbmem (5 samples, 0.07%)</title><rect x="228.3" y="99.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="231.3" y="110.0"></text>
</g>
<g>
<title>kmem_cache_free (3 samples, 0.04%)</title><rect x="228.7" y="83.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="231.7" y="94.0"></text>
</g>
<g>
<title>skb_release_all (16 samples, 0.22%)</title><rect x="229.1" y="99.0" width="2.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="232.1" y="110.0"></text>
</g>
<g>
<title>skb_release_data (11 samples, 0.15%)</title><rect x="229.5" y="83.0" width="1.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="232.5" y="94.0"></text>
</g>
<g>
<title>kfree (2 samples, 0.03%)</title><rect x="230.0" y="67.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="233.0" y="78.0"></text>
</g>
<g>
<title>skb_free_head (6 samples, 0.08%)</title><rect x="230.3" y="67.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="233.3" y="78.0"></text>
</g>
<g>
<title>kfree (6 samples, 0.08%)</title><rect x="230.3" y="51.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="233.3" y="62.0"></text>
</g>
<g>
<title>skb_release_head_state (3 samples, 0.04%)</title><rect x="231.3" y="83.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="234.3" y="94.0"></text>
</g>
<g>
<title>skb_release_head_state (3 samples, 0.04%)</title><rect x="232.0" y="99.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="235.0" y="110.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.47 (5 samples, 0.07%)</title><rect x="232.8" y="115.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="235.8" y="126.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (3 samples, 0.04%)</title><rect x="233.6" y="115.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="236.6" y="126.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (3 samples, 0.04%)</title><rect x="234.4" y="131.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="237.4" y="142.0"></text>
</g>
<g>
<title>tcp_check_space (4 samples, 0.06%)</title><rect x="234.9" y="147.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="237.9" y="158.0"></text>
</g>
<g>
<title>tcp_data_queue (276 samples, 3.86%)</title><rect x="235.7" y="147.0" width="45.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="238.7" y="158.0">tcp_..</text>
</g>
<g>
<title>dst_release (3 samples, 0.04%)</title><rect x="236.6" y="131.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="239.6" y="142.0"></text>
</g>
<g>
<title>sock_def_readable (259 samples, 3.62%)</title><rect x="237.1" y="131.0" width="42.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="240.1" y="142.0">sock..</text>
</g>
<g>
<title>__wake_up_sync_key (248 samples, 3.47%)</title><rect x="238.9" y="115.0" width="40.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="241.9" y="126.0">__w..</text>
</g>
<g>
<title>__wake_up_common_lock (248 samples, 3.47%)</title><rect x="238.9" y="99.0" width="40.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="241.9" y="110.0">__w..</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (245 samples, 3.42%)</title><rect x="239.4" y="83.0" width="40.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="242.4" y="94.0">_ra..</text>
</g>
<g>
<title>tcp_event_data_recv (6 samples, 0.08%)</title><rect x="279.8" y="131.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="282.8" y="142.0"></text>
</g>
<g>
<title>tcp_queue_rcv (3 samples, 0.04%)</title><rect x="280.8" y="131.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="283.8" y="142.0"></text>
</g>
<g>
<title>tcp_event_data_recv (3 samples, 0.04%)</title><rect x="281.3" y="147.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="284.3" y="158.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (7 samples, 0.10%)</title><rect x="281.7" y="147.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="284.7" y="158.0"></text>
</g>
<g>
<title>ktime_get (5 samples, 0.07%)</title><rect x="281.7" y="131.0" width="0.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="284.7" y="142.0"></text>
</g>
<g>
<title>read_tsc (3 samples, 0.04%)</title><rect x="282.1" y="115.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="285.1" y="126.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.03%)</title><rect x="282.6" y="131.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="285.6" y="142.0"></text>
</g>
<g>
<title>tcp_queue_rcv (3 samples, 0.04%)</title><rect x="283.1" y="147.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="286.1" y="158.0"></text>
</g>
<g>
<title>tcp_rate_gen (6 samples, 0.08%)</title><rect x="283.6" y="147.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="286.6" y="158.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (2 samples, 0.03%)</title><rect x="284.7" y="147.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="287.7" y="158.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (3 samples, 0.04%)</title><rect x="285.4" y="179.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="288.4" y="190.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.19 (6 samples, 0.08%)</title><rect x="286.2" y="243.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="289.2" y="254.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.19 (2 samples, 0.03%)</title><rect x="287.2" y="259.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="290.2" y="270.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.21 (2 samples, 0.03%)</title><rect x="287.5" y="275.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="290.5" y="286.0"></text>
</g>
<g>
<title>ip_rcv_finish (2 samples, 0.03%)</title><rect x="287.9" y="275.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="290.9" y="286.0"></text>
</g>
<g>
<title>net_rx_action (3 samples, 0.04%)</title><rect x="288.5" y="355.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="291.5" y="366.0"></text>
</g>
<g>
<title>dev_queue_xmit (69 samples, 0.96%)</title><rect x="289.0" y="403.0" width="11.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="292.0" y="414.0"></text>
</g>
<g>
<title>__dev_queue_xmit (65 samples, 0.91%)</title><rect x="289.0" y="387.0" width="10.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="292.0" y="398.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (29 samples, 0.41%)</title><rect x="290.7" y="371.0" width="4.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="293.7" y="382.0"></text>
</g>
<g>
<title>loopback_xmit (24 samples, 0.34%)</title><rect x="291.3" y="355.0" width="4.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="294.3" y="366.0"></text>
</g>
<g>
<title>eth_type_trans (3 samples, 0.04%)</title><rect x="291.8" y="339.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="294.8" y="350.0"></text>
</g>
<g>
<title>netif_rx (12 samples, 0.17%)</title><rect x="292.3" y="339.0" width="2.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="295.3" y="350.0"></text>
</g>
<g>
<title>netif_rx_internal (12 samples, 0.17%)</title><rect x="292.3" y="323.0" width="2.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="295.3" y="334.0"></text>
</g>
<g>
<title>enqueue_to_backlog (11 samples, 0.15%)</title><rect x="292.5" y="307.0" width="1.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="295.5" y="318.0"></text>
</g>
<g>
<title>netif_rx_internal (3 samples, 0.04%)</title><rect x="294.3" y="339.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="297.3" y="350.0"></text>
</g>
<g>
<title>sk_free (2 samples, 0.03%)</title><rect x="294.8" y="339.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="297.8" y="350.0"></text>
</g>
<g>
<title>loopback_xmit (4 samples, 0.06%)</title><rect x="295.4" y="371.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="298.4" y="382.0"></text>
</g>
<g>
<title>netdev_pick_tx (4 samples, 0.06%)</title><rect x="296.1" y="371.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="299.1" y="382.0"></text>
</g>
<g>
<title>validate_xmit_skb (16 samples, 0.22%)</title><rect x="296.9" y="371.0" width="2.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="299.9" y="382.0"></text>
</g>
<g>
<title>netif_skb_features (5 samples, 0.07%)</title><rect x="298.1" y="355.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="301.1" y="366.0"></text>
</g>
<g>
<title>skb_network_protocol (2 samples, 0.03%)</title><rect x="298.9" y="355.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="301.9" y="366.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (2 samples, 0.03%)</title><rect x="299.2" y="355.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="302.2" y="366.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (3 samples, 0.04%)</title><rect x="299.9" y="387.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="302.9" y="398.0"></text>
</g>
<g>
<title>ip_send_check (3 samples, 0.04%)</title><rect x="300.7" y="451.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="303.7" y="462.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.03%)</title><rect x="301.4" y="467.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="304.4" y="478.0"></text>
</g>
<g>
<title>skb_push (2 samples, 0.03%)</title><rect x="302.0" y="483.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="305.0" y="494.0"></text>
</g>
<g>
<title>skb_clone (6 samples, 0.08%)</title><rect x="302.4" y="499.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="305.4" y="510.0"></text>
</g>
<g>
<title>__copy_skb_header (2 samples, 0.03%)</title><rect x="302.5" y="483.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="305.5" y="494.0"></text>
</g>
<g>
<title>__skb_clone (3 samples, 0.04%)</title><rect x="302.9" y="483.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="305.9" y="494.0"></text>
</g>
<g>
<title>tcp_rate_skb_sent (2 samples, 0.03%)</title><rect x="303.5" y="499.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="306.5" y="510.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (4 samples, 0.06%)</title><rect x="303.8" y="499.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="306.8" y="510.0"></text>
</g>
<g>
<title>tcp_v4_send_check (2 samples, 0.03%)</title><rect x="304.5" y="499.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="307.5" y="510.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (2 samples, 0.03%)</title><rect x="304.8" y="515.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="307.8" y="526.0"></text>
</g>
<g>
<title>ip_queue_xmit (2 samples, 0.03%)</title><rect x="305.2" y="515.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="308.2" y="526.0"></text>
</g>
<g>
<title>ktime_get (6 samples, 0.08%)</title><rect x="305.5" y="515.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="308.5" y="526.0"></text>
</g>
<g>
<title>rb_first (2 samples, 0.03%)</title><rect x="306.5" y="515.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="309.5" y="526.0"></text>
</g>
<g>
<title>read_tsc (3 samples, 0.04%)</title><rect x="306.8" y="515.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="309.8" y="526.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (13 samples, 0.18%)</title><rect x="307.8" y="515.0" width="2.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="310.8" y="526.0"></text>
</g>
<g>
<title>tcp_rearm_rto (10 samples, 0.14%)</title><rect x="308.3" y="499.0" width="1.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="311.3" y="510.0"></text>
</g>
<g>
<title>sk_reset_timer (8 samples, 0.11%)</title><rect x="308.6" y="483.0" width="1.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="311.6" y="494.0"></text>
</g>
<g>
<title>mod_timer (7 samples, 0.10%)</title><rect x="308.8" y="467.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="311.8" y="478.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (4 samples, 0.06%)</title><rect x="309.1" y="451.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="312.1" y="462.0"></text>
</g>
<g>
<title>tcp_options_write (2 samples, 0.03%)</title><rect x="309.9" y="515.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="312.9" y="526.0"></text>
</g>
<g>
<title>tcp_rate_skb_sent (2 samples, 0.03%)</title><rect x="310.3" y="515.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="313.3" y="526.0"></text>
</g>
<g>
<title>tcp_rearm_rto (3 samples, 0.04%)</title><rect x="310.8" y="515.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="313.8" y="526.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (7 samples, 0.10%)</title><rect x="311.3" y="515.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="314.3" y="526.0"></text>
</g>
<g>
<title>mod_timer (2 samples, 0.03%)</title><rect x="311.6" y="499.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="314.6" y="510.0"></text>
</g>
<g>
<title>sk_reset_timer (3 samples, 0.04%)</title><rect x="311.9" y="499.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="314.9" y="510.0"></text>
</g>
<g>
<title>mod_timer (2 samples, 0.03%)</title><rect x="312.1" y="483.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="315.1" y="494.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (4 samples, 0.06%)</title><rect x="312.4" y="515.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="315.4" y="526.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (2 samples, 0.03%)</title><rect x="313.4" y="563.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="316.4" y="574.0"></text>
</g>
<g>
<title>tcp_send_mss (22 samples, 0.31%)</title><rect x="313.7" y="563.0" width="3.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="316.7" y="574.0"></text>
</g>
<g>
<title>ipv4_mtu (3 samples, 0.04%)</title><rect x="314.1" y="547.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="317.1" y="558.0"></text>
</g>
<g>
<title>tcp_current_mss (17 samples, 0.24%)</title><rect x="314.6" y="547.0" width="2.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="317.6" y="558.0"></text>
</g>
<g>
<title>ipv4_mtu (7 samples, 0.10%)</title><rect x="316.0" y="531.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="319.0" y="542.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (2 samples, 0.03%)</title><rect x="317.4" y="563.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="320.4" y="574.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (3 samples, 0.04%)</title><rect x="317.7" y="579.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="320.7" y="590.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (2 samples, 0.03%)</title><rect x="318.2" y="579.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="321.2" y="590.0"></text>
</g>
<g>
<title>security_socket_sendmsg (11 samples, 0.15%)</title><rect x="318.7" y="611.0" width="1.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="321.7" y="622.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (2 samples, 0.03%)</title><rect x="318.7" y="595.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="321.7" y="606.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (9 samples, 0.13%)</title><rect x="319.0" y="595.0" width="1.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="322.0" y="606.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (9 samples, 0.13%)</title><rect x="319.0" y="579.0" width="1.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="322.0" y="590.0"></text>
</g>
<g>
<title>aa_sk_perm (5 samples, 0.07%)</title><rect x="319.7" y="563.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="322.7" y="574.0"></text>
</g>
<g>
<title>sockfd_lookup_light (11 samples, 0.15%)</title><rect x="320.5" y="627.0" width="1.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="323.5" y="638.0"></text>
</g>
<g>
<title>__fdget (11 samples, 0.15%)</title><rect x="320.5" y="611.0" width="1.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="323.5" y="622.0"></text>
</g>
<g>
<title>__fget_light (11 samples, 0.15%)</title><rect x="320.5" y="595.0" width="1.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="323.5" y="606.0"></text>
</g>
<g>
<title>__fget (10 samples, 0.14%)</title><rect x="320.7" y="579.0" width="1.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="323.7" y="590.0"></text>
</g>
<g>
<title>send@plt (2 samples, 0.03%)</title><rect x="323.0" y="707.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="326.0" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (19 samples, 0.27%)</title><rect x="323.3" y="787.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="326.3" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (9 samples, 0.13%)</title><rect x="325.0" y="771.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="328.0" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (9 samples, 0.13%)</title><rect x="325.0" y="755.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="328.0" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/RepliServiceImpl$$Lambda$66/1595893425.exec (26 samples, 0.36%)</title><rect x="326.4" y="803.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="329.4" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/RepliServiceImpl.lambda$entity$2 (26 samples, 0.36%)</title><rect x="326.4" y="787.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="329.4" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/ReplicationLsm.upsertWithMultipleNodes (26 samples, 0.36%)</title><rect x="326.4" y="771.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="329.4" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.06%)</title><rect x="326.6" y="755.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="329.6" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.06%)</title><rect x="326.6" y="739.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="329.6" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/ModularTopology.replicasFor (21 samples, 0.29%)</title><rect x="327.3" y="755.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="330.3" y="766.0"></text>
</g>
<g>
<title>gettimeofday (9 samples, 0.13%)</title><rect x="328.4" y="739.0" width="1.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="331.4" y="750.0"></text>
</g>
<g>
<title>gettimeofday@plt (4 samples, 0.06%)</title><rect x="329.9" y="739.0" width="0.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="332.9" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/RepliServiceImpl$$Lambda$69/1047830724.exec (3,658 samples, 51.12%)</title><rect x="330.7" y="803.0" width="603.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="333.7" y="814.0">ru/mail/polis/service/codearound/RepliServiceImpl$$Lambda$69/1047830724.exec</text>
</g>
<g>
<title>ru/mail/polis/service/codearound/RepliServiceImpl.lambda$entity$1 (3,658 samples, 51.12%)</title><rect x="330.7" y="787.0" width="603.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="333.7" y="798.0">ru/mail/polis/service/codearound/RepliServiceImpl.lambda$entity$1</text>
</g>
<g>
<title>ru/mail/polis/service/codearound/ReplicationLsm.getWithMultipleNodes (3,653 samples, 51.05%)</title><rect x="331.5" y="771.0" width="602.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="334.5" y="782.0">ru/mail/polis/service/codearound/ReplicationLsm.getWithMultipleNodes</text>
</g>
<g>
<title>java/lang/String.getBytes (9 samples, 0.13%)</title><rect x="333.2" y="755.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="336.2" y="766.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (8 samples, 0.11%)</title><rect x="333.4" y="739.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="336.4" y="750.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2 samples, 0.03%)</title><rect x="334.4" y="723.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="337.4" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.04%)</title><rect x="334.7" y="755.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="337.7" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1585787493.invoke (3 samples, 0.04%)</title><rect x="334.7" y="739.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="337.7" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.04%)</title><rect x="334.7" y="723.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="337.7" y="734.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (3 samples, 0.04%)</title><rect x="334.7" y="707.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="337.7" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (26 samples, 0.36%)</title><rect x="335.2" y="755.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="338.2" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (25 samples, 0.35%)</title><rect x="335.3" y="739.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="338.3" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="335.5" y="723.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="338.5" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (22 samples, 0.31%)</title><rect x="335.8" y="723.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="338.8" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (22 samples, 0.31%)</title><rect x="335.8" y="707.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="338.8" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="338.5" y="691.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="341.5" y="702.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.06%)</title><rect x="338.8" y="691.0" width="0.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="341.8" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.03%)</title><rect x="339.5" y="755.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="342.5" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (6 samples, 0.08%)</title><rect x="339.8" y="755.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="342.8" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (6 samples, 0.08%)</title><rect x="339.8" y="739.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="342.8" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (6 samples, 0.08%)</title><rect x="339.8" y="723.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="342.8" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (6 samples, 0.08%)</title><rect x="339.8" y="707.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="342.8" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.04%)</title><rect x="340.3" y="691.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="343.3" y="702.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.03%)</title><rect x="340.9" y="755.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="343.9" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="341.3" y="755.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="344.3" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.createRequest (5 samples, 0.07%)</title><rect x="341.6" y="755.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="344.6" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.get (1,821 samples, 25.45%)</title><rect x="342.4" y="755.0" width="300.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="345.4" y="766.0">one/nio/http/HttpClient.get</text>
</g>
<g>
<title>one/nio/http/HttpClient.createRequest (14 samples, 0.20%)</title><rect x="342.4" y="739.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="345.4" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (5 samples, 0.07%)</title><rect x="343.9" y="723.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="346.9" y="734.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.07%)</title><rect x="343.9" y="707.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="346.9" y="718.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.07%)</title><rect x="343.9" y="691.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="346.9" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.07%)</title><rect x="343.9" y="675.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="346.9" y="686.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,807 samples, 25.25%)</title><rect x="344.7" y="739.0" width="298.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="347.7" y="750.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,807 samples, 25.25%)</title><rect x="344.7" y="723.0" width="298.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="347.7" y="734.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (5 samples, 0.07%)</title><rect x="347.5" y="707.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="350.5" y="718.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.07%)</title><rect x="347.5" y="691.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="350.5" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.07%)</title><rect x="347.5" y="675.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="350.5" y="686.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (458 samples, 6.40%)</title><rect x="348.4" y="707.0" width="75.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="351.4" y="718.0">one/nio/..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (5 samples, 0.07%)</title><rect x="361.2" y="691.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="364.2" y="702.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.07%)</title><rect x="361.2" y="675.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="364.2" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.07%)</title><rect x="361.2" y="659.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="364.2" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.06%)</title><rect x="361.2" y="643.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="364.2" y="654.0"></text>
</g>
<g>
<title>__memset_erms (2 samples, 0.03%)</title><rect x="361.6" y="627.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="364.6" y="638.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (375 samples, 5.24%)</title><rect x="362.1" y="691.0" width="61.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="365.1" y="702.0">one/ni..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (50 samples, 0.70%)</title><rect x="364.5" y="675.0" width="8.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="367.5" y="686.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (5 samples, 0.07%)</title><rect x="365.7" y="659.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="368.7" y="670.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.03%)</title><rect x="366.5" y="659.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="369.5" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.04%)</title><rect x="367.0" y="659.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="370.0" y="670.0"></text>
</g>
<g>
<title>__memmove_ssse3 (10 samples, 0.14%)</title><rect x="367.5" y="659.0" width="1.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="370.5" y="670.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (19 samples, 0.27%)</title><rect x="369.1" y="659.0" width="3.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="372.1" y="670.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.03%)</title><rect x="370.5" y="643.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="373.5" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.04%)</title><rect x="371.0" y="643.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="374.0" y="654.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.07%)</title><rect x="371.5" y="643.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="374.5" y="654.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (4 samples, 0.06%)</title><rect x="371.6" y="627.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="374.6" y="638.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.03%)</title><rect x="372.4" y="659.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="375.4" y="670.0"></text>
</g>
<g>
<title>__GI___recv (301 samples, 4.21%)</title><rect x="372.8" y="675.0" width="49.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="375.8" y="686.0">__GI_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (282 samples, 3.94%)</title><rect x="375.7" y="659.0" width="46.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="378.7" y="670.0">entr..</text>
</g>
<g>
<title>do_syscall_64 (281 samples, 3.93%)</title><rect x="375.9" y="643.0" width="46.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="378.9" y="654.0">do_s..</text>
</g>
<g>
<title>__x64_sys_recvfrom (249 samples, 3.48%)</title><rect x="381.2" y="627.0" width="41.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="384.2" y="638.0">__x..</text>
</g>
<g>
<title>__sys_recvfrom (244 samples, 3.41%)</title><rect x="381.2" y="611.0" width="40.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="384.2" y="622.0">__s..</text>
</g>
<g>
<title>__fdget (2 samples, 0.03%)</title><rect x="382.2" y="595.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="385.2" y="606.0"></text>
</g>
<g>
<title>fput (3 samples, 0.04%)</title><rect x="382.5" y="595.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="385.5" y="606.0"></text>
</g>
<g>
<title>iov_iter_init (2 samples, 0.03%)</title><rect x="383.3" y="595.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="386.3" y="606.0"></text>
</g>
<g>
<title>sock_recvmsg (219 samples, 3.06%)</title><rect x="383.7" y="595.0" width="36.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="386.7" y="606.0">soc..</text>
</g>
<g>
<title>apparmor_socket_recvmsg (2 samples, 0.03%)</title><rect x="384.0" y="579.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="387.0" y="590.0"></text>
</g>
<g>
<title>inet_recvmsg (200 samples, 2.79%)</title><rect x="384.3" y="579.0" width="33.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="387.3" y="590.0">in..</text>
</g>
<g>
<title>tcp_recvmsg (196 samples, 2.74%)</title><rect x="385.0" y="563.0" width="32.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="388.0" y="574.0">tc..</text>
</g>
<g>
<title>__kfree_skb (9 samples, 0.13%)</title><rect x="389.8" y="547.0" width="1.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="392.8" y="558.0"></text>
</g>
<g>
<title>skb_release_all (7 samples, 0.10%)</title><rect x="389.9" y="531.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="392.9" y="542.0"></text>
</g>
<g>
<title>skb_release_data (5 samples, 0.07%)</title><rect x="389.9" y="515.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="392.9" y="526.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (3 samples, 0.04%)</title><rect x="391.6" y="547.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="394.6" y="558.0"></text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.03%)</title><rect x="392.4" y="547.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="395.4" y="558.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.03%)</title><rect x="392.4" y="531.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="395.4" y="542.0"></text>
</g>
<g>
<title>sk_wait_data (100 samples, 1.40%)</title><rect x="392.9" y="547.0" width="16.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="395.9" y="558.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.03%)</title><rect x="395.4" y="531.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="398.4" y="542.0"></text>
</g>
<g>
<title>add_wait_queue (5 samples, 0.07%)</title><rect x="395.9" y="531.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="398.9" y="542.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (5 samples, 0.07%)</title><rect x="395.9" y="515.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="398.9" y="526.0"></text>
</g>
<g>
<title>lock_sock_nested (38 samples, 0.53%)</title><rect x="396.7" y="531.0" width="6.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="399.7" y="542.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (36 samples, 0.50%)</title><rect x="397.0" y="515.0" width="5.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="400.0" y="526.0"></text>
</g>
<g>
<title>remove_wait_queue (15 samples, 0.21%)</title><rect x="403.1" y="531.0" width="2.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="406.1" y="542.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (3 samples, 0.04%)</title><rect x="403.1" y="515.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="406.1" y="526.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (12 samples, 0.17%)</title><rect x="403.6" y="515.0" width="2.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="406.6" y="526.0"></text>
</g>
<g>
<title>schedule_timeout (2 samples, 0.03%)</title><rect x="405.6" y="531.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="408.6" y="542.0"></text>
</g>
<g>
<title>wait_woken (20 samples, 0.28%)</title><rect x="406.1" y="531.0" width="3.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="409.1" y="542.0"></text>
</g>
<g>
<title>lock_timer_base (2 samples, 0.03%)</title><rect x="406.2" y="515.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="409.2" y="526.0"></text>
</g>
<g>
<title>schedule_timeout (17 samples, 0.24%)</title><rect x="406.6" y="515.0" width="2.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="409.6" y="526.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (7 samples, 0.10%)</title><rect x="406.7" y="499.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="409.7" y="510.0"></text>
</g>
<g>
<title>lock_timer_base (2 samples, 0.03%)</title><rect x="407.9" y="499.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="410.9" y="510.0"></text>
</g>
<g>
<title>schedule (7 samples, 0.10%)</title><rect x="408.2" y="499.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="411.2" y="510.0"></text>
</g>
<g>
<title>__sched_text_start (7 samples, 0.10%)</title><rect x="408.2" y="483.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="411.2" y="494.0"></text>
</g>
<g>
<title>finish_task_switch (4 samples, 0.06%)</title><rect x="408.7" y="467.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="411.7" y="478.0"></text>
</g>
<g>
<title>apic_timer_interrupt (2 samples, 0.03%)</title><rect x="409.0" y="451.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="412.0" y="462.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (2 samples, 0.03%)</title><rect x="409.0" y="435.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="412.0" y="446.0"></text>
</g>
<g>
<title>irq_exit (2 samples, 0.03%)</title><rect x="409.0" y="419.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="412.0" y="430.0"></text>
</g>
<g>
<title>__softirqentry_text_start (2 samples, 0.03%)</title><rect x="409.0" y="403.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="412.0" y="414.0"></text>
</g>
<g>
<title>run_rebalance_domains (2 samples, 0.03%)</title><rect x="409.0" y="387.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="412.0" y="398.0"></text>
</g>
<g>
<title>update_blocked_averages (2 samples, 0.03%)</title><rect x="409.0" y="371.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="412.0" y="382.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.03%)</title><rect x="409.0" y="355.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="412.0" y="366.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (31 samples, 0.43%)</title><rect x="409.4" y="547.0" width="5.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="412.4" y="558.0"></text>
</g>
<g>
<title>__skb_datagram_iter (27 samples, 0.38%)</title><rect x="409.5" y="531.0" width="4.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="412.5" y="542.0"></text>
</g>
<g>
<title>__check_object_size (2 samples, 0.03%)</title><rect x="410.0" y="515.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="413.0" y="526.0"></text>
</g>
<g>
<title>simple_copy_to_iter (21 samples, 0.29%)</title><rect x="410.5" y="515.0" width="3.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="413.5" y="526.0"></text>
</g>
<g>
<title>__check_object_size (8 samples, 0.11%)</title><rect x="410.5" y="499.0" width="1.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="413.5" y="510.0"></text>
</g>
<g>
<title>__virt_addr_valid (5 samples, 0.07%)</title><rect x="411.0" y="483.0" width="0.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="414.0" y="494.0"></text>
</g>
<g>
<title>_copy_to_iter (11 samples, 0.15%)</title><rect x="412.0" y="499.0" width="1.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="415.0" y="510.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (11 samples, 0.15%)</title><rect x="412.0" y="483.0" width="1.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="415.0" y="494.0"></text>
</g>
<g>
<title>simple_copy_to_iter (3 samples, 0.04%)</title><rect x="414.0" y="531.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="417.0" y="542.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (5 samples, 0.07%)</title><rect x="414.5" y="547.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="417.5" y="558.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (10 samples, 0.14%)</title><rect x="415.3" y="547.0" width="1.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="418.3" y="558.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (10 samples, 0.14%)</title><rect x="415.3" y="531.0" width="1.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="418.3" y="542.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.03%)</title><rect x="416.1" y="515.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="419.1" y="526.0"></text>
</g>
<g>
<title>read_tsc (3 samples, 0.04%)</title><rect x="416.5" y="515.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="419.5" y="526.0"></text>
</g>
<g>
<title>wait_woken (2 samples, 0.03%)</title><rect x="417.0" y="547.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="420.0" y="558.0"></text>
</g>
<g>
<title>security_socket_recvmsg (14 samples, 0.20%)</title><rect x="417.3" y="579.0" width="2.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="420.3" y="590.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (12 samples, 0.17%)</title><rect x="417.6" y="563.0" width="2.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="420.6" y="574.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (11 samples, 0.15%)</title><rect x="417.8" y="547.0" width="1.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="420.8" y="558.0"></text>
</g>
<g>
<title>aa_sk_perm (10 samples, 0.14%)</title><rect x="418.0" y="531.0" width="1.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="421.0" y="542.0"></text>
</g>
<g>
<title>_cond_resched (2 samples, 0.03%)</title><rect x="418.9" y="515.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="421.9" y="526.0"></text>
</g>
<g>
<title>rcu_all_qs (2 samples, 0.03%)</title><rect x="419.3" y="515.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="422.3" y="526.0"></text>
</g>
<g>
<title>sockfd_lookup_light (10 samples, 0.14%)</title><rect x="419.8" y="595.0" width="1.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="422.8" y="606.0"></text>
</g>
<g>
<title>__fdget (9 samples, 0.13%)</title><rect x="419.9" y="579.0" width="1.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="422.9" y="590.0"></text>
</g>
<g>
<title>__fget_light (8 samples, 0.11%)</title><rect x="420.1" y="563.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="423.1" y="574.0"></text>
</g>
<g>
<title>__fget (6 samples, 0.08%)</title><rect x="420.4" y="547.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="423.4" y="558.0"></text>
</g>
<g>
<title>import_single_range (4 samples, 0.06%)</title><rect x="421.4" y="611.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="424.4" y="622.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (4 samples, 0.06%)</title><rect x="422.4" y="675.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="425.4" y="686.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 0.06%)</title><rect x="423.1" y="675.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="426.1" y="686.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (102 samples, 1.43%)</title><rect x="423.9" y="707.0" width="16.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="426.9" y="718.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (9 samples, 0.13%)</title><rect x="425.0" y="691.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="428.0" y="702.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (9 samples, 0.13%)</title><rect x="425.0" y="675.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="428.0" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (9 samples, 0.13%)</title><rect x="425.0" y="659.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="428.0" y="670.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (6 samples, 0.08%)</title><rect x="425.0" y="643.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="428.0" y="654.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (6 samples, 0.08%)</title><rect x="425.0" y="627.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="428.0" y="638.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (6 samples, 0.08%)</title><rect x="425.0" y="611.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="428.0" y="622.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.04%)</title><rect x="426.0" y="643.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="429.0" y="654.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.03%)</title><rect x="426.2" y="627.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="429.2" y="638.0"></text>
</g>
<g>
<title>java/lang/String.substring (9 samples, 0.13%)</title><rect x="426.5" y="691.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="429.5" y="702.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="427.0" y="675.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="430.0" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.06%)</title><rect x="427.4" y="675.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="430.4" y="686.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.04%)</title><rect x="427.5" y="659.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="430.5" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="427.7" y="643.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="430.7" y="654.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.06%)</title><rect x="428.0" y="691.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="431.0" y="702.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (34 samples, 0.48%)</title><rect x="428.7" y="691.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="431.7" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (30 samples, 0.42%)</title><rect x="429.2" y="675.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="432.2" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (29 samples, 0.41%)</title><rect x="429.3" y="659.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="432.3" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (11 samples, 0.15%)</title><rect x="434.3" y="691.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="437.3" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="435.8" y="675.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="438.8" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="435.8" y="659.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="438.8" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="435.8" y="643.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="438.8" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (3 samples, 0.04%)</title><rect x="436.1" y="691.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="439.1" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (24 samples, 0.34%)</title><rect x="436.6" y="691.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="439.6" y="702.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (17 samples, 0.24%)</title><rect x="437.7" y="675.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="440.7" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (17 samples, 0.24%)</title><rect x="437.7" y="659.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="440.7" y="670.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="440.1" y="643.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="443.1" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (45 samples, 0.63%)</title><rect x="440.7" y="707.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="443.7" y="718.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (17 samples, 0.24%)</title><rect x="445.2" y="691.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="448.2" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (17 samples, 0.24%)</title><rect x="445.2" y="675.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="448.2" y="686.0"></text>
</g>
<g>
<title>java/lang/String.charAt (17 samples, 0.24%)</title><rect x="445.2" y="659.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="448.2" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (9 samples, 0.13%)</title><rect x="448.1" y="707.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="451.1" y="718.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8 samples, 0.11%)</title><rect x="448.3" y="691.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="451.3" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.11%)</title><rect x="448.3" y="675.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="451.3" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (3 samples, 0.04%)</title><rect x="449.6" y="707.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="452.6" y="718.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (261 samples, 3.65%)</title><rect x="450.1" y="707.0" width="43.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="453.1" y="718.0">one/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (18 samples, 0.25%)</title><rect x="452.3" y="691.0" width="2.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="455.3" y="702.0"></text>
</g>
<g>
<title>__GI___setsockopt (229 samples, 3.20%)</title><rect x="455.2" y="691.0" width="37.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="458.2" y="702.0">__G..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (213 samples, 2.98%)</title><rect x="457.9" y="675.0" width="35.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="460.9" y="686.0">ent..</text>
</g>
<g>
<title>__x64_sys_setsockopt (5 samples, 0.07%)</title><rect x="457.9" y="659.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="460.9" y="670.0"></text>
</g>
<g>
<title>do_syscall_64 (208 samples, 2.91%)</title><rect x="458.7" y="659.0" width="34.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="461.7" y="670.0">do..</text>
</g>
<g>
<title>__sys_setsockopt (5 samples, 0.07%)</title><rect x="471.2" y="643.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="474.2" y="654.0"></text>
</g>
<g>
<title>__x64_sys_setsockopt (125 samples, 1.75%)</title><rect x="472.0" y="643.0" width="20.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="475.0" y="654.0"></text>
</g>
<g>
<title>__sys_setsockopt (121 samples, 1.69%)</title><rect x="472.2" y="627.0" width="20.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="475.2" y="638.0"></text>
</g>
<g>
<title>__fdget (3 samples, 0.04%)</title><rect x="472.9" y="611.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="475.9" y="622.0"></text>
</g>
<g>
<title>__get_user_4 (14 samples, 0.20%)</title><rect x="473.4" y="611.0" width="2.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="476.4" y="622.0"></text>
</g>
<g>
<title>apparmor_socket_setsockopt (4 samples, 0.06%)</title><rect x="475.7" y="611.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="478.7" y="622.0"></text>
</g>
<g>
<title>security_socket_setsockopt (18 samples, 0.25%)</title><rect x="476.5" y="611.0" width="3.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="479.5" y="622.0"></text>
</g>
<g>
<title>aa_sock_opt_perm (4 samples, 0.06%)</title><rect x="477.0" y="595.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="480.0" y="606.0"></text>
</g>
<g>
<title>apparmor_socket_setsockopt (11 samples, 0.15%)</title><rect x="477.6" y="595.0" width="1.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="480.6" y="606.0"></text>
</g>
<g>
<title>aa_sock_opt_perm (10 samples, 0.14%)</title><rect x="477.8" y="579.0" width="1.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="480.8" y="590.0"></text>
</g>
<g>
<title>aa_sk_perm (6 samples, 0.08%)</title><rect x="478.5" y="563.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="481.5" y="574.0"></text>
</g>
<g>
<title>sock_set_timeout (4 samples, 0.06%)</title><rect x="479.5" y="611.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="482.5" y="622.0"></text>
</g>
<g>
<title>sock_setsockopt (46 samples, 0.64%)</title><rect x="480.1" y="611.0" width="7.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="483.1" y="622.0"></text>
</g>
<g>
<title>_copy_from_user (5 samples, 0.07%)</title><rect x="481.8" y="595.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="484.8" y="606.0"></text>
</g>
<g>
<title>lock_sock_nested (7 samples, 0.10%)</title><rect x="482.9" y="595.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="485.9" y="606.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (3 samples, 0.04%)</title><rect x="483.1" y="579.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="486.1" y="590.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.03%)</title><rect x="483.6" y="579.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="486.6" y="590.0"></text>
</g>
<g>
<title>release_sock (10 samples, 0.14%)</title><rect x="484.1" y="595.0" width="1.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="487.1" y="606.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (2 samples, 0.03%)</title><rect x="485.2" y="579.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="488.2" y="590.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.03%)</title><rect x="485.2" y="563.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="488.2" y="574.0"></text>
</g>
<g>
<title>sock_set_timeout (10 samples, 0.14%)</title><rect x="485.7" y="595.0" width="1.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="488.7" y="606.0"></text>
</g>
<g>
<title>_copy_from_user (2 samples, 0.03%)</title><rect x="486.2" y="579.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="489.2" y="590.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (3 samples, 0.04%)</title><rect x="486.6" y="579.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="489.6" y="590.0"></text>
</g>
<g>
<title>copy_user_generic_unrolled (2 samples, 0.03%)</title><rect x="487.0" y="579.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="490.0" y="590.0"></text>
</g>
<g>
<title>tcp_release_cb (2 samples, 0.03%)</title><rect x="487.4" y="595.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="490.4" y="606.0"></text>
</g>
<g>
<title>sockfd_lookup_light (27 samples, 0.38%)</title><rect x="487.7" y="611.0" width="4.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="490.7" y="622.0"></text>
</g>
<g>
<title>__fdget (26 samples, 0.36%)</title><rect x="487.7" y="595.0" width="4.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="490.7" y="606.0"></text>
</g>
<g>
<title>__fget (4 samples, 0.06%)</title><rect x="487.7" y="579.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="490.7" y="590.0"></text>
</g>
<g>
<title>__fget_light (22 samples, 0.31%)</title><rect x="488.4" y="579.0" width="3.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="491.4" y="590.0"></text>
</g>
<g>
<title>__fget (15 samples, 0.21%)</title><rect x="489.5" y="563.0" width="2.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="492.5" y="574.0"></text>
</g>
<g>
<title>sockfd_lookup_light (2 samples, 0.03%)</title><rect x="492.3" y="627.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="495.3" y="638.0"></text>
</g>
<g>
<title>apic_timer_interrupt (2 samples, 0.03%)</title><rect x="492.7" y="643.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="495.7" y="654.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (2 samples, 0.03%)</title><rect x="492.7" y="627.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="495.7" y="638.0"></text>
</g>
<g>
<title>irq_exit (2 samples, 0.03%)</title><rect x="492.7" y="611.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="495.7" y="622.0"></text>
</g>
<g>
<title>__softirqentry_text_start (2 samples, 0.03%)</title><rect x="492.7" y="595.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="495.7" y="606.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (903 samples, 12.62%)</title><rect x="493.1" y="707.0" width="148.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="496.1" y="718.0">one/nio/net/NativeS..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (48 samples, 0.67%)</title><rect x="501.7" y="691.0" width="7.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="504.7" y="702.0"></text>
</g>
<g>
<title>__memmove_ssse3 (11 samples, 0.15%)</title><rect x="505.5" y="675.0" width="1.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="508.5" y="686.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (12 samples, 0.17%)</title><rect x="507.3" y="675.0" width="2.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="510.3" y="686.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.04%)</title><rect x="507.8" y="659.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="510.8" y="670.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="508.3" y="659.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="511.3" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (4 samples, 0.06%)</title><rect x="508.6" y="659.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="511.6" y="670.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.03%)</title><rect x="509.3" y="675.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="512.3" y="686.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (2 samples, 0.03%)</title><rect x="509.6" y="691.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="512.6" y="702.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (2 samples, 0.03%)</title><rect x="510.0" y="691.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="513.0" y="702.0"></text>
</g>
<g>
<title>__libc_send (799 samples, 11.17%)</title><rect x="510.3" y="691.0" width="131.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="513.3" y="702.0">__libc_send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (790 samples, 11.04%)</title><rect x="511.8" y="675.0" width="130.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="514.8" y="686.0">entry_SYSCALL_64..</text>
</g>
<g>
<title>do_syscall_64 (789 samples, 11.03%)</title><rect x="511.9" y="659.0" width="130.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="514.9" y="670.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (746 samples, 10.42%)</title><rect x="517.9" y="643.0" width="123.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="520.9" y="654.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (740 samples, 10.34%)</title><rect x="518.0" y="627.0" width="122.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="521.0" y="638.0">__sys_sendto</text>
</g>
<g>
<title>inet_sendmsg (3 samples, 0.04%)</title><rect x="518.9" y="611.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="521.9" y="622.0"></text>
</g>
<g>
<title>sock_sendmsg (726 samples, 10.15%)</title><rect x="519.4" y="611.0" width="119.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="522.4" y="622.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (2 samples, 0.03%)</title><rect x="520.0" y="595.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="523.0" y="606.0"></text>
</g>
<g>
<title>inet_sendmsg (709 samples, 9.91%)</title><rect x="520.4" y="595.0" width="116.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="523.4" y="606.0">inet_sendmsg</text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.03%)</title><rect x="520.5" y="579.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="523.5" y="590.0"></text>
</g>
<g>
<title>tcp_sendmsg (705 samples, 9.85%)</title><rect x="520.8" y="579.0" width="116.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="523.8" y="590.0">tcp_sendmsg</text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.03%)</title><rect x="521.2" y="563.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="524.2" y="574.0"></text>
</g>
<g>
<title>release_sock (3 samples, 0.04%)</title><rect x="521.5" y="563.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="524.5" y="574.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (2 samples, 0.03%)</title><rect x="521.7" y="547.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="524.7" y="558.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.03%)</title><rect x="521.7" y="531.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="524.7" y="542.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (2 samples, 0.03%)</title><rect x="522.0" y="563.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="525.0" y="574.0"></text>
</g>
<g>
<title>skb_put (2 samples, 0.03%)</title><rect x="522.3" y="563.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="525.3" y="574.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (691 samples, 9.66%)</title><rect x="522.8" y="563.0" width="114.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="525.8" y="574.0">tcp_sendmsg_lo..</text>
</g>
<g>
<title>__check_object_size (8 samples, 0.11%)</title><rect x="525.6" y="547.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="528.6" y="558.0"></text>
</g>
<g>
<title>__virt_addr_valid (6 samples, 0.08%)</title><rect x="526.0" y="531.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="529.0" y="542.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (2 samples, 0.03%)</title><rect x="527.0" y="547.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="530.0" y="558.0"></text>
</g>
<g>
<title>__virt_addr_valid (4 samples, 0.06%)</title><rect x="527.3" y="547.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="530.3" y="558.0"></text>
</g>
<g>
<title>_copy_from_iter_full (7 samples, 0.10%)</title><rect x="527.9" y="547.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="530.9" y="558.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (5 samples, 0.07%)</title><rect x="528.1" y="531.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="531.1" y="542.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (39 samples, 0.54%)</title><rect x="529.4" y="547.0" width="6.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="532.4" y="558.0"></text>
</g>
<g>
<title>__alloc_skb (34 samples, 0.48%)</title><rect x="529.6" y="531.0" width="5.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="532.6" y="542.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.54 (20 samples, 0.28%)</title><rect x="530.1" y="515.0" width="3.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="533.1" y="526.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (15 samples, 0.21%)</title><rect x="530.1" y="499.0" width="2.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="533.1" y="510.0"></text>
</g>
<g>
<title>__slab_alloc (3 samples, 0.04%)</title><rect x="531.4" y="483.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="534.4" y="494.0"></text>
</g>
<g>
<title>kmalloc_slab (3 samples, 0.04%)</title><rect x="532.1" y="483.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="535.1" y="494.0"></text>
</g>
<g>
<title>kmalloc_slab (3 samples, 0.04%)</title><rect x="532.7" y="499.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="535.7" y="510.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (8 samples, 0.11%)</title><rect x="533.4" y="515.0" width="1.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="536.4" y="526.0"></text>
</g>
<g>
<title>__slab_alloc (3 samples, 0.04%)</title><rect x="534.2" y="499.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="537.2" y="510.0"></text>
</g>
<g>
<title>should_failslab (3 samples, 0.04%)</title><rect x="534.7" y="515.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="537.7" y="526.0"></text>
</g>
<g>
<title>ksize (3 samples, 0.04%)</title><rect x="535.4" y="531.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="538.4" y="542.0"></text>
</g>
<g>
<title>skb_entail (6 samples, 0.08%)</title><rect x="535.9" y="547.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="538.9" y="558.0"></text>
</g>
<g>
<title>skb_put (2 samples, 0.03%)</title><rect x="536.8" y="547.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="539.8" y="558.0"></text>
</g>
<g>
<title>tcp_push (588 samples, 8.22%)</title><rect x="537.2" y="547.0" width="96.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="540.2" y="558.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (583 samples, 8.15%)</title><rect x="537.8" y="531.0" width="96.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="540.8" y="542.0">__tcp_push_..</text>
</g>
<g>
<title>tcp_write_xmit (579 samples, 8.09%)</title><rect x="538.5" y="515.0" width="95.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="541.5" y="526.0">tcp_write_x..</text>
</g>
<g>
<title>__tcp_select_window (2 samples, 0.03%)</title><rect x="540.8" y="499.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="543.8" y="510.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (533 samples, 7.45%)</title><rect x="541.1" y="499.0" width="87.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="544.1" y="510.0">__tcp_tran..</text>
</g>
<g>
<title>__skb_clone (2 samples, 0.03%)</title><rect x="543.3" y="483.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="546.3" y="494.0"></text>
</g>
<g>
<title>ip_queue_xmit (505 samples, 7.06%)</title><rect x="543.8" y="483.0" width="83.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="546.8" y="494.0">ip_queue_..</text>
</g>
<g>
<title>__ip_queue_xmit (502 samples, 7.02%)</title><rect x="543.8" y="467.0" width="82.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="546.8" y="478.0">__ip_queu..</text>
</g>
<g>
<title>ip_local_out (496 samples, 6.93%)</title><rect x="544.4" y="451.0" width="81.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="547.4" y="462.0">ip_local_..</text>
</g>
<g>
<title>__ip_local_out (5 samples, 0.07%)</title><rect x="544.4" y="435.0" width="0.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="547.4" y="446.0"></text>
</g>
<g>
<title>ip_output (489 samples, 6.83%)</title><rect x="545.3" y="435.0" width="80.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="548.3" y="446.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (482 samples, 6.74%)</title><rect x="545.9" y="419.0" width="79.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="548.9" y="430.0">ip_finish..</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (4 samples, 0.06%)</title><rect x="547.6" y="403.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="550.6" y="414.0"></text>
</g>
<g>
<title>ip_finish_output2 (466 samples, 6.51%)</title><rect x="548.4" y="403.0" width="76.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="551.4" y="414.0">ip_finis..</text>
</g>
<g>
<title>__local_bh_enable_ip (413 samples, 5.77%)</title><rect x="549.5" y="387.0" width="68.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="552.5" y="398.0">__local..</text>
</g>
<g>
<title>do_softirq.part.21 (412 samples, 5.76%)</title><rect x="549.7" y="371.0" width="67.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="552.7" y="382.0">do_soft..</text>
</g>
<g>
<title>do_softirq_own_stack (407 samples, 5.69%)</title><rect x="550.5" y="355.0" width="67.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="553.5" y="366.0">do_soft..</text>
</g>
<g>
<title>__softirqentry_text_start (407 samples, 5.69%)</title><rect x="550.5" y="339.0" width="67.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="553.5" y="350.0">__softi..</text>
</g>
<g>
<title>__kfree_skb_flush (2 samples, 0.03%)</title><rect x="551.5" y="323.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="554.5" y="334.0"></text>
</g>
<g>
<title>net_rx_action (398 samples, 5.56%)</title><rect x="552.0" y="323.0" width="65.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="555.0" y="334.0">net_rx_..</text>
</g>
<g>
<title>process_backlog (385 samples, 5.38%)</title><rect x="554.2" y="307.0" width="63.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="557.2" y="318.0">process..</text>
</g>
<g>
<title>__netif_receive_skb (375 samples, 5.24%)</title><rect x="555.5" y="291.0" width="61.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="558.5" y="302.0">__neti..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (371 samples, 5.18%)</title><rect x="556.1" y="275.0" width="61.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="559.1" y="286.0">__neti..</text>
</g>
<g>
<title>__netif_receive_skb_core (13 samples, 0.18%)</title><rect x="556.5" y="259.0" width="2.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="559.5" y="270.0"></text>
</g>
<g>
<title>ip_rcv (353 samples, 4.93%)</title><rect x="558.6" y="259.0" width="58.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="561.6" y="270.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_core.isra.21 (6 samples, 0.08%)</title><rect x="559.4" y="243.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="562.4" y="254.0"></text>
</g>
<g>
<title>ip_rcv_finish (342 samples, 4.78%)</title><rect x="560.4" y="243.0" width="56.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="563.4" y="254.0">ip_rcv..</text>
</g>
<g>
<title>ip_local_deliver (340 samples, 4.75%)</title><rect x="560.4" y="227.0" width="56.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="563.4" y="238.0">ip_loc..</text>
</g>
<g>
<title>ip_local_deliver_finish (339 samples, 4.74%)</title><rect x="560.6" y="211.0" width="55.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="563.6" y="222.0">ip_lo..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (339 samples, 4.74%)</title><rect x="560.6" y="195.0" width="55.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="563.6" y="206.0">ip_pr..</text>
</g>
<g>
<title>sk_filter_trim_cap (2 samples, 0.03%)</title><rect x="561.1" y="179.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="564.1" y="190.0"></text>
</g>
<g>
<title>tcp_v4_rcv (332 samples, 4.64%)</title><rect x="561.7" y="179.0" width="54.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="564.7" y="190.0">tcp_v..</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (2 samples, 0.03%)</title><rect x="562.2" y="163.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="565.2" y="174.0"></text>
</g>
<g>
<title>__inet_lookup_established (7 samples, 0.10%)</title><rect x="562.6" y="163.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="565.6" y="174.0"></text>
</g>
<g>
<title>inet_ehashfn (2 samples, 0.03%)</title><rect x="563.4" y="147.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="566.4" y="158.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (7 samples, 0.10%)</title><rect x="564.2" y="163.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="567.2" y="174.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (2 samples, 0.03%)</title><rect x="564.7" y="147.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="567.7" y="158.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (2 samples, 0.03%)</title><rect x="565.0" y="147.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="568.0" y="158.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (304 samples, 4.25%)</title><rect x="565.5" y="163.0" width="50.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="568.5" y="174.0">tcp_v..</text>
</g>
<g>
<title>tcp_rcv_established (300 samples, 4.19%)</title><rect x="566.2" y="147.0" width="49.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="569.2" y="158.0">tcp_r..</text>
</g>
<g>
<title>__tcp_ack_snd_check (8 samples, 0.11%)</title><rect x="567.2" y="131.0" width="1.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="570.2" y="142.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (4 samples, 0.06%)</title><rect x="567.8" y="115.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="570.8" y="126.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (3 samples, 0.04%)</title><rect x="568.5" y="131.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="571.5" y="142.0"></text>
</g>
<g>
<title>ktime_get_seconds (3 samples, 0.04%)</title><rect x="569.0" y="131.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="572.0" y="142.0"></text>
</g>
<g>
<title>tcp_ack (70 samples, 0.98%)</title><rect x="569.5" y="131.0" width="11.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="572.5" y="142.0"></text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.03%)</title><rect x="572.1" y="115.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="575.1" y="126.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (2 samples, 0.03%)</title><rect x="572.5" y="115.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="575.5" y="126.0"></text>
</g>
<g>
<title>rb_next (2 samples, 0.03%)</title><rect x="572.8" y="115.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="575.8" y="126.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (38 samples, 0.53%)</title><rect x="573.5" y="115.0" width="6.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="576.5" y="126.0"></text>
</g>
<g>
<title>__kfree_skb (16 samples, 0.22%)</title><rect x="575.3" y="99.0" width="2.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="578.3" y="110.0"></text>
</g>
<g>
<title>kfree_skbmem (8 samples, 0.11%)</title><rect x="575.4" y="83.0" width="1.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="578.4" y="94.0"></text>
</g>
<g>
<title>kmem_cache_free (5 samples, 0.07%)</title><rect x="575.9" y="67.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="578.9" y="78.0"></text>
</g>
<g>
<title>skb_release_all (6 samples, 0.08%)</title><rect x="576.7" y="83.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="579.7" y="94.0"></text>
</g>
<g>
<title>skb_release_data (4 samples, 0.06%)</title><rect x="576.7" y="67.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="579.7" y="78.0"></text>
</g>
<g>
<title>skb_free_head (2 samples, 0.03%)</title><rect x="577.1" y="51.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="580.1" y="62.0"></text>
</g>
<g>
<title>kfree (2 samples, 0.03%)</title><rect x="577.1" y="35.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="580.1" y="46.0"></text>
</g>
<g>
<title>skb_release_head_state (2 samples, 0.03%)</title><rect x="577.4" y="67.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="580.4" y="78.0"></text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.03%)</title><rect x="577.9" y="99.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="580.9" y="110.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.47 (3 samples, 0.04%)</title><rect x="578.6" y="99.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="581.6" y="110.0"></text>
</g>
<g>
<title>tcp_chrono_stop (2 samples, 0.03%)</title><rect x="579.1" y="99.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="582.1" y="110.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (2 samples, 0.03%)</title><rect x="579.4" y="99.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="582.4" y="110.0"></text>
</g>
<g>
<title>tcp_newly_delivered (2 samples, 0.03%)</title><rect x="579.7" y="115.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="582.7" y="126.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (3 samples, 0.04%)</title><rect x="580.5" y="115.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="583.5" y="126.0"></text>
</g>
<g>
<title>tcp_check_space (4 samples, 0.06%)</title><rect x="581.0" y="131.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="584.0" y="142.0"></text>
</g>
<g>
<title>tcp_data_queue (194 samples, 2.71%)</title><rect x="581.7" y="131.0" width="32.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="584.7" y="142.0">tc..</text>
</g>
<g>
<title>dst_release (2 samples, 0.03%)</title><rect x="582.9" y="115.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="585.9" y="126.0"></text>
</g>
<g>
<title>sock_def_readable (182 samples, 2.54%)</title><rect x="583.2" y="115.0" width="30.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="586.2" y="126.0">so..</text>
</g>
<g>
<title>__wake_up_sync_key (178 samples, 2.49%)</title><rect x="583.8" y="99.0" width="29.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="586.8" y="110.0">__..</text>
</g>
<g>
<title>__wake_up_common_lock (177 samples, 2.47%)</title><rect x="584.0" y="83.0" width="29.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="587.0" y="94.0">__..</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (174 samples, 2.43%)</title><rect x="584.5" y="67.0" width="28.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="587.5" y="78.0">_r..</text>
</g>
<g>
<title>tcp_queue_rcv (2 samples, 0.03%)</title><rect x="613.4" y="115.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="616.4" y="126.0"></text>
</g>
<g>
<title>tcp_queue_rcv (2 samples, 0.03%)</title><rect x="614.0" y="131.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="617.0" y="142.0"></text>
</g>
<g>
<title>tcp_rearm_rto (3 samples, 0.04%)</title><rect x="614.5" y="131.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="617.5" y="142.0"></text>
</g>
<g>
<title>tcp_urg (3 samples, 0.04%)</title><rect x="615.2" y="131.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="618.2" y="142.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (3 samples, 0.04%)</title><rect x="615.7" y="163.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="618.7" y="174.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (2 samples, 0.03%)</title><rect x="616.2" y="163.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="619.2" y="174.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.19 (2 samples, 0.03%)</title><rect x="616.5" y="227.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="619.5" y="238.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.21 (3 samples, 0.04%)</title><rect x="616.8" y="259.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="619.8" y="270.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (2 samples, 0.03%)</title><rect x="617.3" y="291.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="620.3" y="302.0"></text>
</g>
<g>
<title>dev_queue_xmit (45 samples, 0.63%)</title><rect x="617.6" y="387.0" width="7.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="620.6" y="398.0"></text>
</g>
<g>
<title>__dev_queue_xmit (44 samples, 0.61%)</title><rect x="617.6" y="371.0" width="7.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="620.6" y="382.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (19 samples, 0.27%)</title><rect x="619.5" y="355.0" width="3.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="622.5" y="366.0"></text>
</g>
<g>
<title>eth_type_trans (2 samples, 0.03%)</title><rect x="620.0" y="339.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="623.0" y="350.0"></text>
</g>
<g>
<title>loopback_xmit (11 samples, 0.15%)</title><rect x="620.3" y="339.0" width="1.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="623.3" y="350.0"></text>
</g>
<g>
<title>eth_type_trans (2 samples, 0.03%)</title><rect x="620.3" y="323.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="623.3" y="334.0"></text>
</g>
<g>
<title>netif_rx (7 samples, 0.10%)</title><rect x="620.6" y="323.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="623.6" y="334.0"></text>
</g>
<g>
<title>netif_rx_internal (7 samples, 0.10%)</title><rect x="620.6" y="307.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="623.6" y="318.0"></text>
</g>
<g>
<title>enqueue_to_backlog (7 samples, 0.10%)</title><rect x="620.6" y="291.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="623.6" y="302.0"></text>
</g>
<g>
<title>tcp_wfree (2 samples, 0.03%)</title><rect x="622.3" y="339.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="625.3" y="350.0"></text>
</g>
<g>
<title>loopback_xmit (2 samples, 0.03%)</title><rect x="622.6" y="355.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="625.6" y="366.0"></text>
</g>
<g>
<title>validate_xmit_skb (10 samples, 0.14%)</title><rect x="623.1" y="355.0" width="1.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="626.1" y="366.0"></text>
</g>
<g>
<title>netif_skb_features (2 samples, 0.03%)</title><rect x="623.9" y="339.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="626.9" y="350.0"></text>
</g>
<g>
<title>skb_network_protocol (2 samples, 0.03%)</title><rect x="624.4" y="339.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="627.4" y="350.0"></text>
</g>
<g>
<title>ipv4_mtu (3 samples, 0.04%)</title><rect x="625.4" y="419.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="628.4" y="430.0"></text>
</g>
<g>
<title>ip_send_check (2 samples, 0.03%)</title><rect x="625.9" y="435.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="628.9" y="446.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.03%)</title><rect x="626.2" y="451.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="629.2" y="462.0"></text>
</g>
<g>
<title>skb_clone (11 samples, 0.15%)</title><rect x="627.0" y="483.0" width="1.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="630.0" y="494.0"></text>
</g>
<g>
<title>__skb_clone (7 samples, 0.10%)</title><rect x="627.7" y="467.0" width="1.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="630.7" y="478.0"></text>
</g>
<g>
<title>__copy_skb_header (5 samples, 0.07%)</title><rect x="628.0" y="451.0" width="0.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="631.0" y="462.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (2 samples, 0.03%)</title><rect x="629.2" y="499.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="632.2" y="510.0"></text>
</g>
<g>
<title>ktime_get (5 samples, 0.07%)</title><rect x="629.7" y="499.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="632.7" y="510.0"></text>
</g>
<g>
<title>read_tsc (5 samples, 0.07%)</title><rect x="630.5" y="499.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="633.5" y="510.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (8 samples, 0.11%)</title><rect x="631.8" y="499.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="634.8" y="510.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (2 samples, 0.03%)</title><rect x="632.0" y="483.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="635.0" y="494.0"></text>
</g>
<g>
<title>tcp_rearm_rto (5 samples, 0.07%)</title><rect x="632.3" y="483.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="635.3" y="494.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.06%)</title><rect x="632.5" y="467.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="635.5" y="478.0"></text>
</g>
<g>
<title>mod_timer (4 samples, 0.06%)</title><rect x="632.5" y="451.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="635.5" y="462.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.03%)</title><rect x="632.8" y="435.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="635.8" y="446.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (3 samples, 0.04%)</title><rect x="633.5" y="499.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="636.5" y="510.0"></text>
</g>
<g>
<title>tcp_send_mss (15 samples, 0.21%)</title><rect x="634.1" y="547.0" width="2.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="637.1" y="558.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.03%)</title><rect x="634.5" y="531.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="637.5" y="542.0"></text>
</g>
<g>
<title>tcp_current_mss (11 samples, 0.15%)</title><rect x="634.8" y="531.0" width="1.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="637.8" y="542.0"></text>
</g>
<g>
<title>ipv4_mtu (3 samples, 0.04%)</title><rect x="635.8" y="515.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="638.8" y="526.0"></text>
</g>
<g>
<title>tcp_established_options (2 samples, 0.03%)</title><rect x="636.3" y="515.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="639.3" y="526.0"></text>
</g>
<g>
<title>security_socket_sendmsg (6 samples, 0.08%)</title><rect x="637.3" y="595.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="640.3" y="606.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (3 samples, 0.04%)</title><rect x="637.4" y="579.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="640.4" y="590.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (2 samples, 0.03%)</title><rect x="637.9" y="579.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="640.9" y="590.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (2 samples, 0.03%)</title><rect x="637.9" y="563.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="640.9" y="574.0"></text>
</g>
<g>
<title>aa_sk_perm (2 samples, 0.03%)</title><rect x="637.9" y="547.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="640.9" y="558.0"></text>
</g>
<g>
<title>tcp_sendmsg (5 samples, 0.07%)</title><rect x="638.3" y="595.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="641.3" y="606.0"></text>
</g>
<g>
<title>sockfd_lookup_light (6 samples, 0.08%)</title><rect x="639.1" y="611.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="642.1" y="622.0"></text>
</g>
<g>
<title>__fdget (3 samples, 0.04%)</title><rect x="639.1" y="595.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="642.1" y="606.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.03%)</title><rect x="639.2" y="579.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="642.2" y="590.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.04%)</title><rect x="639.6" y="595.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="642.6" y="606.0"></text>
</g>
<g>
<title>import_single_range (3 samples, 0.04%)</title><rect x="640.1" y="627.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="643.1" y="638.0"></text>
</g>
<g>
<title>sockfd_lookup_light (2 samples, 0.03%)</title><rect x="640.6" y="627.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="643.6" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (7 samples, 0.10%)</title><rect x="640.9" y="643.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="643.9" y="654.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.04%)</title><rect x="641.6" y="627.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="644.6" y="638.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.04%)</title><rect x="641.6" y="611.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="644.6" y="622.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (2 samples, 0.03%)</title><rect x="642.0" y="707.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="645.0" y="718.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (2 samples, 0.03%)</title><rect x="642.4" y="707.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="645.4" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Response.getStatus (19 samples, 0.27%)</title><rect x="642.7" y="755.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="645.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.charAt (17 samples, 0.24%)</title><rect x="642.7" y="739.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="645.7" y="750.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.03%)</title><rect x="643.7" y="723.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="646.7" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (6 samples, 0.08%)</title><rect x="644.0" y="723.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="647.0" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="645.0" y="723.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="648.0" y="734.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="645.5" y="739.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="648.5" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/ModularTopology.isThisNode (2 samples, 0.03%)</title><rect x="645.8" y="755.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="648.8" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/ModularTopology.isThisNode (2 samples, 0.03%)</title><rect x="645.8" y="739.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="648.8" y="750.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.03%)</title><rect x="645.8" y="723.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="648.8" y="734.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.03%)</title><rect x="645.8" y="707.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="648.8" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/ModularTopology.replicasFor (19 samples, 0.27%)</title><rect x="646.2" y="755.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="649.2" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (8 samples, 0.11%)</title><rect x="647.8" y="739.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="650.8" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/RepliServiceUtils.issueExternalResponse (37 samples, 0.52%)</title><rect x="649.3" y="755.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="652.3" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/RepliServiceUtils.syncReplicaValues (19 samples, 0.27%)</title><rect x="650.1" y="739.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="653.1" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.max (18 samples, 0.25%)</title><rect x="650.3" y="723.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="653.3" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.reduce (18 samples, 0.25%)</title><rect x="650.3" y="707.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="653.3" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (18 samples, 0.25%)</title><rect x="650.3" y="691.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="653.3" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (18 samples, 0.25%)</title><rect x="650.3" y="675.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="653.3" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (18 samples, 0.25%)</title><rect x="650.3" y="659.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="653.3" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (12 samples, 0.17%)</title><rect x="650.3" y="643.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="653.3" y="654.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.forEachRemaining (7 samples, 0.10%)</title><rect x="650.3" y="627.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="653.3" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (7 samples, 0.10%)</title><rect x="650.3" y="611.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="653.3" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2ReducingSink.accept (2 samples, 0.03%)</title><rect x="650.3" y="595.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="653.3" y="606.0"></text>
</g>
<g>
<title>java/util/function/BinaryOperator$$Lambda$75/1862903787.apply (2 samples, 0.03%)</title><rect x="650.3" y="579.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="653.3" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/RepliServiceUtils$$Lambda$71/1320102493.test (5 samples, 0.07%)</title><rect x="650.6" y="595.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="653.6" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/RepliServiceUtils.lambda$syncReplicaValues$0 (5 samples, 0.07%)</title><rect x="650.6" y="579.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="653.6" y="590.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (5 samples, 0.07%)</title><rect x="651.4" y="627.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="654.4" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (6 samples, 0.08%)</title><rect x="652.3" y="643.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="655.3" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/Value.getBytes (2 samples, 0.03%)</title><rect x="653.3" y="739.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="656.3" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/Value.getBytesFromValue (11 samples, 0.15%)</title><rect x="653.6" y="739.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="656.6" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (7 samples, 0.10%)</title><rect x="653.6" y="723.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="656.6" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.08%)</title><rect x="653.8" y="707.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="656.8" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="653.9" y="691.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="656.9" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="653.9" y="675.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="656.9" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="653.9" y="659.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="656.9" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="653.9" y="643.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="656.9" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/RepliServiceUtils.syncReplicaValues (3 samples, 0.04%)</title><rect x="654.3" y="691.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="657.3" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (4 samples, 0.06%)</title><rect x="654.7" y="723.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="657.7" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="654.7" y="707.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="657.7" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="654.7" y="691.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="657.7" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="655.1" y="675.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="658.1" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="655.1" y="659.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="658.1" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="655.1" y="643.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="658.1" y="654.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.03%)</title><rect x="655.1" y="627.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="658.1" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/RepliServiceUtils.issueInternalResponse (1,688 samples, 23.59%)</title><rect x="655.4" y="755.0" width="278.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="658.4" y="766.0">ru/mail/polis/service/codearound/Repl..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="655.4" y="739.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="658.4" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (10 samples, 0.14%)</title><rect x="655.9" y="739.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="658.9" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/TaskDAO.getValue (1,667 samples, 23.30%)</title><rect x="657.5" y="739.0" width="274.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="660.5" y="750.0">ru/mail/polis/service/codearound/Task..</text>
</g>
<g>
<title>ru/mail/polis/service/codearound/TaskDAO.getValueFromBytes (1,646 samples, 23.00%)</title><rect x="657.5" y="723.0" width="271.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="660.5" y="734.0">ru/mail/polis/service/codearound/Tas..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,633 samples, 22.82%)</title><rect x="657.5" y="707.0" width="269.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="660.5" y="718.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,633 samples, 22.82%)</title><rect x="657.5" y="691.0" width="269.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="660.5" y="702.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (1,542 samples, 21.55%)</title><rect x="659.2" y="675.0" width="254.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="662.2" y="686.0">Java_org_rocksdb_RocksDB_get__J_3BII</text>
</g>
<g>
<title>/tmp/librocksdbjni15646463843615173279.so (7 samples, 0.10%)</title><rect x="660.4" y="659.0" width="1.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="663.4" y="670.0"></text>
</g>
<g>
<title>__libc_free (2 samples, 0.03%)</title><rect x="661.5" y="659.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="664.5" y="670.0"></text>
</g>
<g>
<title>__malloc (6 samples, 0.08%)</title><rect x="661.8" y="659.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="664.8" y="670.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.08%)</title><rect x="663.2" y="659.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="666.2" y="670.0"></text>
</g>
<g>
<title>operator delete(void*) (2 samples, 0.03%)</title><rect x="664.3" y="659.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="667.3" y="670.0"></text>
</g>
<g>
<title>operator delete[](void*) (2 samples, 0.03%)</title><rect x="664.6" y="659.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="667.6" y="670.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="665.0" y="659.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="668.0" y="670.0"></text>
</g>
<g>
<title>operator new(unsigned long) [clone .plt] (4 samples, 0.06%)</title><rect x="665.3" y="659.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="668.3" y="670.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (2 samples, 0.03%)</title><rect x="666.0" y="659.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="669.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (5 samples, 0.07%)</title><rect x="666.3" y="659.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="669.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) (3 samples, 0.04%)</title><rect x="667.1" y="659.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="670.1" y="670.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1,485 samples, 20.75%)</title><rect x="667.9" y="659.0" width="244.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="670.9" y="670.0">rocksdb_get_helper(JNIEnv_*, roc..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (4 samples, 0.06%)</title><rect x="668.6" y="643.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="671.6" y="654.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.04%)</title><rect x="669.4" y="643.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="672.4" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.03%)</title><rect x="670.1" y="643.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="673.1" y="654.0"></text>
</g>
<g>
<title>__memmove_ssse3 (6 samples, 0.08%)</title><rect x="670.4" y="643.0" width="1.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="673.4" y="654.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (6 samples, 0.08%)</title><rect x="671.4" y="643.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="674.4" y="654.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="671.9" y="627.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="674.9" y="638.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (19 samples, 0.27%)</title><rect x="672.4" y="643.0" width="3.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="675.4" y="654.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.06%)</title><rect x="673.2" y="627.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="676.2" y="638.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (4 samples, 0.06%)</title><rect x="673.9" y="627.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="676.9" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.04%)</title><rect x="674.5" y="627.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="677.5" y="638.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.04%)</title><rect x="675.0" y="627.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="678.0" y="638.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.04%)</title><rect x="675.0" y="611.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="678.0" y="622.0"></text>
</g>
<g>
<title>jni_NewByteArray (4 samples, 0.06%)</title><rect x="675.5" y="643.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="678.5" y="654.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 0.06%)</title><rect x="676.2" y="643.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="679.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (2 samples, 0.03%)</title><rect x="676.8" y="643.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="679.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (1,327 samples, 18.54%)</title><rect x="677.2" y="643.0" width="218.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="680.2" y="654.0">rocksdb::DB::Get(rocksdb::Rea..</text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (4 samples, 0.06%)</title><rect x="677.5" y="627.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="680.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (1,311 samples, 18.32%)</title><rect x="678.3" y="627.0" width="216.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="681.3" y="638.0">rocksdb::DB::Get(rocksdb::Re..</text>
</g>
<g>
<title>rocksdb::CachableEntry&lt;rocksdb::Block&gt;::ReleaseCacheHandle(void*, void*) (2 samples, 0.03%)</title><rect x="680.1" y="611.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="683.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (37 samples, 0.52%)</title><rect x="680.5" y="611.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="683.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::LRUCache::GetHash(rocksdb::Cache::Handle*) const (8 samples, 0.11%)</title><rect x="680.6" y="595.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="683.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::LRU_Insert(rocksdb::LRUHandle*) (3 samples, 0.04%)</title><rect x="682.1" y="595.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="685.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::LRU_Insert(rocksdb::LRUHandle*) [clone .plt] (3 samples, 0.04%)</title><rect x="682.6" y="595.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="685.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (17 samples, 0.24%)</title><rect x="683.1" y="595.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="686.1" y="606.0"></text>
</g>
<g>
<title>malloc_usable_size (2 samples, 0.03%)</title><rect x="683.6" y="579.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="686.6" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 0.07%)</title><rect x="683.9" y="579.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="686.9" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.03%)</title><rect x="684.8" y="579.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="687.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::LRU_Insert(rocksdb::LRUHandle*) (5 samples, 0.07%)</title><rect x="685.1" y="579.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="688.1" y="590.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Release(rocksdb::Cache::Handle*, bool) (2 samples, 0.03%)</title><rect x="685.9" y="595.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="688.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (1,251 samples, 17.48%)</title><rect x="686.6" y="611.0" width="206.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="689.6" y="622.0">rocksdb::DBImpl::Get(rocksd..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::string*) (1,246 samples, 17.41%)</title><rect x="686.9" y="595.0" width="205.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="689.9" y="606.0">rocksdb::DBImpl::Get(rocksd..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (8 samples, 0.11%)</title><rect x="688.1" y="579.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="691.1" y="590.0"></text>
</g>
<g>
<title>__tls_get_addr (8 samples, 0.11%)</title><rect x="689.4" y="579.0" width="1.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="692.4" y="590.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (5 samples, 0.07%)</title><rect x="690.7" y="579.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="693.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) [clone .plt] (4 samples, 0.06%)</title><rect x="691.5" y="579.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="694.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetComparator() const (4 samples, 0.06%)</title><rect x="692.2" y="579.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="695.2" y="590.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (4 samples, 0.06%)</title><rect x="692.8" y="579.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="695.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetAndRefSuperVersion(rocksdb::ColumnFamilyData*) (7 samples, 0.10%)</title><rect x="693.5" y="579.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="696.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (1,153 samples, 16.11%)</title><rect x="694.7" y="579.0" width="190.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="697.7" y="590.0">rocksdb::DBImpl::GetImpl(..</text>
</g>
<g>
<title>/tmp/librocksdbjni15646463843615173279.so (2 samples, 0.03%)</title><rect x="699.1" y="563.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="702.1" y="574.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (4 samples, 0.06%)</title><rect x="699.4" y="563.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="702.4" y="574.0"></text>
</g>
<g>
<title>__tls_get_addr (17 samples, 0.24%)</title><rect x="700.4" y="563.0" width="2.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="703.4" y="574.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (4 samples, 0.06%)</title><rect x="703.2" y="563.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="706.2" y="574.0"></text>
</g>
<g>
<title>memcpy@GLIBC_2.2.5 (3 samples, 0.04%)</title><rect x="703.9" y="563.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="706.9" y="574.0"></text>
</g>
<g>
<title>memcpy@plt (3 samples, 0.04%)</title><rect x="704.4" y="563.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="707.4" y="574.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (25 samples, 0.35%)</title><rect x="705.2" y="563.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="708.2" y="574.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (3 samples, 0.04%)</title><rect x="706.4" y="547.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="709.4" y="558.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (2 samples, 0.03%)</title><rect x="707.0" y="547.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="710.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() [clone .plt] (4 samples, 0.06%)</title><rect x="707.3" y="547.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="710.3" y="558.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (5 samples, 0.07%)</title><rect x="708.0" y="547.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="711.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (3 samples, 0.04%)</title><rect x="708.8" y="547.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="711.8" y="558.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (2 samples, 0.03%)</title><rect x="709.0" y="531.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="712.0" y="542.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (3 samples, 0.04%)</title><rect x="709.3" y="563.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="712.3" y="574.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (11 samples, 0.15%)</title><rect x="710.0" y="563.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="713.0" y="574.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (9 samples, 0.13%)</title><rect x="710.0" y="547.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="713.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (2 samples, 0.03%)</title><rect x="710.2" y="531.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="713.2" y="542.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (4 samples, 0.06%)</title><rect x="710.6" y="531.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="713.6" y="542.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (2 samples, 0.03%)</title><rect x="711.5" y="547.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="714.5" y="558.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (8 samples, 0.11%)</title><rect x="711.8" y="563.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="714.8" y="574.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) [clone .plt] (2 samples, 0.03%)</title><rect x="713.1" y="563.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="716.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::string*, bool*, rocksdb::MergeContext*, bool, unsigned long*, rocksdb::Env*, unsigned long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*, unsigned long) (2 samples, 0.03%)</title><rect x="713.4" y="563.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="716.4" y="574.0"></text>
</g>
<g>
<title>rocksdb::GetPerfLevel() [clone .plt] (2 samples, 0.03%)</title><rect x="713.8" y="563.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="716.8" y="574.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long, rocksdb::Slice const*) (3 samples, 0.04%)</title><rect x="714.1" y="563.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="717.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (133 samples, 1.86%)</title><rect x="714.6" y="563.0" width="21.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="717.6" y="574.0">r..</text>
</g>
<g>
<title>/tmp/librocksdbjni15646463843615173279.so (10 samples, 0.14%)</title><rect x="716.3" y="547.0" width="1.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="719.3" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long, bool, rocksdb::ReadCallback*, bool*, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*) (110 samples, 1.54%)</title><rect x="718.1" y="547.0" width="18.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="721.1" y="558.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni15646463843615173279.so (101 samples, 1.41%)</title><rect x="718.9" y="531.0" width="16.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="721.9" y="542.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni15646463843615173279.so (5 samples, 0.07%)</title><rect x="719.6" y="515.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="722.6" y="526.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (90 samples, 1.26%)</title><rect x="720.4" y="515.0" width="14.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="723.4" y="526.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni15646463843615173279.so (5 samples, 0.07%)</title><rect x="728.8" y="499.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="731.8" y="510.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="729.8" y="499.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="732.8" y="510.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (31 samples, 0.43%)</title><rect x="730.1" y="499.0" width="5.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="733.1" y="510.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni15646463843615173279.so (4 samples, 0.06%)</title><rect x="731.8" y="483.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="734.8" y="494.0"></text>
</g>
<g>
<title>__memcmp_sse4_1 (15 samples, 0.21%)</title><rect x="732.6" y="483.0" width="2.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="735.6" y="494.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.03%)</title><rect x="735.2" y="515.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="738.2" y="526.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (4 samples, 0.06%)</title><rect x="735.5" y="531.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="738.5" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long) (2 samples, 0.03%)</title><rect x="736.2" y="547.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="739.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long, bool, rocksdb::ReadCallback*, bool*, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*) (6 samples, 0.08%)</title><rect x="736.5" y="563.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="739.5" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long) (4 samples, 0.06%)</title><rect x="737.7" y="563.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="740.7" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.03%)</title><rect x="738.3" y="563.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="741.3" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::GetFromList(std::list&lt;rocksdb::MemTable*, std::allocator&lt;rocksdb::MemTable*&gt; &gt;*, rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.03%)</title><rect x="738.3" y="547.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="741.3" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::GetFromList(std::list&lt;rocksdb::MemTable*, std::allocator&lt;rocksdb::MemTable*&gt; &gt;*, rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (4 samples, 0.06%)</title><rect x="738.7" y="563.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="741.7" y="574.0"></text>
</g>
<g>
<title>rocksdb::MergeContext::~MergeContext() (5 samples, 0.07%)</title><rect x="739.5" y="563.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="742.5" y="574.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (4 samples, 0.06%)</title><rect x="740.3" y="563.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="743.3" y="574.0"></text>
</g>
<g>
<title>rocksdb::PinnedIteratorsManager::~PinnedIteratorsManager() (6 samples, 0.08%)</title><rect x="741.2" y="563.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="744.2" y="574.0"></text>
</g>
<g>
<title>rocksdb::StopWatchNano::StopWatchNano(rocksdb::Env*, bool) (4 samples, 0.06%)</title><rect x="742.3" y="563.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="745.3" y="574.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (6 samples, 0.08%)</title><rect x="743.0" y="563.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="746.0" y="574.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (3 samples, 0.04%)</title><rect x="744.0" y="563.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="747.0" y="574.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (4 samples, 0.06%)</title><rect x="744.4" y="563.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="747.4" y="574.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*, unsigned long*, rocksdb::ReadCallback*, bool*, bool) (840 samples, 11.74%)</title><rect x="745.1" y="563.0" width="138.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="748.1" y="574.0">rocksdb::Version:..</text>
</g>
<g>
<title>/tmp/librocksdbjni15646463843615173279.so (40 samples, 0.56%)</title><rect x="751.9" y="547.0" width="6.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="754.9" y="558.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni15646463843615173279.so (9 samples, 0.13%)</title><rect x="755.0" y="531.0" width="1.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="758.0" y="542.0"></text>
</g>
<g>
<title>__memcmp_sse4_1 (11 samples, 0.15%)</title><rect x="756.5" y="531.0" width="1.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="759.5" y="542.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="758.5" y="547.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="761.5" y="558.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (11 samples, 0.15%)</title><rect x="758.8" y="547.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="761.8" y="558.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;) (7 samples, 0.10%)</title><rect x="760.6" y="547.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="763.6" y="558.0"></text>
</g>
<g>
<title>rocksdb::FileIndexer::GetNextLevelIndex(unsigned long, unsigned long, int, int, int*, int*) const (13 samples, 0.18%)</title><rect x="761.8" y="547.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="764.8" y="558.0"></text>
</g>
<g>
<title>rocksdb::FileIndexer::GetNextLevelIndex(unsigned long, unsigned long, int, int, int*, int*) const [clone .plt] (3 samples, 0.04%)</title><rect x="763.9" y="547.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="766.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::string*, bool*, rocksdb::MergeContext*, bool, unsigned long*, rocksdb::Env*, unsigned long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*, unsigned long) (8 samples, 0.11%)</title><rect x="764.4" y="547.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="767.4" y="558.0"></text>
</g>
<g>
<title>rocksdb::PinnedIteratorsManager::~PinnedIteratorsManager() (3 samples, 0.04%)</title><rect x="765.7" y="547.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="768.7" y="558.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (4 samples, 0.06%)</title><rect x="766.2" y="547.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="769.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() [clone .plt] (3 samples, 0.04%)</title><rect x="766.9" y="547.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="769.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (705 samples, 9.85%)</title><rect x="767.4" y="547.0" width="116.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="770.4" y="558.0">rocksdb::Table..</text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (4 samples, 0.06%)</title><rect x="770.3" y="531.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="773.3" y="542.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::FullFilterKeyMayMatch(rocksdb::ReadOptions const&amp;, rocksdb::FilterBlockReader*, rocksdb::Slice const&amp;, bool, rocksdb::SliceTransform const*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) const (16 samples, 0.22%)</title><rect x="771.0" y="531.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="774.0" y="542.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::FullFilterKeyMayMatch(rocksdb::ReadOptions const&amp;, rocksdb::FilterBlockReader*, rocksdb::Slice const&amp;, bool, rocksdb::SliceTransform const*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) const [clone .plt] (4 samples, 0.06%)</title><rect x="773.6" y="531.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="776.6" y="542.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (610 samples, 8.52%)</title><rect x="774.3" y="531.0" width="100.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="777.3" y="542.0">rocksdb::Blo..</text>
</g>
<g>
<title>/tmp/librocksdbjni15646463843615173279.so (4 samples, 0.06%)</title><rect x="782.5" y="515.0" width="0.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="785.5" y="526.0"></text>
</g>
<g>
<title>__libc_free (9 samples, 0.13%)</title><rect x="783.2" y="515.0" width="1.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="786.2" y="526.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="784.7" y="515.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="787.7" y="526.0"></text>
</g>
<g>
<title>free@plt (2 samples, 0.03%)</title><rect x="785.0" y="515.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="788.0" y="526.0"></text>
</g>
<g>
<title>operator delete(void*) (2 samples, 0.03%)</title><rect x="785.3" y="515.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="788.3" y="526.0"></text>
</g>
<g>
<title>operator delete(void*) [clone .plt] (2 samples, 0.03%)</title><rect x="785.7" y="515.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="788.7" y="526.0"></text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (38 samples, 0.53%)</title><rect x="786.0" y="515.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="789.0" y="526.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.04%)</title><rect x="787.8" y="499.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="790.8" y="510.0"></text>
</g>
<g>
<title>operator new(unsigned long) [clone .plt] (3 samples, 0.04%)</title><rect x="788.3" y="499.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="791.3" y="510.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (13 samples, 0.18%)</title><rect x="788.8" y="499.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="791.8" y="510.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::IndexReaderCommon::GetOrReadIndexBlock(bool, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*) const (8 samples, 0.11%)</title><rect x="791.0" y="499.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="794.0" y="510.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (9 samples, 0.13%)</title><rect x="792.3" y="515.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="795.3" y="526.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::FullFilterKeyMayMatch(rocksdb::ReadOptions const&amp;, rocksdb::FilterBlockReader*, rocksdb::Slice const&amp;, bool, rocksdb::SliceTransform const*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) const (7 samples, 0.10%)</title><rect x="793.8" y="515.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="796.8" y="526.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::IndexReaderCommon::GetOrReadIndexBlock(bool, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*) const (4 samples, 0.06%)</title><rect x="794.9" y="515.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="797.9" y="526.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::IndexReaderCommon::GetOrReadIndexBlock(bool, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*) const [clone .plt] (5 samples, 0.07%)</title><rect x="795.6" y="515.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="798.6" y="526.0"></text>
</g>
<g>
<title>rocksdb::BlockCacheLookupContext::~BlockCacheLookupContext() (2 samples, 0.03%)</title><rect x="796.4" y="515.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="799.4" y="526.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::RegisterCleanup(void (*)(void*, void*), void*, void*) (4 samples, 0.06%)</title><rect x="797.1" y="515.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="800.1" y="526.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::RegisterCleanup(void (*)(void*, void*), void*, void*) [clone .plt] (2 samples, 0.03%)</title><rect x="797.7" y="515.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="800.7" y="526.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::InitBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::BlockBasedTable::Rep const*, rocksdb::Block*, rocksdb::BlockType, rocksdb::DataBlockIter*, bool) (6 samples, 0.08%)</title><rect x="798.2" y="515.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="801.2" y="526.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::InitBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::BlockBasedTable::Rep const*, rocksdb::Block*, rocksdb::BlockType, rocksdb::DataBlockIter*, bool) [clone .plt] (2 samples, 0.03%)</title><rect x="799.2" y="515.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="802.2" y="526.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::NewDataBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::DataBlockIter*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::Status, rocksdb::FilePrefetchBuffer*, bool) const (183 samples, 2.56%)</title><rect x="799.5" y="515.0" width="30.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="802.5" y="526.0">ro..</text>
</g>
<g>
<title>_ZNK7rocksdb15BlockBasedTable28MaybeReadBlockAndLoadToCacheINS_5BlockEEENS_6StatusEPNS_18FilePrefetchBufferERKNS_11ReadOptionsERKNS_11BlockHandleERKNS_17UncompressionDictEPNS_13CachableEntryIT_EENS_9BlockTypeEPNS_10GetContextEPNS_23BlockCacheLookupContext (2 samples, 0.03%)</title><rect x="802.2" y="499.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="805.2" y="510.0"></text>
</g>
<g>
<title>rocksdb::Block::NewDataIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long, rocksdb::DataBlockIter*, rocksdb::Statistics*, bool) (3 samples, 0.04%)</title><rect x="802.7" y="499.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="805.7" y="510.0"></text>
</g>
<g>
<title>rocksdb::Block::NewDataIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long, rocksdb::DataBlockIter*, rocksdb::Statistics*, bool) [clone .plt] (2 samples, 0.03%)</title><rect x="803.2" y="499.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="806.2" y="510.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::InitBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::BlockBasedTable::Rep const*, rocksdb::Block*, rocksdb::BlockType, rocksdb::DataBlockIter*, bool) (2 samples, 0.03%)</title><rect x="803.5" y="499.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="806.5" y="510.0"></text>
</g>
<g>
<title>rocksdb::Block::NewDataIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long, rocksdb::DataBlockIter*, rocksdb::Statistics*, bool) (2 samples, 0.03%)</title><rect x="803.5" y="483.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="806.5" y="494.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::MaybeReadBlockAndLoadToCache&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::BlockContents*) const (5 samples, 0.07%)</title><rect x="803.8" y="499.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="806.8" y="510.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (151 samples, 2.11%)</title><rect x="804.6" y="499.0" width="24.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="807.6" y="510.0">r..</text>
</g>
<g>
<title>rocksdb::BlockBasedTable::GetCacheKey(char const*, unsigned long, rocksdb::BlockHandle const&amp;, char*) (3 samples, 0.04%)</title><rect x="805.1" y="483.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="808.1" y="494.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::MaybeReadBlockAndLoadToCache&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::BlockContents*) const (137 samples, 1.91%)</title><rect x="806.0" y="483.0" width="22.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="809.0" y="494.0">r..</text>
</g>
<g>
<title>memcpy@plt (2 samples, 0.03%)</title><rect x="807.8" y="467.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="810.8" y="478.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::GetCacheKey(char const*, unsigned long, rocksdb::BlockHandle const&amp;, char*) (6 samples, 0.08%)</title><rect x="808.1" y="467.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="811.1" y="478.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::GetEntryFromCache(rocksdb::Cache*, rocksdb::Slice const&amp;, rocksdb::BlockType, rocksdb::GetContext*) const (3 samples, 0.04%)</title><rect x="809.1" y="467.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="812.1" y="478.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::ReadBlockContents() (4 samples, 0.06%)</title><rect x="809.6" y="467.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="812.6" y="478.0"></text>
</g>
<g>
<title>rocksdb::RandomAccessFileReader::Read(rocksdb::IOOptions const&amp;, unsigned long, unsigned long, rocksdb::Slice*, char*, std::unique_ptr&lt;char [], std::default_delete&lt;char []&gt; &gt;*, bool) const (3 samples, 0.04%)</title><rect x="809.7" y="451.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="812.7" y="462.0"></text>
</g>
<g>
<title>rocksdb::CachableEntry&lt;rocksdb::Block&gt;::ReleaseResource() (6 samples, 0.08%)</title><rect x="810.2" y="467.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="813.2" y="478.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::GetDataBlockFromCache&lt;rocksdb::Block&gt;(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::Cache*, rocksdb::Cache*, rocksdb::ReadOptions const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::UncompressionDict const&amp;, rocksdb::BlockType, rocksdb::GetContext*) const (101 samples, 1.41%)</title><rect x="811.6" y="467.0" width="16.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="814.6" y="478.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::GetEntryFromCache(rocksdb::Cache*, rocksdb::Slice const&amp;, rocksdb::BlockType, rocksdb::GetContext*) const (85 samples, 1.19%)</title><rect x="812.7" y="451.0" width="14.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="815.7" y="462.0"></text>
</g>
<g>
<title>ROCKSDB_XXH3p_64bits (7 samples, 0.10%)</title><rect x="812.9" y="435.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="815.9" y="446.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (4 samples, 0.06%)</title><rect x="814.2" y="435.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="817.2" y="446.0"></text>
</g>
<g>
<title>rocksdb::Hash64(char const*, unsigned long) (3 samples, 0.04%)</title><rect x="814.9" y="435.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="817.9" y="446.0"></text>
</g>
<g>
<title>rocksdb::LRUCache::GetShard(int) (5 samples, 0.07%)</title><rect x="815.4" y="435.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="818.4" y="446.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (53 samples, 0.74%)</title><rect x="816.2" y="435.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="819.2" y="446.0"></text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 0.03%)</title><rect x="816.8" y="419.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="819.8" y="430.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="816.8" y="403.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="819.8" y="414.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.03%)</title><rect x="816.8" y="387.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="819.8" y="398.0"></text>
</g>
<g>
<title>malloc_usable_size (7 samples, 0.10%)</title><rect x="817.2" y="419.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="820.2" y="430.0"></text>
</g>
<g>
<title>pthread_mutex_lock (19 samples, 0.27%)</title><rect x="818.3" y="419.0" width="3.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="821.3" y="430.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (4 samples, 0.06%)</title><rect x="821.6" y="419.0" width="0.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="824.6" y="430.0"></text>
</g>
<g>
<title>pthread_mutex_unlock@plt (2 samples, 0.03%)</title><rect x="822.3" y="419.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="825.3" y="430.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::LRU_Remove(rocksdb::LRUHandle*) (2 samples, 0.03%)</title><rect x="822.6" y="419.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="825.6" y="430.0"></text>
</g>
<g>
<title>rocksdb::LRUHandleTable::FindPointer(rocksdb::Slice const&amp;, unsigned int) (3 samples, 0.04%)</title><rect x="822.9" y="419.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="825.9" y="430.0"></text>
</g>
<g>
<title>rocksdb::LRUHandleTable::Lookup(rocksdb::Slice const&amp;, unsigned int) (9 samples, 0.13%)</title><rect x="823.4" y="419.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="826.4" y="430.0"></text>
</g>
<g>
<title>__memcmp_sse4_1 (2 samples, 0.03%)</title><rect x="823.6" y="403.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="826.6" y="414.0"></text>
</g>
<g>
<title>rocksdb::LRUHandleTable::FindPointer(rocksdb::Slice const&amp;, unsigned int) (6 samples, 0.08%)</title><rect x="823.9" y="403.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="826.9" y="414.0"></text>
</g>
<g>
<title>rocksdb::LRUHandleTable::Lookup(rocksdb::Slice const&amp;, unsigned int) (3 samples, 0.04%)</title><rect x="824.9" y="435.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="827.9" y="446.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (4 samples, 0.06%)</title><rect x="825.4" y="435.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="828.4" y="446.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (3 samples, 0.04%)</title><rect x="826.1" y="435.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="829.1" y="446.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::GetUsage(rocksdb::Cache::Handle*) const (2 samples, 0.03%)</title><rect x="827.1" y="451.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="830.1" y="462.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (5 samples, 0.07%)</title><rect x="827.4" y="451.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="830.4" y="462.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (6 samples, 0.08%)</title><rect x="828.5" y="483.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="831.5" y="494.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (109 samples, 1.52%)</title><rect x="829.7" y="515.0" width="18.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="832.7" y="526.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni15646463843615173279.so (3 samples, 0.04%)</title><rect x="832.8" y="499.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="835.8" y="510.0"></text>
</g>
<g>
<title>__tls_get_addr (8 samples, 0.11%)</title><rect x="833.3" y="499.0" width="1.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="836.3" y="510.0"></text>
</g>
<g>
<title>rocksdb::BlockIter&lt;rocksdb::Slice&gt;::FindKeyAfterBinarySeek(rocksdb::Slice const&amp;, unsigned int, bool, rocksdb::Comparator const*) (59 samples, 0.82%)</title><rect x="834.6" y="499.0" width="9.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="837.6" y="510.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni15646463843615173279.so (2 samples, 0.03%)</title><rect x="835.8" y="483.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="838.8" y="494.0"></text>
</g>
<g>
<title>__memmove_sse2_unaligned_erms (4 samples, 0.06%)</title><rect x="836.1" y="483.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="839.1" y="494.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.06%)</title><rect x="836.8" y="483.0" width="0.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="839.8" y="494.0"></text>
</g>
<g>
<title>memcpy@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="837.5" y="483.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="840.5" y="494.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (24 samples, 0.34%)</title><rect x="837.8" y="483.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="840.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::InternalKeyComparator::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (16 samples, 0.22%)</title><rect x="841.7" y="483.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="844.7" y="494.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni15646463843615173279.so (4 samples, 0.06%)</title><rect x="842.4" y="467.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="845.4" y="478.0"></text>
</g>
<g>
<title>__memcmp_sse4_1 (5 samples, 0.07%)</title><rect x="843.2" y="467.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="846.2" y="478.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (7 samples, 0.10%)</title><rect x="844.4" y="499.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="847.4" y="510.0"></text>
</g>
<g>
<title>rocksdb::InternalKeyComparator::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (13 samples, 0.18%)</title><rect x="845.5" y="499.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="848.5" y="510.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni15646463843615173279.so (2 samples, 0.03%)</title><rect x="846.5" y="483.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="849.5" y="494.0"></text>
</g>
<g>
<title>__memcmp_sse4_1 (3 samples, 0.04%)</title><rect x="847.0" y="483.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="850.0" y="494.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::~DataBlockIter() (4 samples, 0.06%)</title><rect x="847.7" y="515.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="850.7" y="526.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (9 samples, 0.13%)</title><rect x="848.3" y="515.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="851.3" y="526.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (132 samples, 1.84%)</title><rect x="849.8" y="515.0" width="21.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="852.8" y="526.0">r..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="862.2" y="499.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="865.2" y="510.0"></text>
</g>
<g>
<title>__memcmp_sse4_1 (10 samples, 0.14%)</title><rect x="862.5" y="499.0" width="1.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="865.5" y="510.0"></text>
</g>
<g>
<title>__tls_get_addr (7 samples, 0.10%)</title><rect x="864.2" y="499.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="867.2" y="510.0"></text>
</g>
<g>
<title>rocksdb::BlockHandle::DecodeFrom(rocksdb::Slice*) (2 samples, 0.03%)</title><rect x="865.3" y="499.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="868.3" y="510.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (19 samples, 0.27%)</title><rect x="865.8" y="499.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="868.8" y="510.0"></text>
</g>
<g>
<title>rocksdb::BlockHandle::DecodeFrom(rocksdb::Slice*) (8 samples, 0.11%)</title><rect x="866.6" y="483.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="869.6" y="494.0"></text>
</g>
<g>
<title>rocksdb::GetVarint64Ptr(char const*, char const*, unsigned long*) (5 samples, 0.07%)</title><rect x="868.0" y="483.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="871.0" y="494.0"></text>
</g>
<g>
<title>rocksdb::UserComparatorWrapper::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (16 samples, 0.22%)</title><rect x="868.9" y="499.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="871.9" y="510.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.06%)</title><rect x="870.8" y="483.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="873.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::~IndexBlockIter() (2 samples, 0.03%)</title><rect x="871.6" y="515.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="874.6" y="526.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (3 samples, 0.04%)</title><rect x="871.9" y="515.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="874.9" y="526.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (2 samples, 0.03%)</title><rect x="872.6" y="515.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="875.6" y="526.0"></text>
</g>
<g>
<title>rocksdb::UserComparatorWrapper::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (9 samples, 0.13%)</title><rect x="873.1" y="515.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="876.1" y="526.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="874.6" y="515.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="877.6" y="526.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="874.6" y="499.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="877.6" y="510.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="874.6" y="483.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="877.6" y="494.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewIndexIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) const (12 samples, 0.17%)</title><rect x="874.9" y="531.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="877.9" y="542.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;) (6 samples, 0.08%)</title><rect x="876.9" y="531.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="879.9" y="542.0"></text>
</g>
<g>
<title>rocksdb::BlockCacheLookupContext::~BlockCacheLookupContext() (3 samples, 0.04%)</title><rect x="877.9" y="531.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="880.9" y="542.0"></text>
</g>
<g>
<title>rocksdb::BlockIter&lt;rocksdb::IndexValue&gt;::status() const (3 samples, 0.04%)</title><rect x="878.5" y="531.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="881.5" y="542.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::NewDataBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::DataBlockIter*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::Status, rocksdb::FilePrefetchBuffer*, bool) const (5 samples, 0.07%)</title><rect x="879.2" y="531.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="882.2" y="542.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (2 samples, 0.03%)</title><rect x="880.2" y="531.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="883.2" y="542.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) [clone .plt] (3 samples, 0.04%)</title><rect x="880.5" y="531.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="883.5" y="542.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::value() const (2 samples, 0.03%)</title><rect x="881.0" y="531.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="884.0" y="542.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::~DataBlockIter() (3 samples, 0.04%)</title><rect x="881.3" y="531.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="884.3" y="542.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (5 samples, 0.07%)</title><rect x="882.1" y="531.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="885.1" y="542.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::~IndexBlockIter() (2 samples, 0.03%)</title><rect x="883.0" y="531.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="886.0" y="542.0"></text>
</g>
<g>
<title>rocksdb::Version::IsFilterSkipped(int, bool) (7 samples, 0.10%)</title><rect x="883.6" y="563.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="886.6" y="574.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long, rocksdb::Slice const*) (2 samples, 0.03%)</title><rect x="885.1" y="579.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="888.1" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (2 samples, 0.03%)</title><rect x="885.4" y="579.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="888.4" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (5 samples, 0.07%)</title><rect x="885.8" y="579.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="888.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) [clone .plt] (2 samples, 0.03%)</title><rect x="886.6" y="579.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="889.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::MergeContext::~MergeContext() (7 samples, 0.10%)</title><rect x="886.9" y="579.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="889.9" y="590.0"></text>
</g>
<g>
<title>rocksdb::PerfStepTimer::Start() (5 samples, 0.07%)</title><rect x="888.2" y="579.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="891.2" y="590.0"></text>
</g>
<g>
<title>rocksdb::StopWatch::~StopWatch() (10 samples, 0.14%)</title><rect x="889.2" y="579.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="892.2" y="590.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*, unsigned long*, rocksdb::ReadCallback*, bool*, bool) (8 samples, 0.11%)</title><rect x="891.0" y="579.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="894.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (3 samples, 0.04%)</title><rect x="892.4" y="595.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="895.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::string*) (4 samples, 0.06%)</title><rect x="892.9" y="611.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="895.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (3 samples, 0.04%)</title><rect x="893.5" y="611.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="896.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Release(rocksdb::Cache::Handle*, bool) (3 samples, 0.04%)</title><rect x="894.0" y="611.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="897.0" y="622.0"></text>
</g>
<g>
<title>std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long) (2 samples, 0.03%)</title><rect x="894.7" y="627.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="897.7" y="638.0"></text>
</g>
<g>
<title>std::string::assign(char const*, unsigned long) (6 samples, 0.08%)</title><rect x="895.0" y="627.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="898.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (2 samples, 0.03%)</title><rect x="896.0" y="643.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="899.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) (99 samples, 1.38%)</title><rect x="896.3" y="643.0" width="16.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="899.3" y="654.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.04%)</title><rect x="896.5" y="627.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="899.5" y="638.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.03%)</title><rect x="897.0" y="627.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="900.0" y="638.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (2 samples, 0.03%)</title><rect x="897.3" y="627.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="900.3" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (4 samples, 0.06%)</title><rect x="897.6" y="627.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="900.6" y="638.0"></text>
</g>
<g>
<title>__memmove_ssse3 (5 samples, 0.07%)</title><rect x="898.5" y="627.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="901.5" y="638.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (6 samples, 0.08%)</title><rect x="899.3" y="627.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="902.3" y="638.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.03%)</title><rect x="899.3" y="611.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="902.3" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="899.6" y="611.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="902.6" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.03%)</title><rect x="899.9" y="611.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="902.9" y="622.0"></text>
</g>
<g>
<title>jni_NewByteArray (62 samples, 0.87%)</title><rect x="900.3" y="627.0" width="10.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="903.3" y="638.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (3 samples, 0.04%)</title><rect x="900.8" y="611.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="903.8" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (11 samples, 0.15%)</title><rect x="901.3" y="611.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="904.3" y="622.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (5 samples, 0.07%)</title><rect x="903.1" y="611.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="906.1" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.03%)</title><rect x="903.9" y="611.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="906.9" y="622.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (38 samples, 0.53%)</title><rect x="904.2" y="611.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="907.2" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (26 samples, 0.36%)</title><rect x="905.9" y="595.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="908.9" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (18 samples, 0.25%)</title><rect x="906.0" y="579.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="909.0" y="590.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (8 samples, 0.11%)</title><rect x="906.9" y="563.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="909.9" y="574.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (3 samples, 0.04%)</title><rect x="908.2" y="563.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="911.2" y="574.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.06%)</title><rect x="909.2" y="579.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="912.2" y="590.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (2 samples, 0.03%)</title><rect x="909.8" y="579.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="912.8" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="910.2" y="595.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="913.2" y="606.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (12 samples, 0.17%)</title><rect x="910.5" y="627.0" width="2.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="913.5" y="638.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.04%)</title><rect x="910.8" y="611.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="913.8" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="911.3" y="611.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="914.3" y="622.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.06%)</title><rect x="911.8" y="611.0" width="0.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="914.8" y="622.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.03%)</title><rect x="912.1" y="595.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="915.1" y="606.0"></text>
</g>
<g>
<title>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::string const&amp;) (2 samples, 0.03%)</title><rect x="912.8" y="659.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="915.8" y="670.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_destroy(std::allocator&lt;char&gt; const&amp;) (2 samples, 0.03%)</title><rect x="913.1" y="659.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="916.1" y="670.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.32%)</title><rect x="913.5" y="675.0" width="3.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="916.5" y="686.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.25%)</title><rect x="913.6" y="659.0" width="3.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="916.6" y="670.0"></text>
</g>
<g>
<title>__memcpy_ssse3 (12 samples, 0.17%)</title><rect x="913.6" y="643.0" width="2.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="916.6" y="654.0"></text>
</g>
<g>
<title>memcpy@plt (2 samples, 0.03%)</title><rect x="915.6" y="643.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="918.6" y="654.0"></text>
</g>
<g>
<title>std::string::_M_mutate(unsigned long, unsigned long, unsigned long) (3 samples, 0.04%)</title><rect x="915.9" y="643.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="918.9" y="654.0"></text>
</g>
<g>
<title>pread64 (4 samples, 0.06%)</title><rect x="916.6" y="659.0" width="0.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="919.6" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.06%)</title><rect x="916.6" y="643.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="919.6" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.06%)</title><rect x="916.6" y="627.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="919.6" y="638.0"></text>
</g>
<g>
<title>__x64_sys_pread64 (3 samples, 0.04%)</title><rect x="916.8" y="611.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="919.8" y="622.0"></text>
</g>
<g>
<title>ksys_pread64 (3 samples, 0.04%)</title><rect x="916.8" y="595.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="919.8" y="606.0"></text>
</g>
<g>
<title>vfs_read (3 samples, 0.04%)</title><rect x="916.8" y="579.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="919.8" y="590.0"></text>
</g>
<g>
<title>__vfs_read (2 samples, 0.03%)</title><rect x="916.8" y="563.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="919.8" y="574.0"></text>
</g>
<g>
<title>new_sync_read (2 samples, 0.03%)</title><rect x="916.8" y="547.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="919.8" y="558.0"></text>
</g>
<g>
<title>ext4_file_read_iter (2 samples, 0.03%)</title><rect x="916.8" y="531.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="919.8" y="542.0"></text>
</g>
<g>
<title>generic_file_read_iter (2 samples, 0.03%)</title><rect x="916.8" y="515.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="919.8" y="526.0"></text>
</g>
<g>
<title>__libc_free (10 samples, 0.14%)</title><rect x="917.4" y="675.0" width="1.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="920.4" y="686.0"></text>
</g>
<g>
<title>__malloc (24 samples, 0.34%)</title><rect x="919.1" y="675.0" width="3.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="922.1" y="686.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.04%)</title><rect x="923.2" y="675.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="926.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() (6 samples, 0.08%)</title><rect x="923.9" y="675.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="926.9" y="686.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() [clone .plt] (4 samples, 0.06%)</title><rect x="924.8" y="675.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="927.8" y="686.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (4 samples, 0.06%)</title><rect x="925.5" y="675.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="928.5" y="686.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) (2 samples, 0.03%)</title><rect x="926.3" y="675.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="929.3" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/DAOByteOnlyConverter.tuneBufToArray (13 samples, 0.18%)</title><rect x="926.8" y="707.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="929.8" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/DAOByteOnlyConverter.readByteArray (13 samples, 0.18%)</title><rect x="926.8" y="691.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="929.8" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (11 samples, 0.15%)</title><rect x="927.2" y="675.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="930.2" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (11 samples, 0.15%)</title><rect x="927.2" y="659.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="930.2" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.13%)</title><rect x="927.2" y="643.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="930.2" y="654.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.10%)</title><rect x="927.5" y="627.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="930.5" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.07%)</title><rect x="927.8" y="611.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="930.8" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.07%)</title><rect x="927.8" y="595.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="930.8" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (5 samples, 0.07%)</title><rect x="927.8" y="579.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="930.8" y="590.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="928.6" y="643.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="931.6" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/Value.getValueFromBytes (21 samples, 0.29%)</title><rect x="929.0" y="723.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="932.0" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.07%)</title><rect x="929.1" y="707.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="932.1" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.07%)</title><rect x="929.1" y="691.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="932.1" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="929.3" y="675.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="932.3" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="929.3" y="659.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="932.3" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="929.3" y="643.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="932.3" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.06%)</title><rect x="929.3" y="627.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="932.3" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getLong (15 samples, 0.21%)</title><rect x="930.0" y="707.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="933.0" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getLongUnaligned (15 samples, 0.21%)</title><rect x="930.0" y="691.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="933.0" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (15 samples, 0.21%)</title><rect x="930.0" y="675.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="933.0" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.08%)</title><rect x="930.9" y="659.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="933.9" y="670.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (3 samples, 0.04%)</title><rect x="931.9" y="659.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="934.9" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/Value.getBytesFromValue (8 samples, 0.11%)</title><rect x="932.4" y="739.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="935.4" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (4 samples, 0.06%)</title><rect x="932.6" y="723.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="935.6" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="932.6" y="707.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="935.6" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="932.6" y="691.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="935.6" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.06%)</title><rect x="932.6" y="675.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="935.6" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (3 samples, 0.04%)</title><rect x="933.3" y="723.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="936.3" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (2 samples, 0.03%)</title><rect x="933.4" y="707.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="936.4" y="718.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,537 samples, 21.48%)</title><rect x="934.2" y="883.0" width="253.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="937.2" y="894.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="935.6" y="867.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="938.6" y="878.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="935.6" y="851.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="938.6" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.04%)</title><rect x="935.6" y="835.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="938.6" y="846.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.04%)</title><rect x="936.1" y="867.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="939.1" y="878.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (5 samples, 0.07%)</title><rect x="936.7" y="867.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="939.7" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (439 samples, 6.13%)</title><rect x="937.5" y="867.0" width="72.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="940.5" y="878.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (430 samples, 6.01%)</title><rect x="939.0" y="851.0" width="70.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="942.0" y="862.0">one/nio/..</text>
</g>
<g>
<title>JVM_IHashCode (109 samples, 1.52%)</title><rect x="941.7" y="835.0" width="17.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="944.7" y="846.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (2 samples, 0.03%)</title><rect x="941.7" y="819.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="944.7" y="830.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (2 samples, 0.03%)</title><rect x="942.0" y="819.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="945.0" y="830.0"></text>
</g>
<g>
<title>epoll_wait (105 samples, 1.47%)</title><rect x="942.3" y="819.0" width="17.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="945.3" y="830.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (96 samples, 1.34%)</title><rect x="943.8" y="803.0" width="15.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="946.8" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (96 samples, 1.34%)</title><rect x="943.8" y="787.0" width="15.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="946.8" y="798.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (86 samples, 1.20%)</title><rect x="945.5" y="771.0" width="14.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="948.5" y="782.0"></text>
</g>
<g>
<title>do_epoll_wait (86 samples, 1.20%)</title><rect x="945.5" y="755.0" width="14.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="948.5" y="766.0"></text>
</g>
<g>
<title>__fdget (5 samples, 0.07%)</title><rect x="946.0" y="739.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="949.0" y="750.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.06%)</title><rect x="946.1" y="723.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="949.1" y="734.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.04%)</title><rect x="946.3" y="707.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="949.3" y="718.0"></text>
</g>
<g>
<title>ep_poll (77 samples, 1.08%)</title><rect x="946.9" y="739.0" width="12.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="949.9" y="750.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.19 (59 samples, 0.82%)</title><rect x="949.1" y="723.0" width="9.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="952.1" y="734.0"></text>
</g>
<g>
<title>ep_send_events_proc (37 samples, 0.52%)</title><rect x="951.9" y="707.0" width="6.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="954.9" y="718.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (28 samples, 0.39%)</title><rect x="953.0" y="691.0" width="4.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="956.0" y="702.0"></text>
</g>
<g>
<title>sock_poll (20 samples, 0.28%)</title><rect x="953.9" y="675.0" width="3.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="956.9" y="686.0"></text>
</g>
<g>
<title>tcp_poll (8 samples, 0.11%)</title><rect x="955.7" y="659.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="958.7" y="670.0"></text>
</g>
<g>
<title>tcp_poll (3 samples, 0.04%)</title><rect x="957.2" y="675.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="960.2" y="686.0"></text>
</g>
<g>
<title>sock_poll (2 samples, 0.03%)</title><rect x="957.7" y="691.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="960.7" y="702.0"></text>
</g>
<g>
<title>mutex_lock (5 samples, 0.07%)</title><rect x="958.0" y="707.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="961.0" y="718.0"></text>
</g>
<g>
<title>mutex_unlock (2 samples, 0.03%)</title><rect x="959.0" y="723.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="962.0" y="734.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (2 samples, 0.03%)</title><rect x="959.3" y="723.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="962.3" y="734.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (11 samples, 0.15%)</title><rect x="959.6" y="835.0" width="1.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="962.6" y="846.0"></text>
</g>
<g>
<title>[unknown] (268 samples, 3.75%)</title><rect x="961.5" y="835.0" width="44.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="964.5" y="846.0">[unk..</text>
</g>
<g>
<title>[unknown] (14 samples, 0.20%)</title><rect x="961.5" y="819.0" width="2.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="964.5" y="830.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.20%)</title><rect x="961.5" y="803.0" width="2.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="964.5" y="814.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.03%)</title><rect x="961.5" y="787.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="964.5" y="798.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (5 samples, 0.07%)</title><rect x="961.8" y="787.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="964.8" y="798.0"></text>
</g>
<g>
<title>clock_gettime (7 samples, 0.10%)</title><rect x="962.6" y="787.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="965.6" y="798.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.06%)</title><rect x="963.1" y="771.0" width="0.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="966.1" y="782.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (5 samples, 0.07%)</title><rect x="963.8" y="819.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="966.8" y="830.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (2 samples, 0.03%)</title><rect x="964.6" y="819.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="967.6" y="830.0"></text>
</g>
<g>
<title>epoll_wait (246 samples, 3.44%)</title><rect x="965.1" y="819.0" width="40.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="968.1" y="830.0">epo..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (237 samples, 3.31%)</title><rect x="966.6" y="803.0" width="39.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="969.6" y="814.0">ent..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (5 samples, 0.07%)</title><rect x="966.6" y="787.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="969.6" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (232 samples, 3.24%)</title><rect x="967.4" y="787.0" width="38.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="970.4" y="798.0">do_..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (186 samples, 2.60%)</title><rect x="974.6" y="771.0" width="30.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="977.6" y="782.0">__..</text>
</g>
<g>
<title>do_epoll_wait (186 samples, 2.60%)</title><rect x="974.6" y="755.0" width="30.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="977.6" y="766.0">do..</text>
</g>
<g>
<title>__fdget (15 samples, 0.21%)</title><rect x="975.6" y="739.0" width="2.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="978.6" y="750.0"></text>
</g>
<g>
<title>__fget_light (15 samples, 0.21%)</title><rect x="975.6" y="723.0" width="2.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="978.6" y="734.0"></text>
</g>
<g>
<title>__fget (9 samples, 0.13%)</title><rect x="976.6" y="707.0" width="1.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="979.6" y="718.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.03%)</title><rect x="978.1" y="739.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="981.1" y="750.0"></text>
</g>
<g>
<title>ep_poll (160 samples, 2.24%)</title><rect x="978.4" y="739.0" width="26.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="981.4" y="750.0">e..</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.19 (130 samples, 1.82%)</title><rect x="981.9" y="723.0" width="21.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="984.9" y="734.0">e..</text>
</g>
<g>
<title>_cond_resched (3 samples, 0.04%)</title><rect x="985.4" y="707.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="988.4" y="718.0"></text>
</g>
<g>
<title>ep_send_events_proc (95 samples, 1.33%)</title><rect x="986.2" y="707.0" width="15.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="989.2" y="718.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (66 samples, 0.92%)</title><rect x="989.3" y="691.0" width="10.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="992.3" y="702.0"></text>
</g>
<g>
<title>sock_poll (47 samples, 0.66%)</title><rect x="991.1" y="675.0" width="7.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="994.1" y="686.0"></text>
</g>
<g>
<title>tcp_poll (18 samples, 0.25%)</title><rect x="995.3" y="659.0" width="2.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="998.3" y="670.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (4 samples, 0.06%)</title><rect x="998.2" y="659.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1001.2" y="670.0"></text>
</g>
<g>
<title>tcp_poll (8 samples, 0.11%)</title><rect x="998.9" y="675.0" width="1.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1001.9" y="686.0"></text>
</g>
<g>
<title>sock_poll (10 samples, 0.14%)</title><rect x="1000.2" y="691.0" width="1.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1003.2" y="702.0"></text>
</g>
<g>
<title>mutex_lock (8 samples, 0.11%)</title><rect x="1001.9" y="707.0" width="1.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1004.9" y="718.0"></text>
</g>
<g>
<title>rcu_all_qs (3 samples, 0.04%)</title><rect x="1002.7" y="691.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1005.7" y="702.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (6 samples, 0.08%)</title><rect x="1003.7" y="723.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1006.7" y="734.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (6 samples, 0.08%)</title><rect x="1003.7" y="707.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1006.7" y="718.0"></text>
</g>
<g>
<title>schedule (5 samples, 0.07%)</title><rect x="1003.8" y="691.0" width="0.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1006.8" y="702.0"></text>
</g>
<g>
<title>__sched_text_start (5 samples, 0.07%)</title><rect x="1003.8" y="675.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1006.8" y="686.0"></text>
</g>
<g>
<title>fput (2 samples, 0.03%)</title><rect x="1004.8" y="739.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1007.8" y="750.0"></text>
</g>
<g>
<title>do_epoll_wait (2 samples, 0.03%)</title><rect x="1005.3" y="771.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1008.3" y="782.0"></text>
</g>
<g>
<title>clock_gettime (6 samples, 0.08%)</title><rect x="1005.6" y="835.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1008.6" y="846.0"></text>
</g>
<g>
<title>clock_gettime@plt (2 samples, 0.03%)</title><rect x="1006.6" y="835.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1009.6" y="846.0"></text>
</g>
<g>
<title>epoll_wait (16 samples, 0.22%)</title><rect x="1007.0" y="835.0" width="2.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1010.0" y="846.0"></text>
</g>
<g>
<title>epoll_wait@plt (2 samples, 0.03%)</title><rect x="1009.6" y="835.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1012.6" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,067 samples, 14.91%)</title><rect x="1009.9" y="867.0" width="176.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1012.9" y="878.0">one/nio/net/Session.pro..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,062 samples, 14.84%)</title><rect x="1010.8" y="851.0" width="175.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1013.8" y="862.0">one/nio/http/HttpSessio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (736 samples, 10.29%)</title><rect x="1011.4" y="835.0" width="121.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1014.4" y="846.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (626 samples, 8.75%)</title><rect x="1015.0" y="819.0" width="103.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1018.0" y="830.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (626 samples, 8.75%)</title><rect x="1015.0" y="803.0" width="103.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1018.0" y="814.0">one/nio/http..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (584 samples, 8.16%)</title><rect x="1018.7" y="787.0" width="96.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1021.7" y="798.0">RequestHand..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.04%)</title><rect x="1019.7" y="771.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1022.7" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (37 samples, 0.52%)</title><rect x="1020.2" y="771.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1023.2" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (37 samples, 0.52%)</title><rect x="1020.2" y="755.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1023.2" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.08%)</title><rect x="1021.8" y="739.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1024.8" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (6 samples, 0.08%)</title><rect x="1021.8" y="723.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1024.8" y="734.0"></text>
</g>
<g>
<title>java/lang/String.substring (8 samples, 0.11%)</title><rect x="1022.8" y="739.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1025.8" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (8 samples, 0.11%)</title><rect x="1022.8" y="723.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1025.8" y="734.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (6 samples, 0.08%)</title><rect x="1023.1" y="707.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1026.1" y="718.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.03%)</title><rect x="1024.1" y="739.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1027.1" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.06%)</title><rect x="1024.4" y="739.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1027.4" y="750.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (7 samples, 0.10%)</title><rect x="1025.1" y="739.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1028.1" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.10%)</title><rect x="1025.1" y="723.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1028.1" y="734.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.10%)</title><rect x="1025.1" y="707.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1028.1" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (7 samples, 0.10%)</title><rect x="1025.1" y="691.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1028.1" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/RepliServiceImpl.entity (538 samples, 7.52%)</title><rect x="1026.3" y="771.0" width="88.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1029.3" y="782.0">ru/mail/po..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (9 samples, 0.13%)</title><rect x="1026.8" y="755.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1029.8" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="1027.4" y="739.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1030.4" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="1027.4" y="723.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1030.4" y="734.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.04%)</title><rect x="1027.7" y="739.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1030.7" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.04%)</title><rect x="1027.7" y="723.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1030.7" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.03%)</title><rect x="1027.9" y="707.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1030.9" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6 samples, 0.08%)</title><rect x="1028.2" y="755.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1031.2" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.07%)</title><rect x="1028.4" y="739.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1031.4" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.07%)</title><rect x="1028.4" y="723.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1031.4" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/DAOByteOnlyConverter.tuneArrayToBuf (14 samples, 0.20%)</title><rect x="1029.2" y="755.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1032.2" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/RepliServiceImpl.runAsyncHandler (506 samples, 7.07%)</title><rect x="1031.5" y="755.0" width="83.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1034.5" y="766.0">ru/mail/p..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (505 samples, 7.06%)</title><rect x="1031.7" y="739.0" width="83.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1034.7" y="750.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (483 samples, 6.75%)</title><rect x="1035.3" y="723.0" width="79.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1038.3" y="734.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.08%)</title><rect x="1036.0" y="707.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1039.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.08%)</title><rect x="1036.0" y="691.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1039.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.04%)</title><rect x="1036.2" y="675.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1039.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.03%)</title><rect x="1036.3" y="659.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1039.3" y="670.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.03%)</title><rect x="1036.6" y="675.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1039.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (473 samples, 6.61%)</title><rect x="1037.0" y="707.0" width="78.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1040.0" y="718.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (473 samples, 6.61%)</title><rect x="1037.0" y="691.0" width="78.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1040.0" y="702.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (473 samples, 6.61%)</title><rect x="1037.0" y="675.0" width="78.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1040.0" y="686.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (473 samples, 6.61%)</title><rect x="1037.0" y="659.0" width="78.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1040.0" y="670.0">java/util..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (454 samples, 6.34%)</title><rect x="1040.1" y="643.0" width="74.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1043.1" y="654.0">jdk/inte..</text>
</g>
<g>
<title>Parker::unpark() (4 samples, 0.06%)</title><rect x="1041.3" y="627.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1044.3" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.03%)</title><rect x="1041.9" y="627.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1044.9" y="638.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.04%)</title><rect x="1042.3" y="627.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1045.3" y="638.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.06%)</title><rect x="1042.7" y="627.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1045.7" y="638.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (5 samples, 0.07%)</title><rect x="1043.4" y="627.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1046.4" y="638.0"></text>
</g>
<g>
<title>Unsafe_Unpark (122 samples, 1.70%)</title><rect x="1044.2" y="627.0" width="20.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1047.2" y="638.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (5 samples, 0.07%)</title><rect x="1045.6" y="611.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1048.6" y="622.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.04%)</title><rect x="1046.4" y="611.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1049.4" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.04%)</title><rect x="1046.9" y="611.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1049.9" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (5 samples, 0.07%)</title><rect x="1047.4" y="611.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1050.4" y="622.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (8 samples, 0.11%)</title><rect x="1048.2" y="611.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1051.2" y="622.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (23 samples, 0.32%)</title><rect x="1049.5" y="611.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1052.5" y="622.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (7 samples, 0.10%)</title><rect x="1053.5" y="611.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1056.5" y="622.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (4 samples, 0.06%)</title><rect x="1054.6" y="611.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1057.6" y="622.0"></text>
</g>
<g>
<title>pthread_mutex_lock (47 samples, 0.66%)</title><rect x="1055.3" y="611.0" width="7.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1058.3" y="622.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (7 samples, 0.10%)</title><rect x="1063.2" y="611.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1066.2" y="622.0"></text>
</g>
<g>
<title>__pthread_cond_signal (277 samples, 3.87%)</title><rect x="1064.3" y="627.0" width="45.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1067.3" y="638.0">__pt..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (247 samples, 3.45%)</title><rect x="1069.3" y="611.0" width="40.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1072.3" y="622.0">ent..</text>
</g>
<g>
<title>do_syscall_64 (246 samples, 3.44%)</title><rect x="1069.5" y="595.0" width="40.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1072.5" y="606.0">do_..</text>
</g>
<g>
<title>__x64_sys_futex (206 samples, 2.88%)</title><rect x="1076.1" y="579.0" width="33.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1079.1" y="590.0">__..</text>
</g>
<g>
<title>do_futex (203 samples, 2.84%)</title><rect x="1076.6" y="563.0" width="33.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1079.6" y="574.0">do..</text>
</g>
<g>
<title>futex_wake (196 samples, 2.74%)</title><rect x="1077.0" y="547.0" width="32.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1080.0" y="558.0">fu..</text>
</g>
<g>
<title>get_futex_key (2 samples, 0.03%)</title><rect x="1077.9" y="531.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1080.9" y="542.0"></text>
</g>
<g>
<title>mark_wake_futex (9 samples, 0.13%)</title><rect x="1078.2" y="531.0" width="1.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1081.2" y="542.0"></text>
</g>
<g>
<title>wake_up_q (179 samples, 2.50%)</title><rect x="1079.8" y="531.0" width="29.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1082.8" y="542.0">wa..</text>
</g>
<g>
<title>try_to_wake_up (178 samples, 2.49%)</title><rect x="1080.0" y="515.0" width="29.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1083.0" y="526.0">tr..</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (177 samples, 2.47%)</title><rect x="1080.2" y="499.0" width="29.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1083.2" y="510.0">_r..</text>
</g>
<g>
<title>get_futex_key (2 samples, 0.03%)</title><rect x="1109.4" y="547.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1112.4" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr (13 samples, 0.18%)</title><rect x="1110.0" y="627.0" width="2.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1113.0" y="638.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (12 samples, 0.17%)</title><rect x="1112.7" y="627.0" width="1.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1115.7" y="638.0"></text>
</g>
<g>
<title>pthread_cond_signal@plt (2 samples, 0.03%)</title><rect x="1114.6" y="627.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1117.6" y="638.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (7 samples, 0.10%)</title><rect x="1115.0" y="787.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1118.0" y="798.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (12 samples, 0.17%)</title><rect x="1116.1" y="787.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1119.1" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (12 samples, 0.17%)</title><rect x="1116.1" y="771.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1119.1" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.06%)</title><rect x="1116.1" y="755.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1119.1" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (8 samples, 0.11%)</title><rect x="1116.8" y="755.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1119.8" y="766.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (8 samples, 0.11%)</title><rect x="1116.8" y="739.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1119.8" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (8 samples, 0.11%)</title><rect x="1116.8" y="723.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1119.8" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (40 samples, 0.56%)</title><rect x="1118.3" y="819.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1121.3" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (5 samples, 0.07%)</title><rect x="1118.6" y="803.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1121.6" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.06%)</title><rect x="1118.8" y="787.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1121.8" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.06%)</title><rect x="1118.8" y="771.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1121.8" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.06%)</title><rect x="1118.8" y="755.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1121.8" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="1119.1" y="739.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1122.1" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (26 samples, 0.36%)</title><rect x="1119.4" y="803.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1122.4" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (25 samples, 0.35%)</title><rect x="1119.6" y="787.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1122.6" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="1123.2" y="771.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.2" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1123.2" y="755.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1126.2" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1123.2" y="739.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1126.2" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="1123.2" y="723.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.2" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (7 samples, 0.10%)</title><rect x="1123.7" y="803.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1126.7" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (12 samples, 0.17%)</title><rect x="1124.9" y="819.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1127.9" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (36 samples, 0.50%)</title><rect x="1126.8" y="819.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1129.8" y="830.0"></text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (4 samples, 0.06%)</title><rect x="1128.0" y="803.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1131.0" y="814.0"></text>
</g>
<g>
<title>itable stub (13 samples, 0.18%)</title><rect x="1128.7" y="803.0" width="2.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1131.7" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (12 samples, 0.17%)</title><rect x="1130.8" y="803.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1133.8" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1132.5" y="787.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1135.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1132.5" y="771.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1135.5" y="782.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.03%)</title><rect x="1132.5" y="755.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1135.5" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="1132.5" y="739.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.5" y="750.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1132.5" y="723.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.5" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1132.5" y="707.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.5" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="1132.5" y="691.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.5" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="1132.5" y="675.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.5" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (2 samples, 0.03%)</title><rect x="1132.5" y="659.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.5" y="670.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (5 samples, 0.07%)</title><rect x="1132.8" y="835.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1135.8" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="1133.3" y="819.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1136.3" y="830.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (317 samples, 4.43%)</title><rect x="1133.6" y="835.0" width="52.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1136.6" y="846.0">one/n..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (308 samples, 4.30%)</title><rect x="1134.4" y="819.0" width="50.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1137.4" y="830.0">one/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (56 samples, 0.78%)</title><rect x="1136.2" y="803.0" width="9.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1139.2" y="814.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (9 samples, 0.13%)</title><rect x="1137.2" y="787.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.2" y="798.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.04%)</title><rect x="1138.7" y="787.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1141.7" y="798.0"></text>
</g>
<g>
<title>__memmove_ssse3 (8 samples, 0.11%)</title><rect x="1139.4" y="787.0" width="1.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1142.4" y="798.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (25 samples, 0.35%)</title><rect x="1140.7" y="787.0" width="4.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1143.7" y="798.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.03%)</title><rect x="1142.2" y="771.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1145.2" y="782.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.03%)</title><rect x="1142.5" y="771.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.5" y="782.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="1142.8" y="771.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.8" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (6 samples, 0.08%)</title><rect x="1143.2" y="771.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1146.2" y="782.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.06%)</title><rect x="1144.2" y="771.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1147.2" y="782.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.03%)</title><rect x="1144.5" y="755.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.5" y="766.0"></text>
</g>
<g>
<title>memmove@plt (2 samples, 0.03%)</title><rect x="1144.8" y="787.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1147.8" y="798.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.03%)</title><rect x="1145.1" y="787.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.1" y="798.0"></text>
</g>
<g>
<title>__GI___recv (226 samples, 3.16%)</title><rect x="1145.5" y="803.0" width="37.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1148.5" y="814.0">__G..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (207 samples, 2.89%)</title><rect x="1148.6" y="787.0" width="34.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1151.6" y="798.0">en..</text>
</g>
<g>
<title>__x64_sys_recvfrom (2 samples, 0.03%)</title><rect x="1148.6" y="771.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1151.6" y="782.0"></text>
</g>
<g>
<title>do_syscall_64 (205 samples, 2.86%)</title><rect x="1148.9" y="771.0" width="33.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1151.9" y="782.0">do..</text>
</g>
<g>
<title>__x64_sys_recvfrom (166 samples, 2.32%)</title><rect x="1155.4" y="755.0" width="27.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1158.4" y="766.0">_..</text>
</g>
<g>
<title>__sys_recvfrom (159 samples, 2.22%)</title><rect x="1155.4" y="739.0" width="26.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1158.4" y="750.0">_..</text>
</g>
<g>
<title>__fdget (2 samples, 0.03%)</title><rect x="1156.4" y="723.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1159.4" y="734.0"></text>
</g>
<g>
<title>inet_recvmsg (2 samples, 0.03%)</title><rect x="1157.0" y="723.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1160.0" y="734.0"></text>
</g>
<g>
<title>sock_recvmsg (131 samples, 1.83%)</title><rect x="1157.7" y="723.0" width="21.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1160.7" y="734.0">s..</text>
</g>
<g>
<title>inet_recvmsg (119 samples, 1.66%)</title><rect x="1157.8" y="707.0" width="19.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1160.8" y="718.0"></text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.03%)</title><rect x="1158.8" y="691.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1161.8" y="702.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (2 samples, 0.03%)</title><rect x="1159.3" y="691.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1162.3" y="702.0"></text>
</g>
<g>
<title>tcp_recvmsg (107 samples, 1.50%)</title><rect x="1159.8" y="691.0" width="17.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1162.8" y="702.0"></text>
</g>
<g>
<title>__kfree_skb (12 samples, 0.17%)</title><rect x="1162.3" y="675.0" width="2.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1165.3" y="686.0"></text>
</g>
<g>
<title>skb_release_all (9 samples, 0.13%)</title><rect x="1162.3" y="659.0" width="1.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1165.3" y="670.0"></text>
</g>
<g>
<title>skb_release_data (4 samples, 0.06%)</title><rect x="1162.3" y="643.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1165.3" y="654.0"></text>
</g>
<g>
<title>skb_release_head_state (3 samples, 0.04%)</title><rect x="1163.0" y="643.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1166.0" y="654.0"></text>
</g>
<g>
<title>sock_rfree (2 samples, 0.03%)</title><rect x="1163.5" y="643.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1166.5" y="654.0"></text>
</g>
<g>
<title>skb_release_data (2 samples, 0.03%)</title><rect x="1163.8" y="659.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1166.8" y="670.0"></text>
</g>
<g>
<title>kfree_skbmem (2 samples, 0.03%)</title><rect x="1164.9" y="675.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1167.9" y="686.0"></text>
</g>
<g>
<title>lock_sock_nested (5 samples, 0.07%)</title><rect x="1165.3" y="675.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1168.3" y="686.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (4 samples, 0.06%)</title><rect x="1165.3" y="659.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1168.3" y="670.0"></text>
</g>
<g>
<title>release_sock (4 samples, 0.06%)</title><rect x="1166.1" y="675.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1169.1" y="686.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (2 samples, 0.03%)</title><rect x="1166.4" y="659.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1169.4" y="670.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.03%)</title><rect x="1166.4" y="643.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1169.4" y="654.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (45 samples, 0.63%)</title><rect x="1166.7" y="675.0" width="7.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1169.7" y="686.0"></text>
</g>
<g>
<title>__skb_datagram_iter (38 samples, 0.53%)</title><rect x="1167.2" y="659.0" width="6.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1170.2" y="670.0"></text>
</g>
<g>
<title>__check_object_size (3 samples, 0.04%)</title><rect x="1167.9" y="643.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1170.9" y="654.0"></text>
</g>
<g>
<title>simple_copy_to_iter (31 samples, 0.43%)</title><rect x="1168.4" y="643.0" width="5.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1171.4" y="654.0"></text>
</g>
<g>
<title>__check_object_size (14 samples, 0.20%)</title><rect x="1168.6" y="627.0" width="2.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1171.6" y="638.0"></text>
</g>
<g>
<title>__virt_addr_valid (9 samples, 0.13%)</title><rect x="1169.4" y="611.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1172.4" y="622.0"></text>
</g>
<g>
<title>__virt_addr_valid (2 samples, 0.03%)</title><rect x="1170.9" y="627.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1173.9" y="638.0"></text>
</g>
<g>
<title>_copy_to_iter (10 samples, 0.14%)</title><rect x="1171.2" y="627.0" width="1.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1174.2" y="638.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (6 samples, 0.08%)</title><rect x="1171.2" y="611.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1174.2" y="622.0"></text>
</g>
<g>
<title>copy_user_generic_unrolled (4 samples, 0.06%)</title><rect x="1172.2" y="611.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1175.2" y="622.0"></text>
</g>
<g>
<title>check_stack_object (4 samples, 0.06%)</title><rect x="1172.9" y="627.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1175.9" y="638.0"></text>
</g>
<g>
<title>simple_copy_to_iter (3 samples, 0.04%)</title><rect x="1173.7" y="659.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1176.7" y="670.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (6 samples, 0.08%)</title><rect x="1174.3" y="675.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1177.3" y="686.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (9 samples, 0.13%)</title><rect x="1175.5" y="675.0" width="1.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1178.5" y="686.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.03%)</title><rect x="1175.8" y="659.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1178.8" y="670.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (5 samples, 0.07%)</title><rect x="1176.1" y="659.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1179.1" y="670.0"></text>
</g>
<g>
<title>ktime_get (4 samples, 0.06%)</title><rect x="1176.3" y="643.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1179.3" y="654.0"></text>
</g>
<g>
<title>tcp_release_cb (3 samples, 0.04%)</title><rect x="1177.0" y="675.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1180.0" y="686.0"></text>
</g>
<g>
<title>security_socket_recvmsg (10 samples, 0.14%)</title><rect x="1177.5" y="707.0" width="1.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1180.5" y="718.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (2 samples, 0.03%)</title><rect x="1177.6" y="691.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1180.6" y="702.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (7 samples, 0.10%)</title><rect x="1178.0" y="691.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1181.0" y="702.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (6 samples, 0.08%)</title><rect x="1178.1" y="675.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1181.1" y="686.0"></text>
</g>
<g>
<title>aa_sk_perm (2 samples, 0.03%)</title><rect x="1178.8" y="659.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1181.8" y="670.0"></text>
</g>
<g>
<title>sockfd_lookup_light (14 samples, 0.20%)</title><rect x="1179.3" y="723.0" width="2.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1182.3" y="734.0"></text>
</g>
<g>
<title>__fdget (11 samples, 0.15%)</title><rect x="1179.3" y="707.0" width="1.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1182.3" y="718.0"></text>
</g>
<g>
<title>__fget_light (10 samples, 0.14%)</title><rect x="1179.4" y="691.0" width="1.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1182.4" y="702.0"></text>
</g>
<g>
<title>__fget (7 samples, 0.10%)</title><rect x="1179.9" y="675.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1182.9" y="686.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.04%)</title><rect x="1181.1" y="707.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1184.1" y="718.0"></text>
</g>
<g>
<title>import_single_range (5 samples, 0.07%)</title><rect x="1181.6" y="739.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1184.6" y="750.0"></text>
</g>
<g>
<title>sockfd_lookup_light (2 samples, 0.03%)</title><rect x="1182.4" y="739.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1185.4" y="750.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (6 samples, 0.08%)</title><rect x="1182.7" y="803.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1185.7" y="814.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (9 samples, 0.13%)</title><rect x="1183.7" y="803.0" width="1.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1186.7" y="814.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (4 samples, 0.06%)</title><rect x="1185.2" y="819.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1188.2" y="830.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (11 samples, 0.15%)</title><rect x="1185.9" y="867.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.9" y="878.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.06%)</title><rect x="1186.0" y="851.0" width="0.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1189.0" y="862.0"></text>
</g>
<g>
<title>gettimeofday (6 samples, 0.08%)</title><rect x="1186.7" y="851.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1189.7" y="862.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.08%)</title><rect x="1186.7" y="835.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1189.7" y="846.0"></text>
</g>
<g>
<title>start_thread (14 samples, 0.20%)</title><rect x="1187.7" y="883.0" width="2.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1190.7" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (14 samples, 0.20%)</title><rect x="1187.7" y="867.0" width="2.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1190.7" y="878.0"></text>
</g>
<g>
<title>Thread::call_run() (14 samples, 0.20%)</title><rect x="1187.7" y="851.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.7" y="862.0"></text>
</g>
<g>
<title>GangWorker::loop() (9 samples, 0.13%)</title><rect x="1187.7" y="835.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.7" y="846.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (7 samples, 0.10%)</title><rect x="1187.7" y="819.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.7" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.04%)</title><rect x="1187.7" y="803.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.7" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (3 samples, 0.04%)</title><rect x="1188.4" y="803.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.4" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.04%)</title><rect x="1188.4" y="787.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.4" y="798.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (3 samples, 0.04%)</title><rect x="1188.4" y="771.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.4" y="782.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (2 samples, 0.03%)</title><rect x="1188.5" y="755.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.5" y="766.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (2 samples, 0.03%)</title><rect x="1188.5" y="739.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.5" y="750.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (2 samples, 0.03%)</title><rect x="1188.5" y="723.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.5" y="734.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (2 samples, 0.03%)</title><rect x="1188.8" y="819.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.8" y="830.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.03%)</title><rect x="1188.8" y="803.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.8" y="814.0"></text>
</g>
<g>
<title>VMThread::run() (4 samples, 0.06%)</title><rect x="1189.2" y="835.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.2" y="846.0"></text>
</g>
<g>
<title>VMThread::loop() (4 samples, 0.06%)</title><rect x="1189.2" y="819.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.2" y="830.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (2 samples, 0.03%)</title><rect x="1189.3" y="803.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.3" y="814.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.03%)</title><rect x="1189.3" y="787.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.3" y="798.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (2 samples, 0.03%)</title><rect x="1189.3" y="771.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.3" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.03%)</title><rect x="1189.3" y="755.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.3" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (2 samples, 0.03%)</title><rect x="1189.3" y="739.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.3" y="750.0"></text>
</g>
<g>
<title>WeakProcessor::weak_oops_do(BoolObjectClosure*, OopClosure*) (2 samples, 0.03%)</title><rect x="1189.3" y="723.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.3" y="734.0"></text>
</g>
</g>
</svg>
