<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Basic shard control | RAM</text>
<text id="details" x="10" y="373"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="373"> </text>
<g id="frames">
<g>
<title>all (48,143 samples, 100.00%)</title><rect x="10.0" y="339.0" width="1180.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="13.0" y="350.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (25,170 samples, 52.28%)</title><rect x="10.0" y="323.0" width="616.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="334.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (25,170 samples, 52.28%)</title><rect x="10.0" y="307.0" width="616.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="318.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (25,170 samples, 52.28%)</title><rect x="10.0" y="291.0" width="616.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="302.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (786 samples, 1.63%)</title><rect x="10.0" y="275.0" width="19.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (786 samples, 1.63%)</title><rect x="10.0" y="259.0" width="19.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (785 samples, 1.63%)</title><rect x="10.0" y="243.0" width="19.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (785 samples, 1.63%)</title><rect x="10.0" y="227.0" width="19.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (785 samples, 1.63%)</title><rect x="10.0" y="211.0" width="19.2" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/AsyncService$$Lambda$69/583081315.run (24,384 samples, 50.65%)</title><rect x="29.3" y="275.0" width="597.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="32.3" y="286.0">ru/mail/polis/service/codearound/AsyncService$$Lambda$69/583081315.run</text>
</g>
<g>
<title>ru/mail/polis/service/codearound/AsyncService.lambda$runAsyncHandler$4 (24,384 samples, 50.65%)</title><rect x="29.3" y="259.0" width="597.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="32.3" y="270.0">ru/mail/polis/service/codearound/AsyncService.lambda$runAsyncHandler$4</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (4,296 samples, 8.92%)</title><rect x="29.3" y="243.0" width="105.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="32.3" y="254.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (4,296 samples, 8.92%)</title><rect x="29.3" y="227.0" width="105.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="32.3" y="238.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3,073 samples, 6.38%)</title><rect x="29.3" y="211.0" width="75.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="32.3" y="222.0">one/nio/..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (3,073 samples, 6.38%)</title><rect x="29.3" y="195.0" width="75.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="32.3" y="206.0">one/nio/..</text>
</g>
<g>
<title>byte[] (3,073 samples, 6.38%)</title><rect x="29.3" y="179.0" width="75.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="32.3" y="190.0">byte[]</text>
</g>
<g>
<title>one/nio/net/Session.write (1,223 samples, 2.54%)</title><rect x="104.6" y="211.0" width="30.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="107.6" y="222.0">on..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (1,223 samples, 2.54%)</title><rect x="104.6" y="195.0" width="30.0" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="107.6" y="206.0">on..</text>
</g>
<g>
<title>ru/mail/polis/service/codearound/AsyncService$$Lambda$66/2021148767.exec (20,088 samples, 41.73%)</title><rect x="134.6" y="243.0" width="492.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="137.6" y="254.0">ru/mail/polis/service/codearound/AsyncService$$Lambda$66/2021148767...</text>
</g>
<g>
<title>ru/mail/polis/service/codearound/AsyncService.lambda$entity$2 (20,088 samples, 41.73%)</title><rect x="134.6" y="227.0" width="492.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="137.6" y="238.0">ru/mail/polis/service/codearound/AsyncService.lambda$entity$2</text>
</g>
<g>
<title>ru/mail/polis/service/codearound/AsyncService.upsert (20,088 samples, 41.73%)</title><rect x="134.6" y="211.0" width="492.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="137.6" y="222.0">ru/mail/polis/service/codearound/AsyncService.upsert</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,845 samples, 3.83%)</title><rect x="134.6" y="195.0" width="45.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="137.6" y="206.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,845 samples, 3.83%)</title><rect x="134.6" y="179.0" width="45.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="137.6" y="190.0">java..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,845 samples, 3.83%)</title><rect x="134.6" y="163.0" width="45.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="137.6" y="174.0">java..</text>
</g>
<g>
<title>one.nio.http.Response (822 samples, 1.71%)</title><rect x="179.8" y="195.0" width="20.1" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="182.8" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3,299 samples, 6.85%)</title><rect x="199.9" y="195.0" width="80.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="202.9" y="206.0">one/nio/h..</text>
</g>
<g>
<title>byte[] (1,435 samples, 2.98%)</title><rect x="199.9" y="179.0" width="35.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="202.9" y="190.0">byt..</text>
</g>
<g>
<title>java.lang.String[] (1,045 samples, 2.17%)</title><rect x="235.1" y="179.0" width="25.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="238.1" y="190.0">j..</text>
</g>
<g>
<title>java.lang.String (819 samples, 1.70%)</title><rect x="260.7" y="179.0" width="20.1" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="263.7" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/AsyncService.proxy (9,117 samples, 18.94%)</title><rect x="280.8" y="195.0" width="223.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="283.8" y="206.0">ru/mail/polis/service/codearo..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (90 samples, 0.19%)</title><rect x="280.8" y="179.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="283.8" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1354003114.invoke (90 samples, 0.19%)</title><rect x="280.8" y="163.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="283.8" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (90 samples, 0.19%)</title><rect x="280.8" y="147.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.8" y="158.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (24 samples, 0.05%)</title><rect x="280.8" y="131.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="283.8" y="142.0"></text>
</g>
<g>
<title>java.lang.String (24 samples, 0.05%)</title><rect x="280.8" y="115.0" width="0.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="283.8" y="126.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (66 samples, 0.14%)</title><rect x="281.4" y="131.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="284.4" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (66 samples, 0.14%)</title><rect x="281.4" y="115.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="284.4" y="126.0"></text>
</g>
<g>
<title>byte[] (66 samples, 0.14%)</title><rect x="281.4" y="99.0" width="1.6" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="284.4" y="110.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (9,027 samples, 18.75%)</title><rect x="283.0" y="179.0" width="221.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="286.0" y="190.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (9,027 samples, 18.75%)</title><rect x="283.0" y="163.0" width="221.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="286.0" y="174.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (86 samples, 0.18%)</title><rect x="283.0" y="147.0" width="2.1" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="286.0" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (7,712 samples, 16.02%)</title><rect x="285.1" y="147.0" width="189.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="288.1" y="158.0">one/nio/http/HttpClient$R..</text>
</g>
<g>
<title>byte[] (7,545 samples, 15.67%)</title><rect x="285.1" y="131.0" width="184.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="288.1" y="142.0">byte[]</text>
</g>
<g>
<title>byte[] (167 samples, 0.35%)</title><rect x="470.0" y="131.0" width="4.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="473.0" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (994 samples, 2.06%)</title><rect x="474.1" y="147.0" width="24.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="477.1" y="158.0">o..</text>
</g>
<g>
<title>byte[] (22 samples, 0.05%)</title><rect x="474.1" y="131.0" width="0.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="477.1" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (81 samples, 0.17%)</title><rect x="474.7" y="131.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="477.7" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (81 samples, 0.17%)</title><rect x="474.7" y="115.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="477.7" y="126.0"></text>
</g>
<g>
<title>java.lang.String (26 samples, 0.05%)</title><rect x="474.7" y="99.0" width="0.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="477.7" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (55 samples, 0.11%)</title><rect x="475.3" y="99.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="478.3" y="110.0"></text>
</g>
<g>
<title>byte[] (55 samples, 0.11%)</title><rect x="475.3" y="83.0" width="1.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="478.3" y="94.0"></text>
</g>
<g>
<title>one.nio.http.Response (40 samples, 0.08%)</title><rect x="476.7" y="131.0" width="0.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="479.7" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (672 samples, 1.40%)</title><rect x="477.6" y="131.0" width="16.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="480.6" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (672 samples, 1.40%)</title><rect x="477.6" y="115.0" width="16.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="480.6" y="126.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (672 samples, 1.40%)</title><rect x="477.6" y="99.0" width="16.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="480.6" y="110.0"></text>
</g>
<g>
<title>char[] (441 samples, 0.92%)</title><rect x="477.6" y="83.0" width="10.8" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="480.6" y="94.0"></text>
</g>
<g>
<title>java.lang.String (101 samples, 0.21%)</title><rect x="488.4" y="83.0" width="2.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="491.4" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (130 samples, 0.27%)</title><rect x="490.9" y="83.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="493.9" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (130 samples, 0.27%)</title><rect x="490.9" y="67.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="493.9" y="78.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (130 samples, 0.27%)</title><rect x="490.9" y="51.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="493.9" y="62.0"></text>
</g>
<g>
<title>byte[] (130 samples, 0.27%)</title><rect x="490.9" y="35.0" width="3.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="493.9" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (142 samples, 0.29%)</title><rect x="494.1" y="131.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="497.1" y="142.0"></text>
</g>
<g>
<title>java.lang.String[] (142 samples, 0.29%)</title><rect x="494.1" y="115.0" width="3.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="497.1" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (37 samples, 0.08%)</title><rect x="497.6" y="131.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="500.6" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (37 samples, 0.08%)</title><rect x="497.6" y="115.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="500.6" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (37 samples, 0.08%)</title><rect x="497.6" y="99.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="500.6" y="110.0"></text>
</g>
<g>
<title>java.lang.String (17 samples, 0.04%)</title><rect x="497.6" y="83.0" width="0.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="500.6" y="94.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (20 samples, 0.04%)</title><rect x="498.0" y="83.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="501.0" y="94.0"></text>
</g>
<g>
<title>byte[] (20 samples, 0.04%)</title><rect x="498.0" y="67.0" width="0.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="501.0" y="78.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (149 samples, 0.31%)</title><rect x="498.5" y="147.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="501.5" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (149 samples, 0.31%)</title><rect x="498.5" y="131.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="501.5" y="142.0"></text>
</g>
<g>
<title>byte[] (149 samples, 0.31%)</title><rect x="498.5" y="115.0" width="3.6" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="501.5" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (38 samples, 0.08%)</title><rect x="502.1" y="147.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="505.1" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (38 samples, 0.08%)</title><rect x="502.1" y="131.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="505.1" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (38 samples, 0.08%)</title><rect x="502.1" y="115.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="505.1" y="126.0"></text>
</g>
<g>
<title>java.lang.String (16 samples, 0.03%)</title><rect x="502.1" y="99.0" width="0.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="505.1" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (22 samples, 0.05%)</title><rect x="502.5" y="99.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="505.5" y="110.0"></text>
</g>
<g>
<title>byte[] (22 samples, 0.05%)</title><rect x="502.5" y="83.0" width="0.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="505.5" y="94.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (48 samples, 0.10%)</title><rect x="503.1" y="147.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="506.1" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (48 samples, 0.10%)</title><rect x="503.1" y="131.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="506.1" y="142.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (48 samples, 0.10%)</title><rect x="503.1" y="115.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="506.1" y="126.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (48 samples, 0.10%)</title><rect x="503.1" y="99.0" width="1.2" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="506.1" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/TaskDAO.upsert (5,005 samples, 10.40%)</title><rect x="504.3" y="195.0" width="122.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="507.3" y="206.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/codearound/DAOByteOnlyConverter.readByteArray (2,384 samples, 4.95%)</title><rect x="504.3" y="179.0" width="58.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="507.3" y="190.0">ru/mai..</text>
</g>
<g>
<title>byte[] (730 samples, 1.52%)</title><rect x="504.3" y="163.0" width="17.8" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="507.3" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1,654 samples, 3.44%)</title><rect x="522.1" y="163.0" width="40.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="525.1" y="174.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,654 samples, 3.44%)</title><rect x="522.1" y="147.0" width="40.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="525.1" y="158.0">jav..</text>
</g>
<g>
<title>ru/mail/polis/service/codearound/DAOByteOnlyConverter.tuneBufToArray (2,621 samples, 5.44%)</title><rect x="562.7" y="179.0" width="64.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="565.7" y="190.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/service/codearound/DAOByteOnlyConverter.readByteArray (2,621 samples, 5.44%)</title><rect x="562.7" y="163.0" width="64.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="565.7" y="174.0">ru/mail..</text>
</g>
<g>
<title>byte[] (989 samples, 2.05%)</title><rect x="562.7" y="147.0" width="24.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="565.7" y="158.0">b..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1,632 samples, 3.39%)</title><rect x="586.9" y="147.0" width="40.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="589.9" y="158.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,632 samples, 3.39%)</title><rect x="586.9" y="131.0" width="40.0" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="589.9" y="142.0">jav..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (22,973 samples, 47.72%)</title><rect x="626.9" y="323.0" width="563.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="629.9" y="334.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (447 samples, 0.93%)</title><rect x="626.9" y="307.0" width="11.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="629.9" y="318.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (447 samples, 0.93%)</title><rect x="626.9" y="291.0" width="11.0" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="629.9" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (22,526 samples, 46.79%)</title><rect x="637.9" y="307.0" width="552.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="640.9" y="318.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (22,526 samples, 46.79%)</title><rect x="637.9" y="291.0" width="552.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="640.9" y="302.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (22,526 samples, 46.79%)</title><rect x="637.9" y="275.0" width="552.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="640.9" y="286.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (6,524 samples, 13.55%)</title><rect x="637.9" y="259.0" width="159.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="640.9" y="270.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (6,524 samples, 13.55%)</title><rect x="637.9" y="243.0" width="159.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="640.9" y="254.0">one/nio/http/HttpSer..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (5,158 samples, 10.71%)</title><rect x="637.9" y="227.0" width="126.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="640.9" y="238.0">RequestHandler0_..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1,251 samples, 2.60%)</title><rect x="637.9" y="211.0" width="30.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="640.9" y="222.0">on..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1,251 samples, 2.60%)</title><rect x="637.9" y="195.0" width="30.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="640.9" y="206.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (1,251 samples, 2.60%)</title><rect x="637.9" y="179.0" width="30.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="640.9" y="190.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,251 samples, 2.60%)</title><rect x="637.9" y="163.0" width="30.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="640.9" y="174.0">ja..</text>
</g>
<g>
<title>java.lang.String (582 samples, 1.21%)</title><rect x="637.9" y="147.0" width="14.2" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="640.9" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (669 samples, 1.39%)</title><rect x="652.1" y="147.0" width="16.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="655.1" y="158.0"></text>
</g>
<g>
<title>byte[] (669 samples, 1.39%)</title><rect x="652.1" y="131.0" width="16.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="655.1" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/AsyncService.entity (3,907 samples, 8.12%)</title><rect x="668.5" y="211.0" width="95.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="671.5" y="222.0">ru/mail/pol..</text>
</g>
<g>
<title>java/lang/String.getBytes (772 samples, 1.60%)</title><rect x="668.5" y="195.0" width="19.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="671.5" y="206.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (772 samples, 1.60%)</title><rect x="668.5" y="179.0" width="19.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="671.5" y="190.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (772 samples, 1.60%)</title><rect x="668.5" y="163.0" width="19.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="671.5" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (772 samples, 1.60%)</title><rect x="668.5" y="147.0" width="19.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="671.5" y="158.0"></text>
</g>
<g>
<title>byte[] (772 samples, 1.60%)</title><rect x="668.5" y="131.0" width="19.0" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="671.5" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (587 samples, 1.22%)</title><rect x="687.5" y="195.0" width="14.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="690.5" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (587 samples, 1.22%)</title><rect x="687.5" y="179.0" width="14.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="690.5" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/AsyncService$$Lambda$66/2021148767.get$Lambda (587 samples, 1.22%)</title><rect x="687.5" y="163.0" width="14.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="690.5" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.service.codearound.AsyncService$$Lambda$66 (587 samples, 1.22%)</title><rect x="687.5" y="147.0" width="14.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="690.5" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/AsyncService.runAsyncHandler (550 samples, 1.14%)</title><rect x="701.9" y="195.0" width="13.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="704.9" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (550 samples, 1.14%)</title><rect x="701.9" y="179.0" width="13.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="704.9" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (550 samples, 1.14%)</title><rect x="701.9" y="163.0" width="13.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="704.9" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/AsyncService$$Lambda$69/583081315.get$Lambda (550 samples, 1.14%)</title><rect x="701.9" y="147.0" width="13.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="704.9" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.service.codearound.AsyncService$$Lambda$69 (550 samples, 1.14%)</title><rect x="701.9" y="131.0" width="13.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="704.9" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/DAOByteOnlyConverter.tuneArrayToBuf (1,998 samples, 4.15%)</title><rect x="715.3" y="195.0" width="49.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="718.3" y="206.0">ru/m..</text>
</g>
<g>
<title>byte[] (784 samples, 1.63%)</title><rect x="715.3" y="179.0" width="19.2" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="718.3" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,214 samples, 2.52%)</title><rect x="734.5" y="179.0" width="29.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="737.5" y="190.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,214 samples, 2.52%)</title><rect x="734.5" y="163.0" width="29.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="737.5" y="174.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,214 samples, 2.52%)</title><rect x="734.5" y="147.0" width="29.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="737.5" y="158.0">ja..</text>
</g>
<g>
<title>one/nio/http/Request.getPath (1,366 samples, 2.84%)</title><rect x="764.3" y="227.0" width="33.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="767.3" y="238.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (1,366 samples, 2.84%)</title><rect x="764.3" y="211.0" width="33.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="767.3" y="222.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,366 samples, 2.84%)</title><rect x="764.3" y="195.0" width="33.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="767.3" y="206.0">ja..</text>
</g>
<g>
<title>java.lang.String (581 samples, 1.21%)</title><rect x="764.3" y="179.0" width="14.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="767.3" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (785 samples, 1.63%)</title><rect x="778.5" y="179.0" width="19.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="781.5" y="190.0"></text>
</g>
<g>
<title>byte[] (785 samples, 1.63%)</title><rect x="778.5" y="163.0" width="19.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="781.5" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6,034 samples, 12.53%)</title><rect x="797.8" y="259.0" width="147.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="800.8" y="270.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>one.nio.http.Request (891 samples, 1.85%)</title><rect x="797.8" y="243.0" width="21.8" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="800.8" y="254.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2,017 samples, 4.19%)</title><rect x="819.6" y="243.0" width="49.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="822.6" y="254.0">one/n..</text>
</g>
<g>
<title>java.lang.String[] (2,017 samples, 4.19%)</title><rect x="819.6" y="227.0" width="49.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="822.6" y="238.0">java...</text>
</g>
<g>
<title>one/nio/util/Utf8.read (3,126 samples, 6.49%)</title><rect x="869.1" y="243.0" width="76.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="872.1" y="254.0">one/nio/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (3,126 samples, 6.49%)</title><rect x="869.1" y="227.0" width="76.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="872.1" y="238.0">one/nio/..</text>
</g>
<g>
<title>char[] (1,693 samples, 3.52%)</title><rect x="869.1" y="211.0" width="41.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="872.1" y="222.0">cha..</text>
</g>
<g>
<title>java.lang.String (614 samples, 1.28%)</title><rect x="910.6" y="211.0" width="15.0" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="913.6" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (819 samples, 1.70%)</title><rect x="925.6" y="211.0" width="20.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="928.6" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (819 samples, 1.70%)</title><rect x="925.6" y="195.0" width="20.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="928.6" y="206.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (819 samples, 1.70%)</title><rect x="925.6" y="179.0" width="20.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="928.6" y="190.0"></text>
</g>
<g>
<title>byte[] (819 samples, 1.70%)</title><rect x="925.6" y="163.0" width="20.1" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="928.6" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (655 samples, 1.36%)</title><rect x="945.7" y="259.0" width="16.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="948.7" y="270.0"></text>
</g>
<g>
<title>byte[] (655 samples, 1.36%)</title><rect x="945.7" y="243.0" width="16.0" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="948.7" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1,026 samples, 2.13%)</title><rect x="961.7" y="259.0" width="25.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="964.7" y="270.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (1,026 samples, 2.13%)</title><rect x="961.7" y="243.0" width="25.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="964.7" y="254.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,026 samples, 2.13%)</title><rect x="961.7" y="227.0" width="25.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="964.7" y="238.0">j..</text>
</g>
<g>
<title>java.lang.String (478 samples, 0.99%)</title><rect x="961.7" y="211.0" width="11.8" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="964.7" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (548 samples, 1.14%)</title><rect x="973.5" y="211.0" width="13.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="976.5" y="222.0"></text>
</g>
<g>
<title>byte[] (548 samples, 1.14%)</title><rect x="973.5" y="195.0" width="13.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="976.5" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8,287 samples, 17.21%)</title><rect x="986.9" y="259.0" width="203.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="989.9" y="270.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>one/nio/util/Utf8.read (8,287 samples, 17.21%)</title><rect x="986.9" y="243.0" width="203.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="989.9" y="254.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>char[] (3,924 samples, 8.15%)</title><rect x="986.9" y="227.0" width="96.2" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="989.9" y="238.0">char[]</text>
</g>
<g>
<title>java.lang.String (1,524 samples, 3.17%)</title><rect x="1083.1" y="227.0" width="37.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1086.1" y="238.0">jav..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,839 samples, 5.90%)</title><rect x="1120.4" y="227.0" width="69.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1123.4" y="238.0">java/la..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,839 samples, 5.90%)</title><rect x="1120.4" y="211.0" width="69.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1123.4" y="222.0">java/la..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2,839 samples, 5.90%)</title><rect x="1120.4" y="195.0" width="69.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1123.4" y="206.0">java/la..</text>
</g>
<g>
<title>byte[] (2,839 samples, 5.90%)</title><rect x="1120.4" y="179.0" width="69.6" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1123.4" y="190.0">byte[]</text>
</g>
</g>
</svg>
