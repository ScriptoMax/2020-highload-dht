<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Single node CPU</text>
<text id="details" x="10" y="949"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="949"> </text>
<g id="frames">
<g>
<title>all (4,447 samples, 100.00%)</title><rect x="10.0" y="915.0" width="1180.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="13.0" y="926.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.09%)</title><rect x="10.0" y="899.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (4 samples, 0.09%)</title><rect x="10.0" y="883.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (4 samples, 0.09%)</title><rect x="10.0" y="867.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.02%)</title><rect x="10.0" y="851.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (2 samples, 0.04%)</title><rect x="10.3" y="851.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.3" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.02%)</title><rect x="10.3" y="835.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.3" y="846.0"></text>
</g>
<g>
<title>to_abstime(timespec*, long, bool) (1 samples, 0.02%)</title><rect x="10.5" y="835.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="13.5" y="846.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.02%)</title><rect x="10.8" y="851.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.8" y="862.0"></text>
</g>
<g>
<title>[unknown_Java] (4 samples, 0.09%)</title><rect x="11.1" y="899.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="14.1" y="910.0"></text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 0.09%)</title><rect x="11.1" y="883.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="14.1" y="894.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.09%)</title><rect x="11.1" y="867.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="14.1" y="878.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.09%)</title><rect x="11.1" y="851.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="14.1" y="862.0"></text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 0.09%)</title><rect x="11.1" y="835.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="14.1" y="846.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.09%)</title><rect x="11.1" y="819.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="14.1" y="830.0"></text>
</g>
<g>
<title>futex_wake (4 samples, 0.09%)</title><rect x="11.1" y="803.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="14.1" y="814.0"></text>
</g>
<g>
<title>wake_up_q (4 samples, 0.09%)</title><rect x="11.1" y="787.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="14.1" y="798.0"></text>
</g>
<g>
<title>try_to_wake_up (4 samples, 0.09%)</title><rect x="11.1" y="771.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="14.1" y="782.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (4 samples, 0.09%)</title><rect x="11.1" y="755.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="14.1" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (4 samples, 0.09%)</title><rect x="12.1" y="899.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="15.1" y="910.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.04%)</title><rect x="12.7" y="883.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="15.7" y="894.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.04%)</title><rect x="12.7" y="867.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="15.7" y="878.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.02%)</title><rect x="12.9" y="851.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="15.9" y="862.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.02%)</title><rect x="12.9" y="835.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="15.9" y="846.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.02%)</title><rect x="12.9" y="819.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="15.9" y="830.0"></text>
</g>
<g>
<title>hrtimer_cancel (1 samples, 0.02%)</title><rect x="12.9" y="803.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="15.9" y="814.0"></text>
</g>
<g>
<title>hrtimer_try_to_cancel (1 samples, 0.02%)</title><rect x="12.9" y="787.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="15.9" y="798.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.02%)</title><rect x="12.9" y="771.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="15.9" y="782.0"></text>
</g>
<g>
<title>java/lang/Thread.run (3,218 samples, 72.36%)</title><rect x="13.2" y="899.0" width="853.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.2" y="910.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3,218 samples, 72.36%)</title><rect x="13.2" y="883.0" width="853.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.2" y="894.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3,218 samples, 72.36%)</title><rect x="13.2" y="867.0" width="853.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="16.2" y="878.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (9 samples, 0.20%)</title><rect x="13.4" y="851.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.20%)</title><rect x="13.4" y="835.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="16.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.20%)</title><rect x="13.4" y="819.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.4" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/AsyncService$$Lambda$67/1598457346.run (1 samples, 0.02%)</title><rect x="15.6" y="803.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (222 samples, 4.99%)</title><rect x="15.8" y="851.0" width="58.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.8" y="862.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (209 samples, 4.70%)</title><rect x="19.3" y="835.0" width="55.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.3" y="846.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.dequeue (1 samples, 0.02%)</title><rect x="22.5" y="819.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="25.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.02%)</title><rect x="22.5" y="803.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="25.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.02%)</title><rect x="22.5" y="787.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="25.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.02%)</title><rect x="22.5" y="771.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="25.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.02%)</title><rect x="22.5" y="755.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="25.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (168 samples, 3.78%)</title><rect x="22.7" y="819.0" width="44.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.7" y="830.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.04%)</title><rect x="23.0" y="803.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.04%)</title><rect x="23.0" y="787.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.02%)</title><rect x="23.3" y="771.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.02%)</title><rect x="23.3" y="755.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.02%)</title><rect x="23.3" y="739.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (4 samples, 0.09%)</title><rect x="23.5" y="803.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="26.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (4 samples, 0.09%)</title><rect x="23.5" y="787.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (158 samples, 3.55%)</title><rect x="24.6" y="803.0" width="41.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="27.6" y="814.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (158 samples, 3.55%)</title><rect x="24.6" y="787.0" width="41.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.6" y="798.0">jdk..</text>
</g>
<g>
<title>Unsafe_Park (68 samples, 1.53%)</title><rect x="25.4" y="771.0" width="18.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="28.4" y="782.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.02%)</title><rect x="27.2" y="755.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="30.2" y="766.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (16 samples, 0.36%)</title><rect x="27.5" y="755.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="30.5" y="766.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.04%)</title><rect x="29.6" y="739.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="32.6" y="750.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.11%)</title><rect x="30.2" y="739.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="33.2" y="750.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.02%)</title><rect x="31.5" y="739.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="34.5" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.04%)</title><rect x="31.8" y="755.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="34.8" y="766.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (2 samples, 0.04%)</title><rect x="32.3" y="755.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="35.3" y="766.0"></text>
</g>
<g>
<title>__lll_unlock_wake (29 samples, 0.65%)</title><rect x="32.8" y="755.0" width="7.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="35.8" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (26 samples, 0.58%)</title><rect x="33.6" y="739.0" width="6.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="36.6" y="750.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.02%)</title><rect x="33.6" y="723.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="36.6" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (25 samples, 0.56%)</title><rect x="33.9" y="723.0" width="6.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="36.9" y="734.0"></text>
</g>
<g>
<title>__x64_sys_futex (7 samples, 0.16%)</title><rect x="38.7" y="707.0" width="1.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="41.7" y="718.0"></text>
</g>
<g>
<title>do_futex (6 samples, 0.13%)</title><rect x="38.9" y="691.0" width="1.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="41.9" y="702.0"></text>
</g>
<g>
<title>futex_wake (3 samples, 0.07%)</title><rect x="39.2" y="675.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="42.2" y="686.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.02%)</title><rect x="39.7" y="659.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="42.7" y="670.0"></text>
</g>
<g>
<title>hash_futex (1 samples, 0.02%)</title><rect x="40.0" y="675.0" width="0.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="43.0" y="686.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.02%)</title><rect x="40.2" y="675.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="43.2" y="686.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.02%)</title><rect x="40.5" y="755.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="43.5" y="766.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="40.8" y="755.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="43.8" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.02%)</title><rect x="41.0" y="755.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="44.0" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.02%)</title><rect x="41.3" y="755.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="44.3" y="766.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (2 samples, 0.04%)</title><rect x="41.6" y="755.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="44.6" y="766.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (4 samples, 0.09%)</title><rect x="42.1" y="755.0" width="1.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="45.1" y="766.0"></text>
</g>
<g>
<title>pthread_mutex_unlock@plt (1 samples, 0.02%)</title><rect x="43.2" y="755.0" width="0.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="46.2" y="766.0"></text>
</g>
<g>
<title>[unknown] (87 samples, 1.96%)</title><rect x="43.4" y="771.0" width="23.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="46.4" y="782.0">[..</text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (1 samples, 0.02%)</title><rect x="43.4" y="755.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="46.4" y="766.0"></text>
</g>
<g>
<title>__pthread_cleanup_pop (7 samples, 0.16%)</title><rect x="43.7" y="755.0" width="1.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="46.7" y="766.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (10 samples, 0.22%)</title><rect x="45.6" y="755.0" width="2.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="48.6" y="766.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.04%)</title><rect x="48.2" y="755.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="51.2" y="766.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.04%)</title><rect x="48.7" y="755.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="51.7" y="766.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (4 samples, 0.09%)</title><rect x="49.3" y="755.0" width="1.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="52.3" y="766.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (61 samples, 1.37%)</title><rect x="50.3" y="755.0" width="16.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="53.3" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (39 samples, 0.88%)</title><rect x="56.2" y="739.0" width="10.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="59.2" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (39 samples, 0.88%)</title><rect x="56.2" y="723.0" width="10.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="59.2" y="734.0"></text>
</g>
<g>
<title>__x64_sys_futex (21 samples, 0.47%)</title><rect x="60.7" y="707.0" width="5.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="63.7" y="718.0"></text>
</g>
<g>
<title>do_futex (21 samples, 0.47%)</title><rect x="60.7" y="691.0" width="5.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="63.7" y="702.0"></text>
</g>
<g>
<title>futex_wait (18 samples, 0.40%)</title><rect x="61.2" y="675.0" width="4.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="64.2" y="686.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.02%)</title><rect x="61.2" y="659.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="64.2" y="670.0"></text>
</g>
<g>
<title>futex_wait_queue_me (8 samples, 0.18%)</title><rect x="61.5" y="659.0" width="2.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="64.5" y="670.0"></text>
</g>
<g>
<title>plist_add (1 samples, 0.02%)</title><rect x="62.5" y="643.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="65.5" y="654.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.07%)</title><rect x="62.8" y="643.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="65.8" y="654.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.07%)</title><rect x="62.8" y="627.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="65.8" y="638.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.02%)</title><rect x="63.3" y="611.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="66.3" y="622.0"></text>
</g>
<g>
<title>futex_wait_setup (3 samples, 0.07%)</title><rect x="63.6" y="659.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="66.6" y="670.0"></text>
</g>
<g>
<title>get_futex_value_locked (1 samples, 0.02%)</title><rect x="64.1" y="643.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="67.1" y="654.0"></text>
</g>
<g>
<title>get_futex_value_locked (1 samples, 0.02%)</title><rect x="64.4" y="659.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="67.4" y="670.0"></text>
</g>
<g>
<title>hash_futex (4 samples, 0.09%)</title><rect x="64.7" y="659.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="67.7" y="670.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.02%)</title><rect x="65.7" y="659.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="68.7" y="670.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.02%)</title><rect x="66.0" y="675.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="69.0" y="686.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.02%)</title><rect x="66.3" y="707.0" width="0.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="69.3" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.07%)</title><rect x="66.5" y="803.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="69.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.02%)</title><rect x="67.3" y="819.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="70.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.02%)</title><rect x="67.3" y="803.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.02%)</title><rect x="67.3" y="787.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="70.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.02%)</title><rect x="67.3" y="771.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="70.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.02%)</title><rect x="67.3" y="755.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="70.3" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="67.3" y="739.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.3" y="750.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.02%)</title><rect x="67.3" y="723.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="70.3" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.02%)</title><rect x="67.3" y="707.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="70.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (27 samples, 0.61%)</title><rect x="67.6" y="819.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="70.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (27 samples, 0.61%)</title><rect x="67.6" y="803.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="70.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (27 samples, 0.61%)</title><rect x="67.6" y="787.0" width="7.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="70.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (27 samples, 0.61%)</title><rect x="67.6" y="771.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="70.6" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (23 samples, 0.52%)</title><rect x="68.6" y="755.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="71.6" y="766.0"></text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 0.09%)</title><rect x="68.6" y="739.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="71.6" y="750.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.02%)</title><rect x="69.2" y="723.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="72.2" y="734.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.02%)</title><rect x="69.4" y="723.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="72.4" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_signal (19 samples, 0.43%)</title><rect x="69.7" y="739.0" width="5.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="72.7" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (16 samples, 0.36%)</title><rect x="70.5" y="723.0" width="4.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="73.5" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (16 samples, 0.36%)</title><rect x="70.5" y="707.0" width="4.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="73.5" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (13 samples, 0.29%)</title><rect x="71.3" y="691.0" width="3.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="74.3" y="702.0"></text>
</g>
<g>
<title>do_futex (13 samples, 0.29%)</title><rect x="71.3" y="675.0" width="3.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="74.3" y="686.0"></text>
</g>
<g>
<title>futex_wake (13 samples, 0.29%)</title><rect x="71.3" y="659.0" width="3.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="74.3" y="670.0"></text>
</g>
<g>
<title>wake_q_add (1 samples, 0.02%)</title><rect x="71.6" y="643.0" width="0.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="74.6" y="654.0"></text>
</g>
<g>
<title>wake_up_q (11 samples, 0.25%)</title><rect x="71.8" y="643.0" width="2.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="74.8" y="654.0"></text>
</g>
<g>
<title>try_to_wake_up (11 samples, 0.25%)</title><rect x="71.8" y="627.0" width="2.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="74.8" y="638.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (11 samples, 0.25%)</title><rect x="71.8" y="611.0" width="2.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="74.8" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/AsyncService$$Lambda$67/1598457346.run (2,986 samples, 67.15%)</title><rect x="74.7" y="851.0" width="792.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="77.7" y="862.0">ru/mail/polis/service/codearound/AsyncService$$Lambda$67/1598457346.run</text>
</g>
<g>
<title>ru/mail/polis/service/codearound/AsyncService.lambda$runAsyncHandler$4 (2,986 samples, 67.15%)</title><rect x="74.7" y="835.0" width="792.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="77.7" y="846.0">ru/mail/polis/service/codearound/AsyncService.lambda$runAsyncHandler$4</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,357 samples, 30.51%)</title><rect x="74.7" y="819.0" width="360.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="77.7" y="830.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="75.0" y="803.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="78.0" y="814.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.02%)</title><rect x="75.0" y="787.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="78.0" y="798.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.02%)</title><rect x="75.0" y="771.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="78.0" y="782.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.02%)</title><rect x="75.0" y="755.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="78.0" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,344 samples, 30.22%)</title><rect x="75.3" y="803.0" width="356.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="78.3" y="814.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (31 samples, 0.70%)</title><rect x="76.1" y="787.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="79.1" y="798.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.02%)</title><rect x="80.3" y="771.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="83.3" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="80.3" y="755.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="83.3" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="80.3" y="739.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="83.3" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="80.3" y="723.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="83.3" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="80.3" y="707.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="83.3" y="718.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.02%)</title><rect x="80.3" y="691.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="83.3" y="702.0"></text>
</g>
<g>
<title>ObjectSampler::is_created() (1 samples, 0.02%)</title><rect x="80.3" y="675.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="83.3" y="686.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (14 samples, 0.31%)</title><rect x="80.6" y="771.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="83.6" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (14 samples, 0.31%)</title><rect x="80.6" y="755.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="83.6" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (14 samples, 0.31%)</title><rect x="80.6" y="739.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="83.6" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (14 samples, 0.31%)</title><rect x="80.6" y="723.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.6" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (14 samples, 0.31%)</title><rect x="80.6" y="707.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="83.6" y="718.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="83.2" y="691.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="86.2" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.07%)</title><rect x="83.5" y="691.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="86.5" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,310 samples, 29.46%)</title><rect x="84.3" y="787.0" width="347.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="87.3" y="798.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,310 samples, 29.46%)</title><rect x="84.3" y="771.0" width="347.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="87.3" y="782.0">one/nio/net/Session.write</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="85.4" y="755.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="88.4" y="766.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.02%)</title><rect x="85.4" y="739.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="88.4" y="750.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.02%)</title><rect x="85.4" y="723.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="88.4" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,305 samples, 29.35%)</title><rect x="85.6" y="755.0" width="346.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="88.6" y="766.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,305 samples, 29.35%)</title><rect x="85.6" y="739.0" width="346.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="88.6" y="750.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (37 samples, 0.83%)</title><rect x="89.3" y="723.0" width="9.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="92.3" y="734.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.04%)</title><rect x="94.9" y="707.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="97.9" y="718.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.02%)</title><rect x="95.4" y="707.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="98.4" y="718.0"></text>
</g>
<g>
<title>__memmove_ssse3 (3 samples, 0.07%)</title><rect x="95.7" y="707.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="98.7" y="718.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (10 samples, 0.22%)</title><rect x="96.5" y="707.0" width="2.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="99.5" y="718.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.02%)</title><rect x="98.4" y="691.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="101.4" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.04%)</title><rect x="98.6" y="691.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="101.6" y="702.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (7 samples, 0.16%)</title><rect x="99.2" y="723.0" width="1.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="102.2" y="734.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (3 samples, 0.07%)</title><rect x="101.0" y="723.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="104.0" y="734.0"></text>
</g>
<g>
<title>__libc_send (1,239 samples, 27.86%)</title><rect x="101.8" y="723.0" width="328.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="104.8" y="734.0">__libc_send</text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.02%)</title><rect x="108.4" y="707.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="111.4" y="718.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="108.4" y="691.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="111.4" y="702.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.02%)</title><rect x="108.4" y="675.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="111.4" y="686.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="108.4" y="659.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="111.4" y="670.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.02%)</title><rect x="108.4" y="643.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="111.4" y="654.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.02%)</title><rect x="108.4" y="627.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="111.4" y="638.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.02%)</title><rect x="108.4" y="611.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="111.4" y="622.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,213 samples, 27.28%)</title><rect x="108.7" y="707.0" width="321.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="111.7" y="718.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>__x64_sys_sendto (7 samples, 0.16%)</title><rect x="108.7" y="691.0" width="1.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="111.7" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (1,206 samples, 27.12%)</title><rect x="110.6" y="691.0" width="320.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="113.6" y="702.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (1,152 samples, 25.91%)</title><rect x="124.9" y="675.0" width="305.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="127.9" y="686.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (1,142 samples, 25.68%)</title><rect x="125.2" y="659.0" width="303.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="128.2" y="670.0">__sys_sendto</text>
</g>
<g>
<title>fput (2 samples, 0.04%)</title><rect x="127.3" y="643.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="130.3" y="654.0"></text>
</g>
<g>
<title>inet_sendmsg (3 samples, 0.07%)</title><rect x="127.8" y="643.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="130.8" y="654.0"></text>
</g>
<g>
<title>sock_sendmsg (1,104 samples, 24.83%)</title><rect x="128.6" y="643.0" width="293.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="131.6" y="654.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (2 samples, 0.04%)</title><rect x="129.4" y="627.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="132.4" y="638.0"></text>
</g>
<g>
<title>inet_sendmsg (1,080 samples, 24.29%)</title><rect x="129.9" y="627.0" width="286.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="132.9" y="638.0">inet_sendmsg</text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.02%)</title><rect x="131.8" y="611.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="134.8" y="622.0"></text>
</g>
<g>
<title>release_sock (5 samples, 0.11%)</title><rect x="132.1" y="611.0" width="1.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="135.1" y="622.0"></text>
</g>
<g>
<title>tcp_sendmsg (1,066 samples, 23.97%)</title><rect x="133.4" y="611.0" width="282.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="136.4" y="622.0">tcp_sendmsg</text>
</g>
<g>
<title>__check_object_size (1 samples, 0.02%)</title><rect x="134.4" y="595.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="137.4" y="606.0"></text>
</g>
<g>
<title>_copy_from_iter_full (1 samples, 0.02%)</title><rect x="134.7" y="595.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="137.7" y="606.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.02%)</title><rect x="135.0" y="595.0" width="0.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="138.0" y="606.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (2 samples, 0.04%)</title><rect x="135.2" y="595.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="138.2" y="606.0"></text>
</g>
<g>
<title>lock_sock_nested (8 samples, 0.18%)</title><rect x="135.8" y="595.0" width="2.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="138.8" y="606.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (5 samples, 0.11%)</title><rect x="135.8" y="579.0" width="1.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="138.8" y="590.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.02%)</title><rect x="137.1" y="579.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="140.1" y="590.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.04%)</title><rect x="137.4" y="579.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="140.4" y="590.0"></text>
</g>
<g>
<title>release_sock (3 samples, 0.07%)</title><rect x="137.9" y="595.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="140.9" y="606.0"></text>
</g>
<g>
<title>skb_entail (1 samples, 0.02%)</title><rect x="138.7" y="595.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="141.7" y="606.0"></text>
</g>
<g>
<title>skb_put (2 samples, 0.04%)</title><rect x="139.0" y="595.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="142.0" y="606.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (3 samples, 0.07%)</title><rect x="139.5" y="595.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="142.5" y="606.0"></text>
</g>
<g>
<title>tcp_send_mss (2 samples, 0.04%)</title><rect x="140.3" y="595.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="143.3" y="606.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1,033 samples, 23.23%)</title><rect x="140.8" y="595.0" width="274.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="143.8" y="606.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (6 samples, 0.13%)</title><rect x="144.5" y="579.0" width="1.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="147.5" y="590.0"></text>
</g>
<g>
<title>__virt_addr_valid (4 samples, 0.09%)</title><rect x="145.1" y="563.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="148.1" y="574.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.02%)</title><rect x="146.1" y="579.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="149.1" y="590.0"></text>
</g>
<g>
<title>_copy_from_iter_full (7 samples, 0.16%)</title><rect x="146.4" y="579.0" width="1.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="149.4" y="590.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (4 samples, 0.09%)</title><rect x="146.4" y="563.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="149.4" y="574.0"></text>
</g>
<g>
<title>copyin (1 samples, 0.02%)</title><rect x="147.4" y="563.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="150.4" y="574.0"></text>
</g>
<g>
<title>iov_iter_advance (2 samples, 0.04%)</title><rect x="147.7" y="563.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="150.7" y="574.0"></text>
</g>
<g>
<title>check_stack_object (2 samples, 0.04%)</title><rect x="148.2" y="579.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="151.2" y="590.0"></text>
</g>
<g>
<title>sk_forced_mem_schedule (4 samples, 0.09%)</title><rect x="148.8" y="579.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="151.8" y="590.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (48 samples, 1.08%)</title><rect x="149.8" y="579.0" width="12.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="152.8" y="590.0"></text>
</g>
<g>
<title>__alloc_skb (31 samples, 0.70%)</title><rect x="151.4" y="563.0" width="8.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="154.4" y="574.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.54 (11 samples, 0.25%)</title><rect x="153.3" y="547.0" width="2.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="156.3" y="558.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (8 samples, 0.18%)</title><rect x="153.8" y="531.0" width="2.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="156.8" y="542.0"></text>
</g>
<g>
<title>__slab_alloc (3 samples, 0.07%)</title><rect x="155.1" y="515.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="158.1" y="526.0"></text>
</g>
<g>
<title>kmalloc_slab (1 samples, 0.02%)</title><rect x="155.9" y="531.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="158.9" y="542.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (12 samples, 0.27%)</title><rect x="156.2" y="547.0" width="3.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="159.2" y="558.0"></text>
</g>
<g>
<title>__slab_alloc (3 samples, 0.07%)</title><rect x="158.6" y="531.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="161.6" y="542.0"></text>
</g>
<g>
<title>___slab_alloc (2 samples, 0.04%)</title><rect x="158.9" y="515.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="161.9" y="526.0"></text>
</g>
<g>
<title>new_slab (2 samples, 0.04%)</title><rect x="158.9" y="499.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="161.9" y="510.0"></text>
</g>
<g>
<title>policy_node (1 samples, 0.02%)</title><rect x="159.1" y="483.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="162.1" y="494.0"></text>
</g>
<g>
<title>should_failslab (1 samples, 0.02%)</title><rect x="159.4" y="547.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="162.4" y="558.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.54 (1 samples, 0.02%)</title><rect x="159.7" y="563.0" width="0.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="162.7" y="574.0"></text>
</g>
<g>
<title>ksize (10 samples, 0.22%)</title><rect x="159.9" y="563.0" width="2.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="162.9" y="574.0"></text>
</g>
<g>
<title>skb_entail (8 samples, 0.18%)</title><rect x="162.6" y="579.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="165.6" y="590.0"></text>
</g>
<g>
<title>tcp_chrono_start (3 samples, 0.07%)</title><rect x="163.9" y="563.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="166.9" y="574.0"></text>
</g>
<g>
<title>skb_put (1 samples, 0.02%)</title><rect x="164.7" y="579.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="167.7" y="590.0"></text>
</g>
<g>
<title>tcp_current_mss (2 samples, 0.04%)</title><rect x="165.0" y="579.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="168.0" y="590.0"></text>
</g>
<g>
<title>tcp_push (918 samples, 20.64%)</title><rect x="165.5" y="579.0" width="243.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="168.5" y="590.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (915 samples, 20.58%)</title><rect x="166.0" y="563.0" width="242.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="169.0" y="574.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>__tcp_transmit_skb (2 samples, 0.04%)</title><rect x="166.3" y="547.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="169.3" y="558.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (4 samples, 0.09%)</title><rect x="166.8" y="547.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="169.8" y="558.0"></text>
</g>
<g>
<title>tcp_write_xmit (908 samples, 20.42%)</title><rect x="167.9" y="547.0" width="240.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="170.9" y="558.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.02%)</title><rect x="175.3" y="531.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="178.3" y="542.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (832 samples, 18.71%)</title><rect x="175.6" y="531.0" width="220.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="178.6" y="542.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__skb_clone (2 samples, 0.04%)</title><rect x="182.7" y="515.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="185.7" y="526.0"></text>
</g>
<g>
<title>__tcp_select_window (3 samples, 0.07%)</title><rect x="183.3" y="515.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="186.3" y="526.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (1 samples, 0.02%)</title><rect x="184.1" y="515.0" width="0.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="187.1" y="526.0"></text>
</g>
<g>
<title>ip_queue_xmit (783 samples, 17.61%)</title><rect x="184.3" y="515.0" width="207.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="187.3" y="526.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (771 samples, 17.34%)</title><rect x="185.4" y="499.0" width="204.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="188.4" y="510.0">__ip_queue_xmit</text>
</g>
<g>
<title>__ip_local_out (1 samples, 0.02%)</title><rect x="187.3" y="483.0" width="0.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="190.3" y="494.0"></text>
</g>
<g>
<title>__sk_dst_check (1 samples, 0.02%)</title><rect x="187.5" y="483.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="190.5" y="494.0"></text>
</g>
<g>
<title>ip_local_out (757 samples, 17.02%)</title><rect x="187.8" y="483.0" width="200.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="190.8" y="494.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (165 samples, 3.71%)</title><rect x="188.0" y="467.0" width="43.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="191.0" y="478.0">__ip..</text>
</g>
<g>
<title>ip_send_check (1 samples, 0.02%)</title><rect x="189.4" y="451.0" width="0.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="192.4" y="462.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (4 samples, 0.09%)</title><rect x="189.6" y="451.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="192.6" y="462.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag?[nf_defrag_ipv4] (7 samples, 0.16%)</title><rect x="190.7" y="451.0" width="1.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="193.7" y="462.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack] (7 samples, 0.16%)</title><rect x="192.6" y="451.0" width="1.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="195.6" y="462.0"></text>
</g>
<g>
<title>nf_hook_slow (138 samples, 3.10%)</title><rect x="194.4" y="451.0" width="36.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="197.4" y="462.0">nf_..</text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (1 samples, 0.02%)</title><rect x="195.2" y="435.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="198.2" y="446.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (18 samples, 0.40%)</title><rect x="195.5" y="435.0" width="4.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="198.5" y="446.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (18 samples, 0.40%)</title><rect x="195.5" y="419.0" width="4.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="198.5" y="430.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack] (101 samples, 2.27%)</title><rect x="200.3" y="435.0" width="26.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="203.3" y="446.0">i..</text>
</g>
<g>
<title>__nf_ct_l4proto_find?[nf_conntrack] (3 samples, 0.07%)</title><rect x="200.3" y="419.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="203.3" y="430.0"></text>
</g>
<g>
<title>get_l4proto?[nf_conntrack] (3 samples, 0.07%)</title><rect x="201.1" y="419.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="204.1" y="430.0"></text>
</g>
<g>
<title>hash_conntrack_raw?[nf_conntrack] (2 samples, 0.04%)</title><rect x="201.8" y="419.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="204.8" y="430.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (87 samples, 1.96%)</title><rect x="202.4" y="419.0" width="23.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="205.4" y="430.0">n..</text>
</g>
<g>
<title>__nf_conntrack_find_get?[nf_conntrack] (19 samples, 0.43%)</title><rect x="204.5" y="403.0" width="5.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="207.5" y="414.0"></text>
</g>
<g>
<title>__nf_ct_l4proto_find?[nf_conntrack] (3 samples, 0.07%)</title><rect x="209.5" y="403.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="212.5" y="414.0"></text>
</g>
<g>
<title>__nf_ct_refresh_acct?[nf_conntrack] (3 samples, 0.07%)</title><rect x="210.3" y="403.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="213.3" y="414.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.02%)</title><rect x="211.1" y="403.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="214.1" y="414.0"></text>
</g>
<g>
<title>get_l4proto?[nf_conntrack] (4 samples, 0.09%)</title><rect x="211.4" y="403.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="214.4" y="414.0"></text>
</g>
<g>
<title>hash_conntrack_raw?[nf_conntrack] (3 samples, 0.07%)</title><rect x="212.5" y="403.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="215.5" y="414.0"></text>
</g>
<g>
<title>nf_ct_get_tuple?[nf_conntrack] (5 samples, 0.11%)</title><rect x="213.3" y="403.0" width="1.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="216.3" y="414.0"></text>
</g>
<g>
<title>tcp_in_window?[nf_conntrack] (3 samples, 0.07%)</title><rect x="214.6" y="403.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="217.6" y="414.0"></text>
</g>
<g>
<title>tcp_packet?[nf_conntrack] (38 samples, 0.85%)</title><rect x="215.4" y="403.0" width="10.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="218.4" y="414.0"></text>
</g>
<g>
<title>__nf_ct_refresh_acct?[nf_conntrack] (1 samples, 0.02%)</title><rect x="219.1" y="387.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="222.1" y="398.0"></text>
</g>
<g>
<title>nf_ct_seq_offset?[nf_conntrack] (2 samples, 0.04%)</title><rect x="219.4" y="387.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="222.4" y="398.0"></text>
</g>
<g>
<title>tcp_in_window?[nf_conntrack] (21 samples, 0.47%)</title><rect x="219.9" y="387.0" width="5.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="222.9" y="398.0"></text>
</g>
<g>
<title>nf_ct_seq_offset?[nf_conntrack] (7 samples, 0.16%)</title><rect x="223.6" y="371.0" width="1.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="226.6" y="382.0"></text>
</g>
<g>
<title>tcp_packet?[nf_conntrack] (6 samples, 0.13%)</title><rect x="225.5" y="419.0" width="1.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="228.5" y="430.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (1 samples, 0.02%)</title><rect x="227.1" y="435.0" width="0.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="230.1" y="446.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn?[nf_nat_ipv4] (2 samples, 0.04%)</title><rect x="227.3" y="435.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="230.3" y="446.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn?[nf_nat_ipv4] (12 samples, 0.27%)</title><rect x="227.9" y="435.0" width="3.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="230.9" y="446.0"></text>
</g>
<g>
<title>nf_nat_inet_fn?[nf_nat] (4 samples, 0.09%)</title><rect x="229.2" y="419.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="232.2" y="430.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn?[nf_nat_ipv4] (3 samples, 0.07%)</title><rect x="230.2" y="419.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="233.2" y="430.0"></text>
</g>
<g>
<title>nf_nat_inet_fn?[nf_nat] (2 samples, 0.04%)</title><rect x="230.2" y="403.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="233.2" y="414.0"></text>
</g>
<g>
<title>nf_nat_packet?[nf_nat] (1 samples, 0.02%)</title><rect x="230.8" y="403.0" width="0.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="233.8" y="414.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn?[nf_nat_ipv4] (3 samples, 0.07%)</title><rect x="231.0" y="451.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="234.0" y="462.0"></text>
</g>
<g>
<title>ip_finish_output (1 samples, 0.02%)</title><rect x="231.8" y="467.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="234.8" y="478.0"></text>
</g>
<g>
<title>ip_output (586 samples, 13.18%)</title><rect x="232.1" y="467.0" width="155.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="235.1" y="478.0">ip_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.02%)</title><rect x="232.6" y="451.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="235.6" y="462.0"></text>
</g>
<g>
<title>ip_finish_output (563 samples, 12.66%)</title><rect x="232.9" y="451.0" width="149.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="235.9" y="462.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (11 samples, 0.25%)</title><rect x="235.0" y="435.0" width="2.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="238.0" y="446.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.02%)</title><rect x="237.9" y="435.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="240.9" y="446.0"></text>
</g>
<g>
<title>ip_finish_output2 (543 samples, 12.21%)</title><rect x="238.2" y="435.0" width="144.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="241.2" y="446.0">ip_finish_output2</text>
</g>
<g>
<title>__local_bh_enable_ip (463 samples, 10.41%)</title><rect x="241.6" y="419.0" width="122.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="244.6" y="430.0">__local_bh_enab..</text>
</g>
<g>
<title>do_softirq.part.21 (463 samples, 10.41%)</title><rect x="241.6" y="403.0" width="122.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="244.6" y="414.0">do_softirq.part..</text>
</g>
<g>
<title>do_softirq_own_stack (452 samples, 10.16%)</title><rect x="244.6" y="387.0" width="119.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="247.6" y="398.0">do_softirq_own_..</text>
</g>
<g>
<title>__softirqentry_text_start (450 samples, 10.12%)</title><rect x="244.6" y="371.0" width="119.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="247.6" y="382.0">__softirqentry_..</text>
</g>
<g>
<title>__kfree_skb_flush (2 samples, 0.04%)</title><rect x="246.7" y="355.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="249.7" y="366.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (2 samples, 0.04%)</title><rect x="247.2" y="355.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="250.2" y="366.0"></text>
</g>
<g>
<title>net_rx_action (438 samples, 9.85%)</title><rect x="247.8" y="355.0" width="116.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="250.8" y="366.0">net_rx_action</text>
</g>
<g>
<title>__kfree_skb_flush (3 samples, 0.07%)</title><rect x="249.6" y="339.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="252.6" y="350.0"></text>
</g>
<g>
<title>__netif_receive_skb (1 samples, 0.02%)</title><rect x="250.4" y="339.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="253.4" y="350.0"></text>
</g>
<g>
<title>process_backlog (427 samples, 9.60%)</title><rect x="250.7" y="339.0" width="113.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="253.7" y="350.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (416 samples, 9.35%)</title><rect x="253.3" y="323.0" width="110.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="256.3" y="334.0">__netif_recei..</text>
</g>
<g>
<title>__netif_receive_skb_core (3 samples, 0.07%)</title><rect x="253.9" y="307.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="256.9" y="318.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (410 samples, 9.22%)</title><rect x="254.7" y="307.0" width="108.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="257.7" y="318.0">__netif_recei..</text>
</g>
<g>
<title>__netif_receive_skb_core (6 samples, 0.13%)</title><rect x="255.4" y="291.0" width="1.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="258.4" y="302.0"></text>
</g>
<g>
<title>ip_rcv (395 samples, 8.88%)</title><rect x="257.0" y="291.0" width="104.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="260.0" y="302.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (1 samples, 0.02%)</title><rect x="257.0" y="275.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="260.0" y="286.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.21 (4 samples, 0.09%)</title><rect x="257.3" y="275.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="260.3" y="286.0"></text>
</g>
<g>
<title>ip_rcv_finish (368 samples, 8.28%)</title><rect x="258.4" y="275.0" width="97.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="261.4" y="286.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (355 samples, 7.98%)</title><rect x="259.2" y="259.0" width="94.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="262.2" y="270.0">ip_local_de..</text>
</g>
<g>
<title>ip_local_deliver_finish (337 samples, 7.58%)</title><rect x="260.5" y="243.0" width="89.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="263.5" y="254.0">ip_local_d..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (332 samples, 7.47%)</title><rect x="261.5" y="227.0" width="88.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="264.5" y="238.0">ip_protoco..</text>
</g>
<g>
<title>sk_filter_trim_cap (1 samples, 0.02%)</title><rect x="263.7" y="211.0" width="0.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="266.7" y="222.0"></text>
</g>
<g>
<title>sock_put (2 samples, 0.04%)</title><rect x="263.9" y="211.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="266.9" y="222.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (2 samples, 0.04%)</title><rect x="264.5" y="211.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="267.5" y="222.0"></text>
</g>
<g>
<title>tcp_v4_rcv (319 samples, 7.17%)</title><rect x="265.0" y="211.0" width="84.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="268.0" y="222.0">tcp_v4_rcv</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (3 samples, 0.07%)</title><rect x="268.2" y="195.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="271.2" y="206.0"></text>
</g>
<g>
<title>__inet_lookup_established (17 samples, 0.38%)</title><rect x="269.0" y="195.0" width="4.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="272.0" y="206.0"></text>
</g>
<g>
<title>inet_ehashfn (3 samples, 0.07%)</title><rect x="272.7" y="179.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="275.7" y="190.0"></text>
</g>
<g>
<title>__xfrm_policy_check2.constprop.41 (1 samples, 0.02%)</title><rect x="273.5" y="195.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="276.5" y="206.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.02%)</title><rect x="273.8" y="195.0" width="0.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="276.8" y="206.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.04%)</title><rect x="274.0" y="195.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="277.0" y="206.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (9 samples, 0.20%)</title><rect x="274.6" y="195.0" width="2.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="277.6" y="206.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (3 samples, 0.07%)</title><rect x="274.8" y="179.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="277.8" y="190.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (3 samples, 0.07%)</title><rect x="275.6" y="179.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="278.6" y="190.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (2 samples, 0.04%)</title><rect x="276.4" y="179.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="279.4" y="190.0"></text>
</g>
<g>
<title>tcp_parse_md5sig_option (3 samples, 0.07%)</title><rect x="276.9" y="195.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="279.9" y="206.0"></text>
</g>
<g>
<title>tcp_rcv_established (2 samples, 0.04%)</title><rect x="277.7" y="195.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="280.7" y="206.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (267 samples, 6.00%)</title><rect x="278.3" y="195.0" width="70.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="281.3" y="206.0">tcp_v4_d..</text>
</g>
<g>
<title>__tcp_ack_snd_check (1 samples, 0.02%)</title><rect x="278.3" y="179.0" width="0.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="281.3" y="190.0"></text>
</g>
<g>
<title>tcp_check_space (2 samples, 0.04%)</title><rect x="278.5" y="179.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="281.5" y="190.0"></text>
</g>
<g>
<title>tcp_data_queue (3 samples, 0.07%)</title><rect x="279.1" y="179.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="282.1" y="190.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (2 samples, 0.04%)</title><rect x="279.9" y="179.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="282.9" y="190.0"></text>
</g>
<g>
<title>tcp_rcv_established (258 samples, 5.80%)</title><rect x="280.4" y="179.0" width="68.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="283.4" y="190.0">tcp_rcv..</text>
</g>
<g>
<title>__tcp_ack_snd_check (24 samples, 0.54%)</title><rect x="283.8" y="163.0" width="6.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="286.8" y="174.0"></text>
</g>
<g>
<title>sk_reset_timer (2 samples, 0.04%)</title><rect x="284.6" y="147.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="287.6" y="158.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (19 samples, 0.43%)</title><rect x="285.2" y="147.0" width="5.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="288.2" y="158.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.02%)</title><rect x="285.4" y="131.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="288.4" y="142.0"></text>
</g>
<g>
<title>sk_reset_timer (17 samples, 0.38%)</title><rect x="285.7" y="131.0" width="4.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="288.7" y="142.0"></text>
</g>
<g>
<title>mod_timer (17 samples, 0.38%)</title><rect x="285.7" y="115.0" width="4.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="288.7" y="126.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (13 samples, 0.29%)</title><rect x="286.0" y="99.0" width="3.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="289.0" y="110.0"></text>
</g>
<g>
<title>lock_timer_base (3 samples, 0.07%)</title><rect x="289.4" y="99.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="292.4" y="110.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (2 samples, 0.04%)</title><rect x="289.7" y="83.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="292.7" y="94.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (1 samples, 0.02%)</title><rect x="290.2" y="163.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="293.2" y="174.0"></text>
</g>
<g>
<title>dst_release (1 samples, 0.02%)</title><rect x="290.5" y="163.0" width="0.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="293.5" y="174.0"></text>
</g>
<g>
<title>ktime_get_seconds (2 samples, 0.04%)</title><rect x="290.7" y="163.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="293.7" y="174.0"></text>
</g>
<g>
<title>sk_forced_mem_schedule (2 samples, 0.04%)</title><rect x="291.3" y="163.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="294.3" y="174.0"></text>
</g>
<g>
<title>sock_def_readable (3 samples, 0.07%)</title><rect x="291.8" y="163.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="294.8" y="174.0"></text>
</g>
<g>
<title>tcp_ack (91 samples, 2.05%)</title><rect x="292.6" y="163.0" width="24.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="295.6" y="174.0">t..</text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.04%)</title><rect x="295.5" y="147.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="298.5" y="158.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (1 samples, 0.02%)</title><rect x="296.0" y="147.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="299.0" y="158.0"></text>
</g>
<g>
<title>rb_next (1 samples, 0.02%)</title><rect x="296.3" y="147.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="299.3" y="158.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.47 (1 samples, 0.02%)</title><rect x="296.6" y="147.0" width="0.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="299.6" y="158.0"></text>
</g>
<g>
<title>tcp_chrono_stop (2 samples, 0.04%)</title><rect x="296.8" y="147.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="299.8" y="158.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (68 samples, 1.53%)</title><rect x="297.4" y="147.0" width="18.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="300.4" y="158.0"></text>
</g>
<g>
<title>__kfree_skb (38 samples, 0.85%)</title><rect x="302.4" y="131.0" width="10.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="305.4" y="142.0"></text>
</g>
<g>
<title>kfree_skbmem (14 samples, 0.31%)</title><rect x="302.7" y="115.0" width="3.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="305.7" y="126.0"></text>
</g>
<g>
<title>kmem_cache_free (13 samples, 0.29%)</title><rect x="302.9" y="99.0" width="3.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="305.9" y="110.0"></text>
</g>
<g>
<title>__slab_free (1 samples, 0.02%)</title><rect x="306.1" y="83.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="309.1" y="94.0"></text>
</g>
<g>
<title>skb_release_all (21 samples, 0.47%)</title><rect x="306.4" y="115.0" width="5.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="309.4" y="126.0"></text>
</g>
<g>
<title>skb_free_head (1 samples, 0.02%)</title><rect x="306.7" y="99.0" width="0.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="309.7" y="110.0"></text>
</g>
<g>
<title>skb_release_data (18 samples, 0.40%)</title><rect x="306.9" y="99.0" width="4.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="309.9" y="110.0"></text>
</g>
<g>
<title>skb_free_head (13 samples, 0.29%)</title><rect x="308.3" y="83.0" width="3.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="311.3" y="94.0"></text>
</g>
<g>
<title>kfree (13 samples, 0.29%)</title><rect x="308.3" y="67.0" width="3.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="311.3" y="78.0"></text>
</g>
<g>
<title>__slab_free (6 samples, 0.13%)</title><rect x="310.1" y="51.0" width="1.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="313.1" y="62.0"></text>
</g>
<g>
<title>put_cpu_partial (3 samples, 0.07%)</title><rect x="310.9" y="35.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="313.9" y="46.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.02%)</title><rect x="311.7" y="99.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="314.7" y="110.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.02%)</title><rect x="312.0" y="115.0" width="0.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="315.0" y="126.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.02%)</title><rect x="312.2" y="115.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="315.2" y="126.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.02%)</title><rect x="312.5" y="131.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="315.5" y="142.0"></text>
</g>
<g>
<title>bictcp_acked (1 samples, 0.02%)</title><rect x="312.8" y="131.0" width="0.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="315.8" y="142.0"></text>
</g>
<g>
<title>kfree_skbmem (2 samples, 0.04%)</title><rect x="313.0" y="131.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="316.0" y="142.0"></text>
</g>
<g>
<title>rb_next (1 samples, 0.02%)</title><rect x="313.6" y="131.0" width="0.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="316.6" y="142.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.47 (3 samples, 0.07%)</title><rect x="313.8" y="131.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="316.8" y="142.0"></text>
</g>
<g>
<title>tcp_chrono_stop (1 samples, 0.02%)</title><rect x="314.6" y="131.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="317.6" y="142.0"></text>
</g>
<g>
<title>tcp_rack_advance (1 samples, 0.02%)</title><rect x="314.9" y="131.0" width="0.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="317.9" y="142.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (1 samples, 0.02%)</title><rect x="315.1" y="131.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="318.1" y="142.0"></text>
</g>
<g>
<title>tcp_rack_advance (3 samples, 0.07%)</title><rect x="315.4" y="147.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="318.4" y="158.0"></text>
</g>
<g>
<title>tcp_rate_gen (2 samples, 0.04%)</title><rect x="316.2" y="147.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="319.2" y="158.0"></text>
</g>
<g>
<title>tcp_check_space (5 samples, 0.11%)</title><rect x="316.7" y="163.0" width="1.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="319.7" y="174.0"></text>
</g>
<g>
<title>tcp_data_queue (96 samples, 2.16%)</title><rect x="318.1" y="163.0" width="25.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="321.1" y="174.0">t..</text>
</g>
<g>
<title>dst_release (1 samples, 0.02%)</title><rect x="319.9" y="147.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="322.9" y="158.0"></text>
</g>
<g>
<title>sock_def_readable (81 samples, 1.82%)</title><rect x="320.2" y="147.0" width="21.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="323.2" y="158.0">s..</text>
</g>
<g>
<title>__wake_up_sync_key (74 samples, 1.66%)</title><rect x="322.0" y="131.0" width="19.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="325.0" y="142.0"></text>
</g>
<g>
<title>__wake_up_common_lock (71 samples, 1.60%)</title><rect x="322.0" y="115.0" width="18.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="325.0" y="126.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (68 samples, 1.53%)</title><rect x="322.8" y="99.0" width="18.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="325.8" y="110.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (3 samples, 0.07%)</title><rect x="340.9" y="115.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="343.9" y="126.0"></text>
</g>
<g>
<title>tcp_event_data_recv (2 samples, 0.04%)</title><rect x="341.7" y="147.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="344.7" y="158.0"></text>
</g>
<g>
<title>tcp_queue_rcv (5 samples, 0.11%)</title><rect x="342.2" y="147.0" width="1.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="345.2" y="158.0"></text>
</g>
<g>
<title>tcp_event_data_recv (1 samples, 0.02%)</title><rect x="343.5" y="163.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="346.5" y="174.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (7 samples, 0.16%)</title><rect x="343.8" y="163.0" width="1.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="346.8" y="174.0"></text>
</g>
<g>
<title>ktime_get (3 samples, 0.07%)</title><rect x="344.1" y="147.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="347.1" y="158.0"></text>
</g>
<g>
<title>read_tsc (3 samples, 0.07%)</title><rect x="344.9" y="147.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="347.9" y="158.0"></text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (1 samples, 0.02%)</title><rect x="345.7" y="163.0" width="0.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="348.7" y="174.0"></text>
</g>
<g>
<title>tcp_rate_gen (3 samples, 0.07%)</title><rect x="345.9" y="163.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="348.9" y="174.0"></text>
</g>
<g>
<title>tcp_rearm_rto (4 samples, 0.09%)</title><rect x="346.7" y="163.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="349.7" y="174.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (3 samples, 0.07%)</title><rect x="347.8" y="163.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="350.8" y="174.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (1 samples, 0.02%)</title><rect x="348.6" y="163.0" width="0.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="351.6" y="174.0"></text>
</g>
<g>
<title>tcp_urg (1 samples, 0.02%)</title><rect x="348.8" y="179.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="351.8" y="190.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (2 samples, 0.04%)</title><rect x="349.1" y="195.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="352.1" y="206.0"></text>
</g>
<g>
<title>tcp_v4_rcv (1 samples, 0.02%)</title><rect x="349.6" y="227.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="352.6" y="238.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (1 samples, 0.02%)</title><rect x="349.9" y="243.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="352.9" y="254.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (1 samples, 0.02%)</title><rect x="350.2" y="243.0" width="0.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="353.2" y="254.0"></text>
</g>
<g>
<title>nf_hook_slow (8 samples, 0.18%)</title><rect x="350.4" y="243.0" width="2.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="353.4" y="254.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (5 samples, 0.11%)</title><rect x="350.4" y="227.0" width="1.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="353.4" y="238.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (5 samples, 0.11%)</title><rect x="350.4" y="211.0" width="1.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="353.4" y="222.0"></text>
</g>
<g>
<title>ipv4_confirm?[nf_conntrack] (2 samples, 0.04%)</title><rect x="351.8" y="227.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="354.8" y="238.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events?[nf_conntrack] (2 samples, 0.04%)</title><rect x="351.8" y="211.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="354.8" y="222.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn?[nf_nat_ipv4] (1 samples, 0.02%)</title><rect x="352.3" y="227.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="355.3" y="238.0"></text>
</g>
<g>
<title>nf_nat_inet_fn?[nf_nat] (1 samples, 0.02%)</title><rect x="352.3" y="211.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="355.3" y="222.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn?[nf_nat_ipv4] (3 samples, 0.07%)</title><rect x="352.6" y="243.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="355.6" y="254.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (1 samples, 0.02%)</title><rect x="353.4" y="259.0" width="0.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="356.4" y="270.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.19 (7 samples, 0.16%)</title><rect x="353.6" y="259.0" width="1.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="356.6" y="270.0"></text>
</g>
<g>
<title>nf_hook_slow (2 samples, 0.04%)</title><rect x="355.5" y="259.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="358.5" y="270.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.19 (2 samples, 0.04%)</title><rect x="356.0" y="275.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="359.0" y="286.0"></text>
</g>
<g>
<title>ip_sabotage_in?[br_netfilter] (5 samples, 0.11%)</title><rect x="356.5" y="275.0" width="1.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="359.5" y="286.0"></text>
</g>
<g>
<title>nf_hook_slow (15 samples, 0.34%)</title><rect x="357.9" y="275.0" width="4.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="360.9" y="286.0"></text>
</g>
<g>
<title>ipv4_conntrack_in?[nf_conntrack] (3 samples, 0.07%)</title><rect x="358.7" y="259.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="361.7" y="270.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (3 samples, 0.07%)</title><rect x="358.7" y="243.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="361.7" y="254.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (2 samples, 0.04%)</title><rect x="359.5" y="259.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="362.5" y="270.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn?[nf_nat_ipv4] (1 samples, 0.02%)</title><rect x="360.0" y="259.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="363.0" y="270.0"></text>
</g>
<g>
<title>nf_nat_ipv4_in?[nf_nat_ipv4] (6 samples, 0.13%)</title><rect x="360.3" y="259.0" width="1.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="363.3" y="270.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn?[nf_nat_ipv4] (4 samples, 0.09%)</title><rect x="360.8" y="243.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="363.8" y="254.0"></text>
</g>
<g>
<title>nf_nat_inet_fn?[nf_nat] (2 samples, 0.04%)</title><rect x="361.1" y="227.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="364.1" y="238.0"></text>
</g>
<g>
<title>nf_nat_packet?[nf_nat] (1 samples, 0.02%)</title><rect x="361.6" y="227.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="364.6" y="238.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.21 (1 samples, 0.02%)</title><rect x="361.9" y="291.0" width="0.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="364.9" y="302.0"></text>
</g>
<g>
<title>ip_rcv_finish (2 samples, 0.04%)</title><rect x="362.1" y="291.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="365.1" y="302.0"></text>
</g>
<g>
<title>nf_hook_slow (3 samples, 0.07%)</title><rect x="362.6" y="291.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="365.6" y="302.0"></text>
</g>
<g>
<title>ip_rcv (1 samples, 0.02%)</title><rect x="363.4" y="307.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="366.4" y="318.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (1 samples, 0.02%)</title><rect x="363.7" y="323.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="366.7" y="334.0"></text>
</g>
<g>
<title>net_rx_action (2 samples, 0.04%)</title><rect x="364.0" y="371.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="367.0" y="382.0"></text>
</g>
<g>
<title>dev_queue_xmit (66 samples, 1.48%)</title><rect x="364.5" y="419.0" width="17.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="367.5" y="430.0"></text>
</g>
<g>
<title>__dev_queue_xmit (63 samples, 1.42%)</title><rect x="364.8" y="403.0" width="16.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="367.8" y="414.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.02%)</title><rect x="366.6" y="387.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="369.6" y="398.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (37 samples, 0.83%)</title><rect x="366.9" y="387.0" width="9.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="369.9" y="398.0"></text>
</g>
<g>
<title>eth_type_trans (3 samples, 0.07%)</title><rect x="369.0" y="371.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="372.0" y="382.0"></text>
</g>
<g>
<title>loopback_xmit (23 samples, 0.52%)</title><rect x="369.8" y="371.0" width="6.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="372.8" y="382.0"></text>
</g>
<g>
<title>eth_type_trans (2 samples, 0.04%)</title><rect x="370.3" y="355.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="373.3" y="366.0"></text>
</g>
<g>
<title>netif_rx (15 samples, 0.34%)</title><rect x="370.9" y="355.0" width="4.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="373.9" y="366.0"></text>
</g>
<g>
<title>enqueue_to_backlog (2 samples, 0.04%)</title><rect x="371.1" y="339.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="374.1" y="350.0"></text>
</g>
<g>
<title>netif_rx_internal (12 samples, 0.27%)</title><rect x="371.7" y="339.0" width="3.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="374.7" y="350.0"></text>
</g>
<g>
<title>enqueue_to_backlog (11 samples, 0.25%)</title><rect x="371.9" y="323.0" width="3.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="374.9" y="334.0"></text>
</g>
<g>
<title>netif_rx_internal (1 samples, 0.02%)</title><rect x="374.9" y="355.0" width="0.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="377.9" y="366.0"></text>
</g>
<g>
<title>sk_free (2 samples, 0.04%)</title><rect x="375.1" y="355.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="378.1" y="366.0"></text>
</g>
<g>
<title>tcp_wfree (1 samples, 0.02%)</title><rect x="375.6" y="355.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="378.6" y="366.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (2 samples, 0.04%)</title><rect x="375.9" y="371.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="378.9" y="382.0"></text>
</g>
<g>
<title>tcp_wfree (1 samples, 0.02%)</title><rect x="376.4" y="371.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="379.4" y="382.0"></text>
</g>
<g>
<title>loopback_xmit (2 samples, 0.04%)</title><rect x="376.7" y="387.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="379.7" y="398.0"></text>
</g>
<g>
<title>netdev_pick_tx (2 samples, 0.04%)</title><rect x="377.2" y="387.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="380.2" y="398.0"></text>
</g>
<g>
<title>validate_xmit_skb (12 samples, 0.27%)</title><rect x="377.8" y="387.0" width="3.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="380.8" y="398.0"></text>
</g>
<g>
<title>netif_skb_features (5 samples, 0.11%)</title><rect x="378.6" y="371.0" width="1.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="381.6" y="382.0"></text>
</g>
<g>
<title>skb_network_protocol (2 samples, 0.04%)</title><rect x="379.4" y="355.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="382.4" y="366.0"></text>
</g>
<g>
<title>skb_network_protocol (3 samples, 0.07%)</title><rect x="379.9" y="371.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="382.9" y="382.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (1 samples, 0.02%)</title><rect x="380.7" y="371.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="383.7" y="382.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (2 samples, 0.04%)</title><rect x="381.0" y="387.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="384.0" y="398.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.02%)</title><rect x="381.5" y="403.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="384.5" y="414.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (1 samples, 0.02%)</title><rect x="381.8" y="403.0" width="0.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="384.8" y="414.0"></text>
</g>
<g>
<title>do_softirq.part.21 (1 samples, 0.02%)</title><rect x="382.0" y="419.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="385.0" y="430.0"></text>
</g>
<g>
<title>ipv4_confirm?[nf_conntrack] (2 samples, 0.04%)</title><rect x="382.3" y="451.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="385.3" y="462.0"></text>
</g>
<g>
<title>ipv4_helper?[nf_conntrack] (5 samples, 0.11%)</title><rect x="382.8" y="451.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="385.8" y="462.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.04%)</title><rect x="384.1" y="451.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="387.1" y="462.0"></text>
</g>
<g>
<title>nf_hook_slow (11 samples, 0.25%)</title><rect x="384.7" y="451.0" width="2.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="387.7" y="462.0"></text>
</g>
<g>
<title>ipv4_confirm?[nf_conntrack] (5 samples, 0.11%)</title><rect x="384.7" y="435.0" width="1.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="387.7" y="446.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events?[nf_conntrack] (2 samples, 0.04%)</title><rect x="385.5" y="419.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="388.5" y="430.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events?[nf_conntrack] (4 samples, 0.09%)</title><rect x="386.0" y="435.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="389.0" y="446.0"></text>
</g>
<g>
<title>nf_nat_ipv4_out?[nf_nat_ipv4] (2 samples, 0.04%)</title><rect x="387.1" y="435.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="390.1" y="446.0"></text>
</g>
<g>
<title>nf_hook_slow (4 samples, 0.09%)</title><rect x="387.6" y="467.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="390.6" y="478.0"></text>
</g>
<g>
<title>ip_output (2 samples, 0.04%)</title><rect x="388.7" y="483.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="391.7" y="494.0"></text>
</g>
<g>
<title>ipv4_dst_check (3 samples, 0.07%)</title><rect x="389.2" y="483.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="392.2" y="494.0"></text>
</g>
<g>
<title>__sk_dst_check (2 samples, 0.04%)</title><rect x="390.0" y="499.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="393.0" y="510.0"></text>
</g>
<g>
<title>ip_copy_addrs (1 samples, 0.02%)</title><rect x="390.5" y="499.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="393.5" y="510.0"></text>
</g>
<g>
<title>ip_local_out (3 samples, 0.07%)</title><rect x="390.8" y="499.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="393.8" y="510.0"></text>
</g>
<g>
<title>skb_push (2 samples, 0.04%)</title><rect x="391.6" y="499.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="394.6" y="510.0"></text>
</g>
<g>
<title>skb_clone (9 samples, 0.20%)</title><rect x="392.1" y="515.0" width="2.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="395.1" y="526.0"></text>
</g>
<g>
<title>__copy_skb_header (1 samples, 0.02%)</title><rect x="393.2" y="499.0" width="0.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="396.2" y="510.0"></text>
</g>
<g>
<title>__skb_clone (4 samples, 0.09%)</title><rect x="393.4" y="499.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="396.4" y="510.0"></text>
</g>
<g>
<title>__copy_skb_header (3 samples, 0.07%)</title><rect x="393.7" y="483.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="396.7" y="494.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.02%)</title><rect x="394.5" y="515.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="397.5" y="526.0"></text>
</g>
<g>
<title>tcp_options_write (1 samples, 0.02%)</title><rect x="394.8" y="515.0" width="0.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="397.8" y="526.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (5 samples, 0.11%)</title><rect x="395.0" y="515.0" width="1.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="398.0" y="526.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (2 samples, 0.04%)</title><rect x="396.3" y="531.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="399.3" y="542.0"></text>
</g>
<g>
<title>ip_queue_xmit (1 samples, 0.02%)</title><rect x="396.9" y="531.0" width="0.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="399.9" y="542.0"></text>
</g>
<g>
<title>jiffies_to_usecs (1 samples, 0.02%)</title><rect x="397.1" y="531.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="400.1" y="542.0"></text>
</g>
<g>
<title>ktime_get (7 samples, 0.16%)</title><rect x="397.4" y="531.0" width="1.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="400.4" y="542.0"></text>
</g>
<g>
<title>read_tsc (3 samples, 0.07%)</title><rect x="398.5" y="515.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="401.5" y="526.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.02%)</title><rect x="399.3" y="531.0" width="0.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="402.3" y="542.0"></text>
</g>
<g>
<title>skb_clone (1 samples, 0.02%)</title><rect x="399.5" y="531.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="402.5" y="542.0"></text>
</g>
<g>
<title>skb_push (1 samples, 0.02%)</title><rect x="399.8" y="531.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="402.8" y="542.0"></text>
</g>
<g>
<title>tcp_chrono_stop (1 samples, 0.02%)</title><rect x="400.1" y="531.0" width="0.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="403.1" y="542.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (15 samples, 0.34%)</title><rect x="400.3" y="531.0" width="4.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="403.3" y="542.0"></text>
</g>
<g>
<title>rb_insert_color (1 samples, 0.02%)</title><rect x="400.6" y="515.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="403.6" y="526.0"></text>
</g>
<g>
<title>tcp_rearm_rto (13 samples, 0.29%)</title><rect x="400.9" y="515.0" width="3.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="403.9" y="526.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.02%)</title><rect x="401.4" y="499.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="404.4" y="510.0"></text>
</g>
<g>
<title>sk_reset_timer (10 samples, 0.22%)</title><rect x="401.7" y="499.0" width="2.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="404.7" y="510.0"></text>
</g>
<g>
<title>mod_timer (10 samples, 0.22%)</title><rect x="401.7" y="483.0" width="2.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="404.7" y="494.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (6 samples, 0.13%)</title><rect x="402.4" y="467.0" width="1.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="405.4" y="478.0"></text>
</g>
<g>
<title>lock_timer_base (1 samples, 0.02%)</title><rect x="404.0" y="467.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="407.0" y="478.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.02%)</title><rect x="404.0" y="451.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="407.0" y="462.0"></text>
</g>
<g>
<title>tcp_options_write (3 samples, 0.07%)</title><rect x="404.3" y="531.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="407.3" y="542.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (2 samples, 0.04%)</title><rect x="405.1" y="531.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="408.1" y="542.0"></text>
</g>
<g>
<title>tcp_rearm_rto (3 samples, 0.07%)</title><rect x="405.6" y="531.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="408.6" y="542.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (5 samples, 0.11%)</title><rect x="406.4" y="531.0" width="1.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="409.4" y="542.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (2 samples, 0.04%)</title><rect x="407.0" y="515.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="410.0" y="526.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.02%)</title><rect x="407.5" y="515.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="410.5" y="526.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (2 samples, 0.04%)</title><rect x="407.8" y="531.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="410.8" y="542.0"></text>
</g>
<g>
<title>tcp_v4_send_check (2 samples, 0.04%)</title><rect x="408.3" y="531.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="411.3" y="542.0"></text>
</g>
<g>
<title>tcp_write_xmit (1 samples, 0.02%)</title><rect x="408.8" y="563.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="411.8" y="574.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (1 samples, 0.02%)</title><rect x="409.1" y="579.0" width="0.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="412.1" y="590.0"></text>
</g>
<g>
<title>tcp_send_mss (21 samples, 0.47%)</title><rect x="409.3" y="579.0" width="5.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="412.3" y="590.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.02%)</title><rect x="409.3" y="563.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="412.3" y="574.0"></text>
</g>
<g>
<title>tcp_current_mss (20 samples, 0.45%)</title><rect x="409.6" y="563.0" width="5.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="412.6" y="574.0"></text>
</g>
<g>
<title>ipv4_mtu (9 samples, 0.20%)</title><rect x="412.5" y="547.0" width="2.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="415.5" y="558.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (2 samples, 0.04%)</title><rect x="414.9" y="595.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="417.9" y="606.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (3 samples, 0.07%)</title><rect x="415.5" y="595.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="418.5" y="606.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1 samples, 0.02%)</title><rect x="416.2" y="611.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="419.2" y="622.0"></text>
</g>
<g>
<title>security_socket_sendmsg (17 samples, 0.38%)</title><rect x="416.5" y="627.0" width="4.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="419.5" y="638.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (17 samples, 0.38%)</title><rect x="416.5" y="611.0" width="4.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="419.5" y="622.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (17 samples, 0.38%)</title><rect x="416.5" y="595.0" width="4.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="419.5" y="606.0"></text>
</g>
<g>
<title>aa_sk_perm (14 samples, 0.31%)</title><rect x="417.3" y="579.0" width="3.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="420.3" y="590.0"></text>
</g>
<g>
<title>tcp_sendmsg (2 samples, 0.04%)</title><rect x="421.0" y="627.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="424.0" y="638.0"></text>
</g>
<g>
<title>sockfd_lookup_light (25 samples, 0.56%)</title><rect x="421.6" y="643.0" width="6.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="424.6" y="654.0"></text>
</g>
<g>
<title>__fdget (21 samples, 0.47%)</title><rect x="421.6" y="627.0" width="5.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="424.6" y="638.0"></text>
</g>
<g>
<title>__fget_light (21 samples, 0.47%)</title><rect x="421.6" y="611.0" width="5.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="424.6" y="622.0"></text>
</g>
<g>
<title>__fget (15 samples, 0.34%)</title><rect x="423.1" y="595.0" width="4.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="426.1" y="606.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.09%)</title><rect x="427.1" y="627.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="430.1" y="638.0"></text>
</g>
<g>
<title>fput (3 samples, 0.07%)</title><rect x="428.2" y="659.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="431.2" y="670.0"></text>
</g>
<g>
<title>import_single_range (5 samples, 0.11%)</title><rect x="429.0" y="659.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="432.0" y="670.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.02%)</title><rect x="430.3" y="659.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="433.3" y="670.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.04%)</title><rect x="430.6" y="723.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="433.6" y="734.0"></text>
</g>
<g>
<title>send@plt (3 samples, 0.07%)</title><rect x="431.1" y="723.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="434.1" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.16%)</title><rect x="431.9" y="803.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="434.9" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.04%)</title><rect x="433.2" y="787.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="436.2" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.04%)</title><rect x="433.2" y="771.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="436.2" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (4 samples, 0.09%)</title><rect x="433.8" y="803.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="436.8" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/AsyncService$$Lambda$66/730931500.exec (44 samples, 0.99%)</title><rect x="434.8" y="819.0" width="11.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="437.8" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/AsyncService.lambda$entity$2 (44 samples, 0.99%)</title><rect x="434.8" y="803.0" width="11.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="437.8" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/AsyncService.upsert (42 samples, 0.94%)</title><rect x="435.4" y="787.0" width="11.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="438.4" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.18%)</title><rect x="436.4" y="771.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="439.4" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.18%)</title><rect x="436.4" y="755.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="439.4" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (29 samples, 0.65%)</title><rect x="438.5" y="771.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="441.5" y="782.0"></text>
</g>
<g>
<title>gettimeofday (8 samples, 0.18%)</title><rect x="440.7" y="755.0" width="2.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="443.7" y="766.0"></text>
</g>
<g>
<title>gettimeofday@plt (1 samples, 0.02%)</title><rect x="442.8" y="755.0" width="0.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="445.8" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.07%)</title><rect x="443.0" y="755.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="446.0" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.09%)</title><rect x="443.8" y="755.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="446.8" y="766.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.09%)</title><rect x="443.8" y="739.0" width="1.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="446.8" y="750.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.09%)</title><rect x="443.8" y="723.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="446.8" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/AsyncService$$Lambda$68/815123323.exec (5 samples, 0.11%)</title><rect x="444.9" y="755.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="447.9" y="766.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="446.2" y="771.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="449.2" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="446.2" y="755.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="449.2" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.02%)</title><rect x="446.2" y="739.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="449.2" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/AsyncService$$Lambda$68/815123323.exec (1,585 samples, 35.64%)</title><rect x="446.5" y="819.0" width="420.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="449.5" y="830.0">ru/mail/polis/service/codearound/AsyncService$$Lambda$68/8..</text>
</g>
<g>
<title>ru/mail/polis/service/codearound/AsyncService.lambda$entity$1 (1,585 samples, 35.64%)</title><rect x="446.5" y="803.0" width="420.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="449.5" y="814.0">ru/mail/polis/service/codearound/AsyncService.lambda$entit..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="446.5" y="787.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="449.5" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/AsyncService.get (1,583 samples, 35.60%)</title><rect x="447.0" y="787.0" width="420.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="450.0" y="798.0">ru/mail/polis/service/codearound/AsyncService.get</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="451.8" y="771.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="454.8" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="451.8" y="755.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="454.8" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="451.8" y="739.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="454.8" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="451.8" y="723.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="454.8" y="734.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.02%)</title><rect x="451.8" y="707.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="454.8" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.11%)</title><rect x="452.1" y="771.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="455.1" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (5 samples, 0.11%)</title><rect x="453.4" y="771.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="456.4" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.07%)</title><rect x="453.9" y="755.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="456.9" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (12 samples, 0.27%)</title><rect x="454.7" y="771.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="457.7" y="782.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="454.7" y="755.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="457.7" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (11 samples, 0.25%)</title><rect x="455.0" y="755.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="458.0" y="766.0"></text>
</g>
<g>
<title>jbyte_arraycopy (6 samples, 0.13%)</title><rect x="455.0" y="739.0" width="1.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="458.0" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.11%)</title><rect x="456.6" y="739.0" width="1.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="459.6" y="750.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1 samples, 0.02%)</title><rect x="457.9" y="771.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="460.9" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/DAOByteOnlyConverter.readByteArray (3 samples, 0.07%)</title><rect x="458.2" y="771.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="461.2" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.04%)</title><rect x="458.2" y="755.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="461.2" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="458.4" y="739.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="461.4" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="458.4" y="723.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="461.4" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="458.4" y="707.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="461.4" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="458.4" y="691.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="461.4" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.02%)</title><rect x="458.4" y="675.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="461.4" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.02%)</title><rect x="458.4" y="659.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="461.4" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.02%)</title><rect x="458.7" y="755.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="461.7" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.02%)</title><rect x="458.7" y="739.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="461.7" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="458.7" y="723.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="461.7" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/TaskDAO.get (1,538 samples, 34.59%)</title><rect x="459.0" y="771.0" width="408.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="462.0" y="782.0">ru/mail/polis/service/codearound/TaskDAO.get</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.22%)</title><rect x="459.0" y="755.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="462.0" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.22%)</title><rect x="459.0" y="739.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="462.0" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (10 samples, 0.22%)</title><rect x="459.0" y="723.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="462.0" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.18%)</title><rect x="459.5" y="707.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="462.5" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (8 samples, 0.18%)</title><rect x="459.5" y="691.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="462.5" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.13%)</title><rect x="460.0" y="675.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="463.0" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.13%)</title><rect x="460.0" y="659.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="463.0" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.09%)</title><rect x="460.6" y="643.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="463.6" y="654.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,503 samples, 33.80%)</title><rect x="461.6" y="755.0" width="398.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="464.6" y="766.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,503 samples, 33.80%)</title><rect x="461.6" y="739.0" width="398.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="464.6" y="750.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (1,437 samples, 32.31%)</title><rect x="463.2" y="723.0" width="381.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="466.2" y="734.0">Java_org_rocksdb_RocksDB_get__J_3BII</text>
</g>
<g>
<title>/tmp/librocksdbjni7656356053640303256.so (4 samples, 0.09%)</title><rect x="465.6" y="707.0" width="1.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="468.6" y="718.0"></text>
</g>
<g>
<title>__libc_free (6 samples, 0.13%)</title><rect x="466.7" y="707.0" width="1.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="469.7" y="718.0"></text>
</g>
<g>
<title>__malloc (7 samples, 0.16%)</title><rect x="468.3" y="707.0" width="1.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="471.3" y="718.0"></text>
</g>
<g>
<title>free@plt (1 samples, 0.02%)</title><rect x="470.1" y="707.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="473.1" y="718.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (7 samples, 0.16%)</title><rect x="470.4" y="707.0" width="1.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="473.4" y="718.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.13%)</title><rect x="472.2" y="707.0" width="1.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="475.2" y="718.0"></text>
</g>
<g>
<title>malloc@plt (2 samples, 0.04%)</title><rect x="473.8" y="707.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="476.8" y="718.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.02%)</title><rect x="474.4" y="707.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="477.4" y="718.0"></text>
</g>
<g>
<title>operator delete[](void*) (2 samples, 0.04%)</title><rect x="474.6" y="707.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="477.6" y="718.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.09%)</title><rect x="475.2" y="707.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="478.2" y="718.0"></text>
</g>
<g>
<title>operator new(unsigned long) [clone .plt] (5 samples, 0.11%)</title><rect x="476.2" y="707.0" width="1.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="479.2" y="718.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (8 samples, 0.18%)</title><rect x="477.5" y="707.0" width="2.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="480.5" y="718.0"></text>
</g>
<g>
<title>operator new[](unsigned long) [clone .plt] (2 samples, 0.04%)</title><rect x="479.7" y="707.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="482.7" y="718.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (5 samples, 0.11%)</title><rect x="480.2" y="707.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="483.2" y="718.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) [clone .plt] (1 samples, 0.02%)</title><rect x="481.5" y="707.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="484.5" y="718.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.02%)</title><rect x="481.8" y="707.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="484.8" y="718.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) [clone .plt] (1 samples, 0.02%)</title><rect x="482.1" y="707.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="485.1" y="718.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1,360 samples, 30.58%)</title><rect x="482.3" y="707.0" width="360.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="485.3" y="718.0">rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksd..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (5 samples, 0.11%)</title><rect x="485.5" y="691.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="488.5" y="702.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.02%)</title><rect x="486.8" y="691.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="489.8" y="702.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.02%)</title><rect x="487.1" y="691.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="490.1" y="702.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.02%)</title><rect x="487.4" y="691.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="490.4" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.04%)</title><rect x="487.6" y="691.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="490.6" y="702.0"></text>
</g>
<g>
<title>__memmove_ssse3 (10 samples, 0.22%)</title><rect x="488.2" y="691.0" width="2.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="491.2" y="702.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (8 samples, 0.18%)</title><rect x="490.8" y="691.0" width="2.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="493.8" y="702.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.02%)</title><rect x="491.6" y="675.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="494.6" y="686.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.04%)</title><rect x="491.9" y="675.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="494.9" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.04%)</title><rect x="492.4" y="675.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="495.4" y="686.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (22 samples, 0.49%)</title><rect x="492.9" y="691.0" width="5.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="495.9" y="702.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.04%)</title><rect x="494.0" y="675.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="497.0" y="686.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (4 samples, 0.09%)</title><rect x="494.5" y="675.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="497.5" y="686.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.07%)</title><rect x="495.6" y="675.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="498.6" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (5 samples, 0.11%)</title><rect x="496.4" y="675.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="499.4" y="686.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.02%)</title><rect x="497.4" y="659.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="500.4" y="670.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="497.4" y="643.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="500.4" y="654.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.02%)</title><rect x="497.4" y="627.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="500.4" y="638.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="497.4" y="611.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="500.4" y="622.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.02%)</title><rect x="497.4" y="595.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="500.4" y="606.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.02%)</title><rect x="497.4" y="579.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="500.4" y="590.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.02%)</title><rect x="497.4" y="563.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="500.4" y="574.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.09%)</title><rect x="497.7" y="675.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="500.7" y="686.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.07%)</title><rect x="498.0" y="659.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="501.0" y="670.0"></text>
</g>
<g>
<title>jni_NewByteArray (3 samples, 0.07%)</title><rect x="498.8" y="691.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="501.8" y="702.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.07%)</title><rect x="499.6" y="691.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="502.6" y="702.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (2 samples, 0.04%)</title><rect x="500.4" y="691.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="503.4" y="702.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (1,190 samples, 26.76%)</title><rect x="500.9" y="691.0" width="315.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="503.9" y="702.0">rocksdb::DB::Get(rocksdb::ReadOptions const..</text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (3 samples, 0.07%)</title><rect x="501.2" y="675.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="504.2" y="686.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="501.7" y="659.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="504.7" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="501.7" y="643.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="504.7" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.02%)</title><rect x="501.7" y="627.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="504.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (2 samples, 0.04%)</title><rect x="502.0" y="675.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="505.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (1,172 samples, 26.35%)</title><rect x="502.5" y="675.0" width="311.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="505.5" y="686.0">rocksdb::DB::Get(rocksdb::ReadOptions cons..</text>
</g>
<g>
<title>rocksdb::CachableEntry&lt;rocksdb::Block&gt;::ReleaseCacheHandle(void*, void*) (2 samples, 0.04%)</title><rect x="505.7" y="659.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="508.7" y="670.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (23 samples, 0.52%)</title><rect x="506.2" y="659.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="509.2" y="670.0"></text>
</g>
<g>
<title>rocksdb::LRUCache::GetHash(rocksdb::Cache::Handle*) const (1 samples, 0.02%)</title><rect x="506.2" y="643.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="509.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::LRU_Insert(rocksdb::LRUHandle*) (2 samples, 0.04%)</title><rect x="506.5" y="643.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="509.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (19 samples, 0.43%)</title><rect x="507.0" y="643.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="510.0" y="654.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni7656356053640303256.so (1 samples, 0.02%)</title><rect x="507.8" y="627.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="510.8" y="638.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.02%)</title><rect x="508.1" y="627.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="511.1" y="638.0"></text>
</g>
<g>
<title>malloc_usable_size (1 samples, 0.02%)</title><rect x="508.3" y="627.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="511.3" y="638.0"></text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 0.11%)</title><rect x="508.6" y="627.0" width="1.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="511.6" y="638.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (3 samples, 0.07%)</title><rect x="509.9" y="627.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="512.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::LRU_Insert(rocksdb::LRUHandle*) (5 samples, 0.11%)</title><rect x="510.7" y="627.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="513.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (1 samples, 0.02%)</title><rect x="512.0" y="643.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="515.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (1,127 samples, 25.34%)</title><rect x="512.3" y="659.0" width="299.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="515.3" y="670.0">rocksdb::DBImpl::Get(rocksdb::ReadOption..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::string*) (1,120 samples, 25.19%)</title><rect x="513.6" y="643.0" width="297.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="516.6" y="654.0">rocksdb::DBImpl::Get(rocksdb::ReadOption..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (7 samples, 0.16%)</title><rect x="513.6" y="627.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="516.6" y="638.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context [clone .plt] (1 samples, 0.02%)</title><rect x="515.5" y="627.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="518.5" y="638.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.11%)</title><rect x="515.8" y="627.0" width="1.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="518.8" y="638.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.02%)</title><rect x="517.1" y="627.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="520.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (4 samples, 0.09%)</title><rect x="517.3" y="627.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="520.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) [clone .plt] (3 samples, 0.07%)</title><rect x="518.4" y="627.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="521.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetComparator() const (3 samples, 0.07%)</title><rect x="519.2" y="627.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="522.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (8 samples, 0.18%)</title><rect x="520.0" y="627.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="523.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetAndRefSuperVersion(rocksdb::ColumnFamilyData*) (7 samples, 0.16%)</title><rect x="522.1" y="627.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="525.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (1,042 samples, 23.43%)</title><rect x="524.0" y="627.0" width="276.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="527.0" y="638.0">rocksdb::DBImpl::GetImpl(rocksdb::Rea..</text>
</g>
<g>
<title>/tmp/librocksdbjni7656356053640303256.so (1 samples, 0.02%)</title><rect x="530.3" y="611.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="533.3" y="622.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (3 samples, 0.07%)</title><rect x="530.6" y="611.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="533.6" y="622.0"></text>
</g>
<g>
<title>__tls_get_addr (14 samples, 0.31%)</title><rect x="531.4" y="611.0" width="3.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="534.4" y="622.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="534.9" y="595.0" width="0.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="537.9" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="534.9" y="579.0" width="0.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="537.9" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.02%)</title><rect x="534.9" y="563.0" width="0.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="537.9" y="574.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.02%)</title><rect x="534.9" y="547.0" width="0.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="537.9" y="558.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.02%)</title><rect x="534.9" y="531.0" width="0.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="537.9" y="542.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (2 samples, 0.04%)</title><rect x="535.1" y="611.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="538.1" y="622.0"></text>
</g>
<g>
<title>memcpy@GLIBC_2.2.5 (4 samples, 0.09%)</title><rect x="535.7" y="611.0" width="1.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="538.7" y="622.0"></text>
</g>
<g>
<title>memcpy@plt (3 samples, 0.07%)</title><rect x="536.7" y="611.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="539.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (20 samples, 0.45%)</title><rect x="537.5" y="611.0" width="5.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="540.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (4 samples, 0.09%)</title><rect x="538.3" y="595.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="541.3" y="606.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.02%)</title><rect x="539.4" y="595.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="542.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() [clone .plt] (2 samples, 0.04%)</title><rect x="539.6" y="595.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="542.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (4 samples, 0.09%)</title><rect x="540.2" y="595.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="543.2" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="541.0" y="579.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="544.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (6 samples, 0.13%)</title><rect x="541.2" y="595.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="544.2" y="606.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (6 samples, 0.13%)</title><rect x="541.2" y="579.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="544.2" y="590.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (5 samples, 0.11%)</title><rect x="542.8" y="611.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="545.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (1 samples, 0.02%)</title><rect x="544.1" y="611.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="547.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (10 samples, 0.22%)</title><rect x="544.4" y="611.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="547.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (8 samples, 0.18%)</title><rect x="544.4" y="595.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="547.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (1 samples, 0.02%)</title><rect x="544.4" y="579.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="547.4" y="590.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.02%)</title><rect x="544.7" y="579.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="547.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (4 samples, 0.09%)</title><rect x="544.9" y="579.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="547.9" y="590.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (2 samples, 0.04%)</title><rect x="545.5" y="563.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="548.5" y="574.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (2 samples, 0.04%)</title><rect x="546.0" y="579.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="549.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (2 samples, 0.04%)</title><rect x="546.5" y="595.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="549.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (6 samples, 0.13%)</title><rect x="547.1" y="611.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="550.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) [clone .plt] (2 samples, 0.04%)</title><rect x="548.7" y="611.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="551.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::string*, bool*, rocksdb::MergeContext*, bool, unsigned long*, rocksdb::Env*, unsigned long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*, unsigned long) (2 samples, 0.04%)</title><rect x="549.2" y="611.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="552.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::GetPerfLevel() [clone .plt] (1 samples, 0.02%)</title><rect x="549.7" y="611.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="552.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long, rocksdb::Slice const*) (3 samples, 0.07%)</title><rect x="550.0" y="611.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="553.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (196 samples, 4.41%)</title><rect x="550.8" y="611.0" width="52.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="553.8" y="622.0">rocks..</text>
</g>
<g>
<title>/tmp/librocksdbjni7656356053640303256.so (5 samples, 0.11%)</title><rect x="553.4" y="595.0" width="1.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="556.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long, bool, rocksdb::ReadCallback*, bool*, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*) (180 samples, 4.05%)</title><rect x="554.8" y="595.0" width="47.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="557.8" y="606.0">rock..</text>
</g>
<g>
<title>/tmp/librocksdbjni7656356053640303256.so (167 samples, 3.76%)</title><rect x="555.3" y="579.0" width="44.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="558.3" y="590.0">/tmp..</text>
</g>
<g>
<title>/tmp/librocksdbjni7656356053640303256.so (1 samples, 0.02%)</title><rect x="556.1" y="563.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="559.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (160 samples, 3.60%)</title><rect x="556.4" y="563.0" width="42.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="559.4" y="574.0">rock..</text>
</g>
<g>
<title>/tmp/librocksdbjni7656356053640303256.so (5 samples, 0.11%)</title><rect x="577.3" y="547.0" width="1.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="580.3" y="558.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.02%)</title><rect x="578.6" y="547.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="581.6" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr (8 samples, 0.18%)</title><rect x="578.9" y="547.0" width="2.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="581.9" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (2 samples, 0.04%)</title><rect x="581.0" y="547.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="584.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (63 samples, 1.42%)</title><rect x="581.6" y="547.0" width="16.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="584.6" y="558.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni7656356053640303256.so (10 samples, 0.22%)</title><rect x="586.9" y="531.0" width="2.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="589.9" y="542.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (5 samples, 0.11%)</title><rect x="589.5" y="531.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="592.5" y="542.0"></text>
</g>
<g>
<title>__memcmp_sse4_1 (17 samples, 0.38%)</title><rect x="590.8" y="531.0" width="4.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="593.8" y="542.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.04%)</title><rect x="594.8" y="515.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="597.8" y="526.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.04%)</title><rect x="594.8" y="499.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="597.8" y="510.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.04%)</title><rect x="594.8" y="483.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="597.8" y="494.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.02%)</title><rect x="595.1" y="467.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="598.1" y="478.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.02%)</title><rect x="595.1" y="451.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="598.1" y="462.0"></text>
</g>
<g>
<title>__tls_get_addr (8 samples, 0.18%)</title><rect x="595.4" y="531.0" width="2.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="598.4" y="542.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="597.2" y="515.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="600.2" y="526.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="597.2" y="499.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="600.2" y="510.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.02%)</title><rect x="597.2" y="483.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="600.2" y="494.0"></text>
</g>
<g>
<title>memcmp@plt (3 samples, 0.07%)</title><rect x="597.5" y="531.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="600.5" y="542.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="598.0" y="515.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="601.0" y="526.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="598.0" y="499.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="601.0" y="510.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.02%)</title><rect x="598.0" y="483.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="601.0" y="494.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.04%)</title><rect x="598.3" y="547.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="601.3" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.04%)</title><rect x="598.3" y="531.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="601.3" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.04%)</title><rect x="598.3" y="515.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="601.3" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.07%)</title><rect x="598.8" y="563.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="601.8" y="574.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (11 samples, 0.25%)</title><rect x="599.6" y="579.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="602.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long) (1 samples, 0.02%)</title><rect x="602.5" y="595.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="605.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long, bool, rocksdb::ReadCallback*, bool*, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*) (6 samples, 0.13%)</title><rect x="602.8" y="611.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="605.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long) (1 samples, 0.02%)</title><rect x="604.4" y="611.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="607.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long) [clone .plt] (3 samples, 0.07%)</title><rect x="604.6" y="611.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="607.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (4 samples, 0.09%)</title><rect x="605.4" y="611.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="608.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::GetFromList(std::list&lt;rocksdb::MemTable*, std::allocator&lt;rocksdb::MemTable*&gt; &gt;*, rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (4 samples, 0.09%)</title><rect x="605.4" y="595.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="608.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::GetFromList(std::list&lt;rocksdb::MemTable*, std::allocator&lt;rocksdb::MemTable*&gt; &gt;*, rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.04%)</title><rect x="606.5" y="611.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="609.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::MergeContext::~MergeContext() (5 samples, 0.11%)</title><rect x="607.0" y="611.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="610.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (5 samples, 0.11%)</title><rect x="608.4" y="611.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="611.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::PinnedIteratorsManager::~PinnedIteratorsManager() (1 samples, 0.02%)</title><rect x="609.7" y="611.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="612.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) [clone .plt] (2 samples, 0.04%)</title><rect x="610.0" y="611.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="613.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::StopWatch::~StopWatch() (1 samples, 0.02%)</title><rect x="610.5" y="611.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="613.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::StopWatchNano::StopWatchNano(rocksdb::Env*, bool) (9 samples, 0.20%)</title><rect x="610.7" y="611.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="613.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::StopWatchNano::StopWatchNano(rocksdb::Env*, bool) [clone .plt] (2 samples, 0.04%)</title><rect x="613.1" y="611.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="616.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (5 samples, 0.11%)</title><rect x="613.7" y="611.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="616.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*, unsigned long*, rocksdb::ReadCallback*, bool*, bool) (691 samples, 15.54%)</title><rect x="615.0" y="611.0" width="183.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="618.0" y="622.0">rocksdb::Version::Get(ro..</text>
</g>
<g>
<title>/tmp/librocksdbjni7656356053640303256.so (38 samples, 0.85%)</title><rect x="622.2" y="595.0" width="10.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="625.2" y="606.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni7656356053640303256.so (16 samples, 0.36%)</title><rect x="625.9" y="579.0" width="4.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="628.9" y="590.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni7656356053640303256.so (1 samples, 0.02%)</title><rect x="629.1" y="563.0" width="0.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="632.1" y="574.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.02%)</title><rect x="629.3" y="563.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="632.3" y="574.0"></text>
</g>
<g>
<title>__memcmp_sse4_1 (1 samples, 0.02%)</title><rect x="629.6" y="563.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="632.6" y="574.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="629.9" y="563.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="632.9" y="574.0"></text>
</g>
<g>
<title>__memcmp_sse4_1 (5 samples, 0.11%)</title><rect x="630.1" y="579.0" width="1.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="633.1" y="590.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.04%)</title><rect x="631.4" y="579.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="634.4" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="632.0" y="579.0" width="0.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="635.0" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="632.0" y="563.0" width="0.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="635.0" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.02%)</title><rect x="632.0" y="547.0" width="0.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="635.0" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.04%)</title><rect x="632.2" y="595.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="635.2" y="606.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (2 samples, 0.04%)</title><rect x="632.8" y="595.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="635.8" y="606.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;) (2 samples, 0.04%)</title><rect x="633.3" y="595.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="636.3" y="606.0"></text>
</g>
<g>
<title>rocksdb::FileIndexer::GetNextLevelIndex(unsigned long, unsigned long, int, int, int*, int*) const (4 samples, 0.09%)</title><rect x="633.8" y="595.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="636.8" y="606.0"></text>
</g>
<g>
<title>rocksdb::FileIndexer::GetNextLevelIndex(unsigned long, unsigned long, int, int, int*, int*) const [clone .plt] (1 samples, 0.02%)</title><rect x="634.9" y="595.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="637.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::string*, bool*, rocksdb::MergeContext*, bool, unsigned long*, rocksdb::Env*, unsigned long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*, unsigned long) (7 samples, 0.16%)</title><rect x="635.2" y="595.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="638.2" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="636.0" y="579.0" width="0.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="639.0" y="590.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (2 samples, 0.04%)</title><rect x="636.2" y="579.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="639.2" y="590.0"></text>
</g>
<g>
<title>ret_from_intr (1 samples, 0.02%)</title><rect x="636.8" y="579.0" width="0.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="639.8" y="590.0"></text>
</g>
<g>
<title>do_IRQ (1 samples, 0.02%)</title><rect x="636.8" y="563.0" width="0.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="639.8" y="574.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.02%)</title><rect x="636.8" y="547.0" width="0.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="639.8" y="558.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="636.8" y="531.0" width="0.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="639.8" y="542.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (9 samples, 0.20%)</title><rect x="637.0" y="595.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="640.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (598 samples, 13.45%)</title><rect x="639.4" y="595.0" width="158.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="642.4" y="606.0">rocksdb::TableCache:..</text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (4 samples, 0.09%)</title><rect x="642.6" y="579.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="645.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::FullFilterKeyMayMatch(rocksdb::ReadOptions const&amp;, rocksdb::FilterBlockReader*, rocksdb::Slice const&amp;, bool, rocksdb::SliceTransform const*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) const (6 samples, 0.13%)</title><rect x="643.6" y="579.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="646.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::FullFilterKeyMayMatch(rocksdb::ReadOptions const&amp;, rocksdb::FilterBlockReader*, rocksdb::Slice const&amp;, bool, rocksdb::SliceTransform const*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) const [clone .plt] (2 samples, 0.04%)</title><rect x="645.2" y="579.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="648.2" y="590.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (535 samples, 12.03%)</title><rect x="645.8" y="579.0" width="141.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="648.8" y="590.0">rocksdb::BlockBase..</text>
</g>
<g>
<title>/tmp/librocksdbjni7656356053640303256.so (6 samples, 0.13%)</title><rect x="656.1" y="563.0" width="1.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="659.1" y="574.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.04%)</title><rect x="657.7" y="563.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="660.7" y="574.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context [clone .plt] (1 samples, 0.02%)</title><rect x="658.2" y="563.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="661.2" y="574.0"></text>
</g>
<g>
<title>__libc_free (2 samples, 0.04%)</title><rect x="658.5" y="563.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="661.5" y="574.0"></text>
</g>
<g>
<title>free@plt (2 samples, 0.04%)</title><rect x="659.0" y="563.0" width="0.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="662.0" y="574.0"></text>
</g>
<g>
<title>operator delete(void*) (5 samples, 0.11%)</title><rect x="659.6" y="563.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="662.6" y="574.0"></text>
</g>
<g>
<title>operator delete(void*) [clone .plt] (1 samples, 0.02%)</title><rect x="660.9" y="563.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="663.9" y="574.0"></text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (19 samples, 0.43%)</title><rect x="661.2" y="563.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="664.2" y="574.0"></text>
</g>
<g>
<title>__malloc (2 samples, 0.04%)</title><rect x="661.7" y="547.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="664.7" y="558.0"></text>
</g>
<g>
<title>malloc@plt (1 samples, 0.02%)</title><rect x="662.2" y="547.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="665.2" y="558.0"></text>
</g>
<g>
<title>operator new(unsigned long) (7 samples, 0.16%)</title><rect x="662.5" y="547.0" width="1.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="665.5" y="558.0"></text>
</g>
<g>
<title>operator new(unsigned long) [clone .plt] (1 samples, 0.02%)</title><rect x="664.3" y="547.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="667.3" y="558.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (4 samples, 0.09%)</title><rect x="664.6" y="547.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="667.6" y="558.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::IndexReaderCommon::GetOrReadIndexBlock(bool, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*) const (2 samples, 0.04%)</title><rect x="665.7" y="547.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="668.7" y="558.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (9 samples, 0.20%)</title><rect x="666.2" y="563.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="669.2" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="668.3" y="547.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="671.3" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="668.3" y="531.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="671.3" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.02%)</title><rect x="668.3" y="515.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="671.3" y="526.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::FullFilterKeyMayMatch(rocksdb::ReadOptions const&amp;, rocksdb::FilterBlockReader*, rocksdb::Slice const&amp;, bool, rocksdb::SliceTransform const*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) const (3 samples, 0.07%)</title><rect x="668.6" y="563.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="671.6" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="669.1" y="547.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="672.1" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="669.1" y="531.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="672.1" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.02%)</title><rect x="669.1" y="515.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="672.1" y="526.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::IndexReaderCommon::GetOrReadIndexBlock(bool, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*) const [clone .plt] (1 samples, 0.02%)</title><rect x="669.4" y="563.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="672.4" y="574.0"></text>
</g>
<g>
<title>rocksdb::BlockIter&lt;rocksdb::IndexValue&gt;::status() const (2 samples, 0.04%)</title><rect x="669.7" y="563.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="672.7" y="574.0"></text>
</g>
<g>
<title>rocksdb::BlockIter&lt;rocksdb::Slice&gt;::FindKeyAfterBinarySeek(rocksdb::Slice const&amp;, unsigned int, bool, rocksdb::Comparator const*) (1 samples, 0.02%)</title><rect x="670.2" y="563.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="673.2" y="574.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::DelegateCleanupsTo(rocksdb::Cleanable*) (1 samples, 0.02%)</title><rect x="670.4" y="563.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="673.4" y="574.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::RegisterCleanup(void (*)(void*, void*), void*, void*) (2 samples, 0.04%)</title><rect x="670.7" y="563.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="673.7" y="574.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (2 samples, 0.04%)</title><rect x="671.2" y="563.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="674.2" y="574.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::InitBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::BlockBasedTable::Rep const*, rocksdb::Block*, rocksdb::BlockType, rocksdb::DataBlockIter*, bool) (2 samples, 0.04%)</title><rect x="671.8" y="563.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="674.8" y="574.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::InitBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::BlockBasedTable::Rep const*, rocksdb::Block*, rocksdb::BlockType, rocksdb::DataBlockIter*, bool) [clone .plt] (2 samples, 0.04%)</title><rect x="672.3" y="563.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="675.3" y="574.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::NewDataBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::DataBlockIter*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::Status, rocksdb::FilePrefetchBuffer*, bool) const (187 samples, 4.21%)</title><rect x="672.8" y="563.0" width="49.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="675.8" y="574.0">rocks..</text>
</g>
<g>
<title>_ZNK7rocksdb15BlockBasedTable28MaybeReadBlockAndLoadToCacheINS_5BlockEEENS_6StatusEPNS_18FilePrefetchBufferERKNS_11ReadOptionsERKNS_11BlockHandleERKNS_17UncompressionDictEPNS_13CachableEntryIT_EENS_9BlockTypeEPNS_10GetContextEPNS_23BlockCacheLookupContext (2 samples, 0.04%)</title><rect x="675.5" y="547.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="678.5" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.04%)</title><rect x="676.0" y="547.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="679.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::Block::NewDataIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long, rocksdb::DataBlockIter*, rocksdb::Statistics*, bool) (5 samples, 0.11%)</title><rect x="676.6" y="547.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="679.6" y="558.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::RegisterCleanup(void (*)(void*, void*), void*, void*) (1 samples, 0.02%)</title><rect x="677.9" y="547.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="680.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::InitBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::BlockBasedTable::Rep const*, rocksdb::Block*, rocksdb::BlockType, rocksdb::DataBlockIter*, bool) (3 samples, 0.07%)</title><rect x="678.1" y="547.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="681.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::Block::NewDataIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long, rocksdb::DataBlockIter*, rocksdb::Statistics*, bool) (1 samples, 0.02%)</title><rect x="678.7" y="531.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="681.7" y="542.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::MaybeReadBlockAndLoadToCache&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::BlockContents*) const (3 samples, 0.07%)</title><rect x="678.9" y="547.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="681.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (161 samples, 3.62%)</title><rect x="679.7" y="547.0" width="42.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="682.7" y="558.0">rock..</text>
</g>
<g>
<title>rocksdb::BlockBasedTable::GetCacheKey(char const*, unsigned long, rocksdb::BlockHandle const&amp;, char*) (2 samples, 0.04%)</title><rect x="680.8" y="531.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="683.8" y="542.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::GetDataBlockFromCache&lt;rocksdb::Block&gt;(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::Cache*, rocksdb::Cache*, rocksdb::ReadOptions const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::UncompressionDict const&amp;, rocksdb::BlockType, rocksdb::GetContext*) const (2 samples, 0.04%)</title><rect x="681.3" y="531.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="684.3" y="542.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::MaybeReadBlockAndLoadToCache&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::BlockContents*) const (148 samples, 3.33%)</title><rect x="681.9" y="531.0" width="39.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="684.9" y="542.0">roc..</text>
</g>
<g>
<title>memcpy@GLIBC_2.2.5 (3 samples, 0.07%)</title><rect x="685.6" y="515.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="688.6" y="526.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::GetCacheKey(char const*, unsigned long, rocksdb::BlockHandle const&amp;, char*) (1 samples, 0.02%)</title><rect x="686.4" y="515.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="689.4" y="526.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::GetEntryFromCache(rocksdb::Cache*, rocksdb::Slice const&amp;, rocksdb::BlockType, rocksdb::GetContext*) const (6 samples, 0.13%)</title><rect x="686.6" y="515.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="689.6" y="526.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::CheckBlockChecksum() (1 samples, 0.02%)</title><rect x="688.2" y="515.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="691.2" y="526.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::ReadBlockContents() (2 samples, 0.04%)</title><rect x="688.5" y="515.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="691.5" y="526.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni7656356053640303256.so (1 samples, 0.02%)</title><rect x="688.5" y="499.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="691.5" y="510.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContents(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (1 samples, 0.02%)</title><rect x="688.8" y="499.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="691.8" y="510.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.02%)</title><rect x="688.8" y="483.0" width="0.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="691.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::CachableEntry&lt;rocksdb::Block&gt;::ReleaseResource() (5 samples, 0.11%)</title><rect x="689.0" y="515.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="692.0" y="526.0"></text>
</g>
<g>
<title>rocksdb::CachableEntry&lt;rocksdb::Block&gt;::ReleaseResource() [clone .plt] (2 samples, 0.04%)</title><rect x="690.4" y="515.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="693.4" y="526.0"></text>
</g>
<g>
<title>rocksdb::LRUCache::Value(rocksdb::Cache::Handle*) (1 samples, 0.02%)</title><rect x="690.9" y="515.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="693.9" y="526.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::GetDataBlockFromCache&lt;rocksdb::Block&gt;(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::Cache*, rocksdb::Cache*, rocksdb::ReadOptions const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::UncompressionDict const&amp;, rocksdb::BlockType, rocksdb::GetContext*) const (111 samples, 2.50%)</title><rect x="691.1" y="515.0" width="29.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="694.1" y="526.0">ro..</text>
</g>
<g>
<title>rocksdb::BlockBasedTable::GetEntryFromCache(rocksdb::Cache*, rocksdb::Slice const&amp;, rocksdb::BlockType, rocksdb::GetContext*) const (94 samples, 2.11%)</title><rect x="691.9" y="499.0" width="25.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="694.9" y="510.0">r..</text>
</g>
<g>
<title>ROCKSDB_XXH3p_64bits (12 samples, 0.27%)</title><rect x="692.5" y="483.0" width="3.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="695.5" y="494.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.04%)</title><rect x="695.1" y="467.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="698.1" y="478.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.04%)</title><rect x="695.1" y="451.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="698.1" y="462.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.04%)</title><rect x="695.1" y="435.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="698.1" y="446.0"></text>
</g>
<g>
<title>ROCKSDB_XXH3p_64bits@plt (1 samples, 0.02%)</title><rect x="695.7" y="483.0" width="0.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="698.7" y="494.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.02%)</title><rect x="695.9" y="483.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="698.9" y="494.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.04%)</title><rect x="696.2" y="483.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="699.2" y="494.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (4 samples, 0.09%)</title><rect x="696.7" y="483.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="699.7" y="494.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.02%)</title><rect x="697.5" y="467.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="700.5" y="478.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.02%)</title><rect x="697.5" y="451.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="700.5" y="462.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="697.5" y="435.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="700.5" y="446.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.02%)</title><rect x="697.5" y="419.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="700.5" y="430.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="697.5" y="403.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="700.5" y="414.0"></text>
</g>
<g>
<title>run_timer_softirq (1 samples, 0.02%)</title><rect x="697.5" y="387.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="700.5" y="398.0"></text>
</g>
<g>
<title>rocksdb::Hash64(char const*, unsigned long) (3 samples, 0.07%)</title><rect x="697.8" y="483.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="700.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::LRUCache::GetShard(int) (3 samples, 0.07%)</title><rect x="698.6" y="483.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="701.6" y="494.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::LRU_Remove(rocksdb::LRUHandle*) [clone .plt] (1 samples, 0.02%)</title><rect x="699.4" y="483.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="702.4" y="494.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (55 samples, 1.24%)</title><rect x="699.6" y="483.0" width="14.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="702.6" y="494.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni7656356053640303256.so (1 samples, 0.02%)</title><rect x="700.7" y="467.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="703.7" y="478.0"></text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 0.04%)</title><rect x="701.0" y="467.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="704.0" y="478.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.04%)</title><rect x="701.0" y="451.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="704.0" y="462.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.04%)</title><rect x="701.0" y="435.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="704.0" y="446.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.07%)</title><rect x="701.5" y="467.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="704.5" y="478.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.04%)</title><rect x="701.8" y="451.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="704.8" y="462.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.04%)</title><rect x="701.8" y="435.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="704.8" y="446.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.04%)</title><rect x="701.8" y="419.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="704.8" y="430.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.02%)</title><rect x="702.0" y="403.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="705.0" y="414.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.02%)</title><rect x="702.0" y="387.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="705.0" y="398.0"></text>
</g>
<g>
<title>malloc_usable_size (2 samples, 0.04%)</title><rect x="702.3" y="467.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="705.3" y="478.0"></text>
</g>
<g>
<title>pthread_mutex_lock (14 samples, 0.31%)</title><rect x="702.8" y="467.0" width="3.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="705.8" y="478.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (5 samples, 0.11%)</title><rect x="706.5" y="467.0" width="1.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="709.5" y="478.0"></text>
</g>
<g>
<title>pthread_mutex_unlock@plt (1 samples, 0.02%)</title><rect x="707.9" y="467.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="710.9" y="478.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::LRU_Remove(rocksdb::LRUHandle*) (6 samples, 0.13%)</title><rect x="708.1" y="467.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="711.1" y="478.0"></text>
</g>
<g>
<title>rocksdb::LRUHandleTable::FindPointer(rocksdb::Slice const&amp;, unsigned int) [clone .plt] (1 samples, 0.02%)</title><rect x="709.7" y="467.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="712.7" y="478.0"></text>
</g>
<g>
<title>rocksdb::LRUHandleTable::Lookup(rocksdb::Slice const&amp;, unsigned int) (16 samples, 0.36%)</title><rect x="710.0" y="467.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="713.0" y="478.0"></text>
</g>
<g>
<title>__memcmp_sse4_1 (4 samples, 0.09%)</title><rect x="710.0" y="451.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="713.0" y="462.0"></text>
</g>
<g>
<title>rocksdb::LRUHandleTable::FindPointer(rocksdb::Slice const&amp;, unsigned int) (12 samples, 0.27%)</title><rect x="711.0" y="451.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="714.0" y="462.0"></text>
</g>
<g>
<title>rocksdb::LRUHandleTable::Lookup(rocksdb::Slice const&amp;, unsigned int) (2 samples, 0.04%)</title><rect x="714.2" y="483.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="717.2" y="494.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (2 samples, 0.04%)</title><rect x="714.8" y="483.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="717.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (3 samples, 0.07%)</title><rect x="715.3" y="483.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="718.3" y="494.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() [clone .plt] (2 samples, 0.04%)</title><rect x="716.1" y="483.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="719.1" y="494.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="716.4" y="467.0" width="0.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="719.4" y="478.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="716.4" y="451.0" width="0.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="719.4" y="462.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.02%)</title><rect x="716.4" y="435.0" width="0.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="719.4" y="446.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (1 samples, 0.02%)</title><rect x="716.6" y="483.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="719.6" y="494.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const [clone .plt] (1 samples, 0.02%)</title><rect x="716.9" y="499.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="719.9" y="510.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (2 samples, 0.04%)</title><rect x="717.2" y="499.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="720.2" y="510.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::GetUsage(rocksdb::Cache::Handle*) const (5 samples, 0.11%)</title><rect x="717.7" y="499.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="720.7" y="510.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (6 samples, 0.13%)</title><rect x="719.0" y="499.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="722.0" y="510.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (2 samples, 0.04%)</title><rect x="720.6" y="515.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="723.6" y="526.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (5 samples, 0.11%)</title><rect x="721.1" y="531.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="724.1" y="542.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (87 samples, 1.96%)</title><rect x="722.5" y="563.0" width="23.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="725.5" y="574.0">r..</text>
</g>
<g>
<title>/tmp/librocksdbjni7656356053640303256.so (2 samples, 0.04%)</title><rect x="727.5" y="547.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="730.5" y="558.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context [clone .plt] (2 samples, 0.04%)</title><rect x="728.0" y="547.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="731.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::BlockIter&lt;rocksdb::Slice&gt;::FindKeyAfterBinarySeek(rocksdb::Slice const&amp;, unsigned int, bool, rocksdb::Comparator const*) (51 samples, 1.15%)</title><rect x="728.6" y="547.0" width="13.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="731.6" y="558.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni7656356053640303256.so (3 samples, 0.07%)</title><rect x="729.4" y="531.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="732.4" y="542.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (3 samples, 0.07%)</title><rect x="730.2" y="531.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="733.2" y="542.0"></text>
</g>
<g>
<title>__memmove_sse2_unaligned_erms (4 samples, 0.09%)</title><rect x="730.9" y="531.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="733.9" y="542.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.07%)</title><rect x="732.0" y="531.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="735.0" y="542.0"></text>
</g>
<g>
<title>memcpy@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="732.8" y="531.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="735.8" y="542.0"></text>
</g>
<g>
<title>memcpy@plt (1 samples, 0.02%)</title><rect x="733.3" y="531.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="736.3" y="542.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (20 samples, 0.45%)</title><rect x="733.6" y="531.0" width="5.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="736.6" y="542.0"></text>
</g>
<g>
<title>rocksdb::InternalKeyComparator::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (12 samples, 0.27%)</title><rect x="738.9" y="531.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="741.9" y="542.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni7656356053640303256.so (1 samples, 0.02%)</title><rect x="740.0" y="515.0" width="0.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="743.0" y="526.0"></text>
</g>
<g>
<title>__memcmp_sse4_1 (5 samples, 0.11%)</title><rect x="740.2" y="515.0" width="1.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="743.2" y="526.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="741.6" y="515.0" width="0.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="744.6" y="526.0"></text>
</g>
<g>
<title>memcmp@plt (1 samples, 0.02%)</title><rect x="741.8" y="515.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="744.8" y="526.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (8 samples, 0.18%)</title><rect x="742.1" y="547.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="745.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::InternalKeyComparator::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (5 samples, 0.11%)</title><rect x="744.2" y="547.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="747.2" y="558.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni7656356053640303256.so (1 samples, 0.02%)</title><rect x="745.0" y="531.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="748.0" y="542.0"></text>
</g>
<g>
<title>__memcmp_sse4_1 (1 samples, 0.02%)</title><rect x="745.3" y="531.0" width="0.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="748.3" y="542.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::value() const (2 samples, 0.04%)</title><rect x="745.5" y="563.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="748.5" y="574.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::~DataBlockIter() (1 samples, 0.02%)</title><rect x="746.1" y="563.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="749.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (12 samples, 0.27%)</title><rect x="746.3" y="563.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="749.3" y="574.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::DelegateCleanupsTo(rocksdb::Cleanable*) (2 samples, 0.04%)</title><rect x="749.0" y="547.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="752.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::RegisterCleanup(void (*)(void*, void*), void*, void*) (2 samples, 0.04%)</title><rect x="749.0" y="531.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="752.0" y="542.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (120 samples, 2.70%)</title><rect x="749.5" y="563.0" width="31.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="752.5" y="574.0">ro..</text>
</g>
<g>
<title>/tmp/librocksdbjni7656356053640303256.so (5 samples, 0.11%)</title><rect x="767.6" y="547.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="770.6" y="558.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="768.6" y="531.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="771.6" y="542.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="768.6" y="515.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="771.6" y="526.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.02%)</title><rect x="768.6" y="499.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="771.6" y="510.0"></text>
</g>
<g>
<title>__memcmp_sse4_1 (8 samples, 0.18%)</title><rect x="768.9" y="547.0" width="2.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="771.9" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr (7 samples, 0.16%)</title><rect x="771.0" y="547.0" width="1.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="774.0" y="558.0"></text>
</g>
<g>
<title>memcmp@plt (1 samples, 0.02%)</title><rect x="772.9" y="547.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="775.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::BlockHandle::DecodeFrom(rocksdb::Slice*) (2 samples, 0.04%)</title><rect x="773.1" y="547.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="776.1" y="558.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="773.4" y="531.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="776.4" y="542.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="773.4" y="515.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="776.4" y="526.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.02%)</title><rect x="773.4" y="499.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="776.4" y="510.0"></text>
</g>
<g>
<title>rocksdb::BlockHandle::DecodeFrom(rocksdb::Slice*) [clone .plt] (2 samples, 0.04%)</title><rect x="773.7" y="547.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="776.7" y="558.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (12 samples, 0.27%)</title><rect x="774.2" y="547.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="777.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::BlockHandle::DecodeFrom(rocksdb::Slice*) (3 samples, 0.07%)</title><rect x="775.5" y="531.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="778.5" y="542.0"></text>
</g>
<g>
<title>rocksdb::GetVarint64Ptr(char const*, char const*, unsigned long*) (4 samples, 0.09%)</title><rect x="776.3" y="531.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="779.3" y="542.0"></text>
</g>
<g>
<title>rocksdb::UserComparatorWrapper::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (12 samples, 0.27%)</title><rect x="777.4" y="547.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="780.4" y="558.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.02%)</title><rect x="779.2" y="531.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="782.2" y="542.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.07%)</title><rect x="779.5" y="531.0" width="0.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="782.5" y="542.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="780.3" y="531.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="783.3" y="542.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="780.3" y="515.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="783.3" y="526.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.02%)</title><rect x="780.3" y="499.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="783.3" y="510.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.07%)</title><rect x="780.6" y="547.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="783.6" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.07%)</title><rect x="780.6" y="531.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="783.6" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.07%)</title><rect x="780.6" y="515.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="783.6" y="526.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::~IndexBlockIter() (2 samples, 0.04%)</title><rect x="781.4" y="563.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="784.4" y="574.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (8 samples, 0.18%)</title><rect x="781.9" y="563.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="784.9" y="574.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) [clone .plt] (3 samples, 0.07%)</title><rect x="784.0" y="563.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="787.0" y="574.0"></text>
</g>
<g>
<title>rocksdb::InternalKeyComparator::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.02%)</title><rect x="784.8" y="563.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="787.8" y="574.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (6 samples, 0.13%)</title><rect x="785.1" y="563.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="788.1" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="786.4" y="547.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="789.4" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="786.4" y="531.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="789.4" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.02%)</title><rect x="786.4" y="515.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="789.4" y="526.0"></text>
</g>
<g>
<title>rocksdb::UserComparatorWrapper::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (4 samples, 0.09%)</title><rect x="786.7" y="563.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="789.7" y="574.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewIndexIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) const (6 samples, 0.13%)</title><rect x="787.7" y="579.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="790.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;) (4 samples, 0.09%)</title><rect x="789.3" y="579.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="792.3" y="590.0"></text>
</g>
<g>
<title>rocksdb::BlockCacheLookupContext::~BlockCacheLookupContext() (3 samples, 0.07%)</title><rect x="790.4" y="579.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="793.4" y="590.0"></text>
</g>
<g>
<title>rocksdb::BlockIter&lt;rocksdb::IndexValue&gt;::status() const (1 samples, 0.02%)</title><rect x="791.2" y="579.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="794.2" y="590.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (3 samples, 0.07%)</title><rect x="791.4" y="579.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="794.4" y="590.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (1 samples, 0.02%)</title><rect x="792.2" y="579.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="795.2" y="590.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="792.5" y="579.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="795.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) [clone .plt] (1 samples, 0.02%)</title><rect x="793.0" y="579.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="796.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::~DataBlockIter() (1 samples, 0.02%)</title><rect x="793.3" y="579.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="796.3" y="590.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::~DataBlockIter() [clone .plt] (1 samples, 0.02%)</title><rect x="793.6" y="579.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="796.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (3 samples, 0.07%)</title><rect x="793.8" y="579.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="796.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (3 samples, 0.07%)</title><rect x="794.6" y="579.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="797.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::~IndexBlockIter() (3 samples, 0.07%)</title><rect x="795.4" y="579.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="798.4" y="590.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::~IndexBlockIter() [clone .plt] (1 samples, 0.02%)</title><rect x="796.2" y="579.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="799.2" y="590.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (2 samples, 0.04%)</title><rect x="796.5" y="579.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="799.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) [clone .plt] (3 samples, 0.07%)</title><rect x="797.0" y="579.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="800.0" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="797.8" y="579.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="800.8" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="797.8" y="563.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="800.8" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.02%)</title><rect x="797.8" y="547.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="800.8" y="558.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="798.1" y="595.0" width="0.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="801.1" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="798.1" y="579.0" width="0.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="801.1" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.02%)</title><rect x="798.1" y="563.0" width="0.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="801.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::Version::IsFilterSkipped(int, bool) (7 samples, 0.16%)</title><rect x="798.3" y="611.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="801.3" y="622.0"></text>
</g>
<g>
<title>rocksdb::Version::IsFilterSkipped(int, bool) [clone .plt] (1 samples, 0.02%)</title><rect x="800.2" y="611.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="803.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (5 samples, 0.11%)</title><rect x="800.5" y="627.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="803.5" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="801.5" y="611.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="804.5" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="801.5" y="595.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="804.5" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.02%)</title><rect x="801.5" y="579.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="804.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) [clone .plt] (2 samples, 0.04%)</title><rect x="801.8" y="627.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="804.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long, rocksdb::Slice const*) (2 samples, 0.04%)</title><rect x="802.3" y="627.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="805.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long, rocksdb::Slice const*) [clone .plt] (1 samples, 0.02%)</title><rect x="802.9" y="627.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="805.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (1 samples, 0.02%)</title><rect x="803.1" y="627.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="806.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (4 samples, 0.09%)</title><rect x="803.4" y="627.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="806.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) [clone .plt] (1 samples, 0.02%)</title><rect x="804.5" y="627.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="807.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::MergeContext::~MergeContext() (2 samples, 0.04%)</title><rect x="804.7" y="627.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="807.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::MergeContext::~MergeContext() [clone .plt] (1 samples, 0.02%)</title><rect x="805.2" y="627.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="808.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::PerfStepTimer::Start() (7 samples, 0.16%)</title><rect x="805.5" y="627.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="808.5" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="807.1" y="611.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="810.1" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="807.1" y="595.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="810.1" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.02%)</title><rect x="807.1" y="579.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="810.1" y="590.0"></text>
</g>
<g>
<title>rocksdb::PerfStepTimer::Start() [clone .plt] (2 samples, 0.04%)</title><rect x="807.4" y="627.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="810.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::StopWatch::~StopWatch() (2 samples, 0.04%)</title><rect x="807.9" y="627.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="810.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*, unsigned long*, rocksdb::ReadCallback*, bool*, bool) (8 samples, 0.18%)</title><rect x="808.4" y="627.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="811.4" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="810.3" y="611.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="813.3" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="810.3" y="595.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="813.3" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.02%)</title><rect x="810.3" y="579.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="813.3" y="590.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*, unsigned long*, rocksdb::ReadCallback*, bool*, bool) [clone .plt] (1 samples, 0.02%)</title><rect x="810.6" y="627.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="813.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (2 samples, 0.04%)</title><rect x="810.8" y="643.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="813.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::string*) (6 samples, 0.13%)</title><rect x="811.3" y="659.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="814.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (2 samples, 0.04%)</title><rect x="812.9" y="659.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="815.9" y="670.0"></text>
</g>
<g>
<title>std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long) (1 samples, 0.02%)</title><rect x="813.5" y="675.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="816.5" y="686.0"></text>
</g>
<g>
<title>std::string::assign(char const*, unsigned long) (10 samples, 0.22%)</title><rect x="813.7" y="675.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="816.7" y="686.0"></text>
</g>
<g>
<title>std::string::assign(char const*, unsigned long) [clone .plt] (1 samples, 0.02%)</title><rect x="816.4" y="675.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="819.4" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (4 samples, 0.09%)</title><rect x="816.7" y="691.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="819.7" y="702.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) (93 samples, 2.09%)</title><rect x="817.7" y="691.0" width="24.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="820.7" y="702.0">r..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.07%)</title><rect x="818.5" y="675.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="821.5" y="686.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.04%)</title><rect x="819.3" y="675.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="822.3" y="686.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.02%)</title><rect x="819.8" y="675.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="822.8" y="686.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.04%)</title><rect x="820.1" y="675.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="823.1" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.02%)</title><rect x="820.6" y="675.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="823.6" y="686.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.11%)</title><rect x="820.9" y="675.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="823.9" y="686.0"></text>
</g>
<g>
<title>__memmove_ssse3 (5 samples, 0.11%)</title><rect x="822.2" y="675.0" width="1.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="825.2" y="686.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.02%)</title><rect x="823.6" y="675.0" width="0.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="826.6" y="686.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.07%)</title><rect x="823.8" y="675.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="826.8" y="686.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.02%)</title><rect x="823.8" y="659.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="826.8" y="670.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.02%)</title><rect x="824.1" y="659.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="827.1" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.02%)</title><rect x="824.4" y="659.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="827.4" y="670.0"></text>
</g>
<g>
<title>jni_NewByteArray (57 samples, 1.28%)</title><rect x="824.6" y="675.0" width="15.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="827.6" y="686.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.02%)</title><rect x="825.9" y="659.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="828.9" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (7 samples, 0.16%)</title><rect x="826.2" y="659.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="829.2" y="670.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (6 samples, 0.13%)</title><rect x="828.1" y="659.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="831.1" y="670.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.07%)</title><rect x="829.7" y="659.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="832.7" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.07%)</title><rect x="830.5" y="659.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="833.5" y="670.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (32 samples, 0.72%)</title><rect x="831.3" y="659.0" width="8.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="834.3" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (23 samples, 0.52%)</title><rect x="832.8" y="643.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="835.8" y="654.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.02%)</title><rect x="832.8" y="627.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="835.8" y="638.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (13 samples, 0.29%)</title><rect x="833.1" y="627.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="836.1" y="638.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.02%)</title><rect x="833.6" y="611.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="836.6" y="622.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (5 samples, 0.11%)</title><rect x="833.9" y="611.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="836.9" y="622.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.02%)</title><rect x="835.2" y="611.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="838.2" y="622.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (3 samples, 0.07%)</title><rect x="835.5" y="611.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="838.5" y="622.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="836.3" y="611.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="839.3" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="836.3" y="595.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="839.3" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.02%)</title><rect x="836.3" y="579.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="839.3" y="590.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.02%)</title><rect x="836.6" y="627.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="839.6" y="638.0"></text>
</g>
<g>
<title>__tls_get_addr (7 samples, 0.16%)</title><rect x="836.8" y="627.0" width="1.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="839.8" y="638.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.02%)</title><rect x="838.7" y="627.0" width="0.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="841.7" y="638.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.07%)</title><rect x="838.9" y="643.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="841.9" y="654.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (10 samples, 0.22%)</title><rect x="839.7" y="675.0" width="2.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="842.7" y="686.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.04%)</title><rect x="840.8" y="659.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="843.8" y="670.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.02%)</title><rect x="841.3" y="659.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="844.3" y="670.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.02%)</title><rect x="841.6" y="659.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="844.6" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.02%)</title><rect x="841.9" y="659.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="844.9" y="670.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.02%)</title><rect x="842.1" y="659.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="845.1" y="670.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (3 samples, 0.07%)</title><rect x="842.4" y="691.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="845.4" y="702.0"></text>
</g>
<g>
<title>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::string const&amp;) (3 samples, 0.07%)</title><rect x="843.2" y="707.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="846.2" y="718.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_destroy(std::allocator&lt;char&gt; const&amp;) [clone .plt] (1 samples, 0.02%)</title><rect x="844.0" y="707.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="847.0" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="844.3" y="707.0" width="0.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="847.3" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="844.3" y="691.0" width="0.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="847.3" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.02%)</title><rect x="844.3" y="675.0" width="0.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="847.3" y="686.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.38%)</title><rect x="844.5" y="723.0" width="4.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="847.5" y="734.0"></text>
</g>
<g>
<title>LZ4_decompress_safe (2 samples, 0.04%)</title><rect x="844.5" y="707.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="847.5" y="718.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.27%)</title><rect x="845.0" y="707.0" width="3.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="848.0" y="718.0"></text>
</g>
<g>
<title>__memcpy_ssse3 (7 samples, 0.16%)</title><rect x="845.0" y="691.0" width="1.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="848.0" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.04%)</title><rect x="846.4" y="675.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="849.4" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.04%)</title><rect x="846.4" y="659.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="849.4" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.04%)</title><rect x="846.4" y="643.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="849.4" y="654.0"></text>
</g>
<g>
<title>std::string::_M_mutate(unsigned long, unsigned long, unsigned long) (5 samples, 0.11%)</title><rect x="846.9" y="691.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="849.9" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="848.0" y="675.0" width="0.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="851.0" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="848.0" y="659.0" width="0.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="851.0" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.02%)</title><rect x="848.0" y="643.0" width="0.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="851.0" y="654.0"></text>
</g>
<g>
<title>pread64 (3 samples, 0.07%)</title><rect x="848.2" y="707.0" width="0.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="851.2" y="718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.07%)</title><rect x="848.2" y="691.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="851.2" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.07%)</title><rect x="848.2" y="675.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="851.2" y="686.0"></text>
</g>
<g>
<title>__x64_sys_pread64 (3 samples, 0.07%)</title><rect x="848.2" y="659.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="851.2" y="670.0"></text>
</g>
<g>
<title>ksys_pread64 (3 samples, 0.07%)</title><rect x="848.2" y="643.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="851.2" y="654.0"></text>
</g>
<g>
<title>vfs_read (3 samples, 0.07%)</title><rect x="848.2" y="627.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="851.2" y="638.0"></text>
</g>
<g>
<title>__vfs_read (3 samples, 0.07%)</title><rect x="848.2" y="611.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="851.2" y="622.0"></text>
</g>
<g>
<title>new_sync_read (3 samples, 0.07%)</title><rect x="848.2" y="595.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="851.2" y="606.0"></text>
</g>
<g>
<title>ext4_file_read_iter (3 samples, 0.07%)</title><rect x="848.2" y="579.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="851.2" y="590.0"></text>
</g>
<g>
<title>generic_file_read_iter (3 samples, 0.07%)</title><rect x="848.2" y="563.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="851.2" y="574.0"></text>
</g>
<g>
<title>pagecache_get_page (1 samples, 0.02%)</title><rect x="848.2" y="547.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="851.2" y="558.0"></text>
</g>
<g>
<title>xas_load (1 samples, 0.02%)</title><rect x="848.2" y="531.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="851.2" y="542.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.02%)</title><rect x="848.5" y="547.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="851.5" y="558.0"></text>
</g>
<g>
<title>touch_atime (1 samples, 0.02%)</title><rect x="848.8" y="547.0" width="0.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="851.8" y="558.0"></text>
</g>
<g>
<title>atime_needs_update (1 samples, 0.02%)</title><rect x="848.8" y="531.0" width="0.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="851.8" y="542.0"></text>
</g>
<g>
<title>__libc_free (3 samples, 0.07%)</title><rect x="849.0" y="723.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="852.0" y="734.0"></text>
</g>
<g>
<title>__malloc (18 samples, 0.40%)</title><rect x="849.8" y="723.0" width="4.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="852.8" y="734.0"></text>
</g>
<g>
<title>operator new(unsigned long) [clone .plt] (2 samples, 0.04%)</title><rect x="854.6" y="723.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="857.6" y="734.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() (4 samples, 0.09%)</title><rect x="855.1" y="723.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="858.1" y="734.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() [clone .plt] (3 samples, 0.07%)</title><rect x="856.2" y="723.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="859.2" y="734.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (3 samples, 0.07%)</title><rect x="857.0" y="723.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="860.0" y="734.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) [clone .plt] (2 samples, 0.04%)</title><rect x="857.8" y="723.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="860.8" y="734.0"></text>
</g>
<g>
<title>std::string::_M_mutate(unsigned long, unsigned long, unsigned long) (2 samples, 0.04%)</title><rect x="858.3" y="723.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="861.3" y="734.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) (5 samples, 0.11%)</title><rect x="858.8" y="723.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="861.8" y="734.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="859.9" y="707.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="862.9" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="859.9" y="691.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="862.9" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.02%)</title><rect x="859.9" y="675.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="862.9" y="686.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) [clone .plt] (1 samples, 0.02%)</title><rect x="860.2" y="723.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="863.2" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/DAOByteOnlyConverter.tuneBufToArray (25 samples, 0.56%)</title><rect x="860.4" y="755.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="863.4" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/DAOByteOnlyConverter.readByteArray (25 samples, 0.56%)</title><rect x="860.4" y="739.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="863.4" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (9 samples, 0.20%)</title><rect x="860.7" y="723.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="863.7" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (9 samples, 0.20%)</title><rect x="860.7" y="707.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="863.7" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (15 samples, 0.34%)</title><rect x="863.1" y="723.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="866.1" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (12 samples, 0.27%)</title><rect x="863.9" y="707.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="866.9" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (12 samples, 0.27%)</title><rect x="863.9" y="691.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="866.9" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.07%)</title><rect x="864.4" y="675.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="867.4" y="686.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 0.07%)</title><rect x="864.4" y="659.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="867.4" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (7 samples, 0.16%)</title><rect x="865.2" y="675.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="868.2" y="686.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,212 samples, 27.25%)</title><rect x="867.1" y="899.0" width="321.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="870.1" y="910.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="868.7" y="883.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="871.7" y="894.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.04%)</title><rect x="868.7" y="867.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="871.7" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="868.7" y="851.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="871.7" y="862.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.07%)</title><rect x="869.2" y="883.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="872.2" y="894.0"></text>
</g>
<g>
<title>gettimeofday@plt (3 samples, 0.07%)</title><rect x="870.0" y="883.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="873.0" y="894.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (3 samples, 0.07%)</title><rect x="870.8" y="883.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="873.8" y="894.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (503 samples, 11.31%)</title><rect x="871.6" y="883.0" width="133.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="874.6" y="894.0">one/nio/net/Nativ..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (485 samples, 10.91%)</title><rect x="876.4" y="867.0" width="128.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="879.4" y="878.0">one/nio/net/Nati..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (6 samples, 0.13%)</title><rect x="878.7" y="851.0" width="1.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="881.7" y="862.0"></text>
</g>
<g>
<title>[unknown] (452 samples, 10.16%)</title><rect x="880.3" y="851.0" width="120.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="883.3" y="862.0">[unknown]</text>
</g>
<g>
<title>[unknown] (15 samples, 0.34%)</title><rect x="880.3" y="835.0" width="4.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="883.3" y="846.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.34%)</title><rect x="880.3" y="819.0" width="4.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="883.3" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="880.3" y="803.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="883.3" y="814.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (3 samples, 0.07%)</title><rect x="880.6" y="803.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="883.6" y="814.0"></text>
</g>
<g>
<title>clock_gettime (11 samples, 0.25%)</title><rect x="881.4" y="803.0" width="2.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="884.4" y="814.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.18%)</title><rect x="882.2" y="787.0" width="2.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="885.2" y="798.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (5 samples, 0.11%)</title><rect x="884.3" y="835.0" width="1.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="887.3" y="846.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (3 samples, 0.07%)</title><rect x="885.6" y="835.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="888.6" y="846.0"></text>
</g>
<g>
<title>epoll_wait (429 samples, 9.65%)</title><rect x="886.4" y="835.0" width="113.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="889.4" y="846.0">epoll_wait</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (406 samples, 9.13%)</title><rect x="892.5" y="819.0" width="107.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="895.5" y="830.0">entry_SYSCALL..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (9 samples, 0.20%)</title><rect x="892.5" y="803.0" width="2.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="895.5" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (397 samples, 8.93%)</title><rect x="894.9" y="803.0" width="105.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="897.9" y="814.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_epoll_wait (306 samples, 6.88%)</title><rect x="918.5" y="787.0" width="81.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="921.5" y="798.0">__x64_sys..</text>
</g>
<g>
<title>__fdget (3 samples, 0.07%)</title><rect x="918.8" y="771.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="921.8" y="782.0"></text>
</g>
<g>
<title>do_epoll_wait (300 samples, 6.75%)</title><rect x="919.6" y="771.0" width="79.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="922.6" y="782.0">do_epoll_..</text>
</g>
<g>
<title>__fdget (25 samples, 0.56%)</title><rect x="920.9" y="755.0" width="6.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="923.9" y="766.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.07%)</title><rect x="920.9" y="739.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="923.9" y="750.0"></text>
</g>
<g>
<title>__fget_light (22 samples, 0.49%)</title><rect x="921.7" y="739.0" width="5.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="924.7" y="750.0"></text>
</g>
<g>
<title>__fget (21 samples, 0.47%)</title><rect x="922.0" y="723.0" width="5.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="925.0" y="734.0"></text>
</g>
<g>
<title>__fget_light (5 samples, 0.11%)</title><rect x="927.6" y="755.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="930.6" y="766.0"></text>
</g>
<g>
<title>ep_poll (263 samples, 5.91%)</title><rect x="928.9" y="755.0" width="69.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="931.9" y="766.0">ep_poll</text>
</g>
<g>
<title>_raw_spin_lock_irq (7 samples, 0.16%)</title><rect x="937.1" y="739.0" width="1.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="940.1" y="750.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.19 (208 samples, 4.68%)</title><rect x="939.0" y="739.0" width="55.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="942.0" y="750.0">ep_sc..</text>
</g>
<g>
<title>_cond_resched (2 samples, 0.04%)</title><rect x="948.8" y="723.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="951.8" y="734.0"></text>
</g>
<g>
<title>ep_item_poll.isra.16 (1 samples, 0.02%)</title><rect x="949.3" y="723.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="952.3" y="734.0"></text>
</g>
<g>
<title>ep_send_events_proc (145 samples, 3.26%)</title><rect x="949.6" y="723.0" width="38.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="952.6" y="734.0">ep_..</text>
</g>
<g>
<title>ep_item_poll.isra.16 (111 samples, 2.50%)</title><rect x="955.4" y="707.0" width="29.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="958.4" y="718.0">ep..</text>
</g>
<g>
<title>sock_poll (73 samples, 1.64%)</title><rect x="964.2" y="691.0" width="19.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="967.2" y="702.0"></text>
</g>
<g>
<title>tcp_poll (22 samples, 0.49%)</title><rect x="976.1" y="675.0" width="5.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="979.1" y="686.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.02%)</title><rect x="981.7" y="659.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="984.7" y="670.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (6 samples, 0.13%)</title><rect x="982.0" y="675.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="985.0" y="686.0"></text>
</g>
<g>
<title>tcp_poll (5 samples, 0.11%)</title><rect x="983.6" y="691.0" width="1.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="986.6" y="702.0"></text>
</g>
<g>
<title>sock_poll (12 samples, 0.27%)</title><rect x="984.9" y="707.0" width="3.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="987.9" y="718.0"></text>
</g>
<g>
<title>mutex_lock (23 samples, 0.52%)</title><rect x="988.1" y="723.0" width="6.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="991.1" y="734.0"></text>
</g>
<g>
<title>_cond_resched (4 samples, 0.09%)</title><rect x="992.8" y="707.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="995.8" y="718.0"></text>
</g>
<g>
<title>rcu_all_qs (2 samples, 0.04%)</title><rect x="993.4" y="691.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="996.4" y="702.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.02%)</title><rect x="993.9" y="707.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="996.9" y="718.0"></text>
</g>
<g>
<title>mutex_lock (2 samples, 0.04%)</title><rect x="994.2" y="739.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="997.2" y="750.0"></text>
</g>
<g>
<title>mutex_unlock (2 samples, 0.04%)</title><rect x="994.7" y="739.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="997.7" y="750.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (13 samples, 0.29%)</title><rect x="995.2" y="739.0" width="3.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="998.2" y="750.0"></text>
</g>
<g>
<title>schedule (5 samples, 0.11%)</title><rect x="995.2" y="723.0" width="1.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="998.2" y="734.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (8 samples, 0.18%)</title><rect x="996.6" y="723.0" width="2.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="999.6" y="734.0"></text>
</g>
<g>
<title>schedule (7 samples, 0.16%)</title><rect x="996.8" y="707.0" width="1.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="999.8" y="718.0"></text>
</g>
<g>
<title>__sched_text_start (6 samples, 0.13%)</title><rect x="997.1" y="691.0" width="1.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1000.1" y="702.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.07%)</title><rect x="997.9" y="675.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1000.9" y="686.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.19 (1 samples, 0.02%)</title><rect x="998.7" y="755.0" width="0.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1001.7" y="766.0"></text>
</g>
<g>
<title>fput (1 samples, 0.02%)</title><rect x="998.9" y="755.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1001.9" y="766.0"></text>
</g>
<g>
<title>fput (2 samples, 0.04%)</title><rect x="999.2" y="771.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1002.2" y="782.0"></text>
</g>
<g>
<title>do_epoll_wait (2 samples, 0.04%)</title><rect x="999.7" y="787.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1002.7" y="798.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.04%)</title><rect x="1000.3" y="851.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1003.3" y="862.0"></text>
</g>
<g>
<title>clock_gettime@plt (2 samples, 0.04%)</title><rect x="1000.8" y="851.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1003.8" y="862.0"></text>
</g>
<g>
<title>epoll_wait (11 samples, 0.25%)</title><rect x="1001.3" y="851.0" width="3.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1004.3" y="862.0"></text>
</g>
<g>
<title>epoll_wait@plt (3 samples, 0.07%)</title><rect x="1004.3" y="851.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1007.3" y="862.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (689 samples, 15.49%)</title><rect x="1005.1" y="883.0" width="182.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1008.1" y="894.0">one/nio/net/Session.proc..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.04%)</title><rect x="1006.1" y="867.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1009.1" y="878.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (2 samples, 0.04%)</title><rect x="1006.1" y="851.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1009.1" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.02%)</title><rect x="1006.1" y="835.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1009.1" y="846.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.02%)</title><rect x="1006.1" y="819.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1009.1" y="830.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (1 samples, 0.02%)</title><rect x="1006.4" y="835.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1009.4" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (683 samples, 15.36%)</title><rect x="1006.6" y="867.0" width="181.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1009.6" y="878.0">one/nio/http/HttpSessio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (357 samples, 8.03%)</title><rect x="1007.2" y="851.0" width="94.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1010.2" y="862.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (254 samples, 5.71%)</title><rect x="1008.0" y="835.0" width="67.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1011.0" y="846.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (254 samples, 5.71%)</title><rect x="1008.0" y="819.0" width="67.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1011.0" y="830.0">one/nio..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (239 samples, 5.37%)</title><rect x="1008.2" y="803.0" width="63.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1011.2" y="814.0">Request..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (42 samples, 0.94%)</title><rect x="1008.5" y="787.0" width="11.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1011.5" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (42 samples, 0.94%)</title><rect x="1008.5" y="771.0" width="11.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1011.5" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (10 samples, 0.22%)</title><rect x="1012.5" y="755.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1015.5" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (10 samples, 0.22%)</title><rect x="1012.5" y="739.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1015.5" y="750.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.11%)</title><rect x="1015.1" y="755.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1018.1" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.11%)</title><rect x="1015.1" y="739.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1018.1" y="750.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.04%)</title><rect x="1016.5" y="755.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1019.5" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.13%)</title><rect x="1017.0" y="755.0" width="1.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1020.0" y="766.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (4 samples, 0.09%)</title><rect x="1018.6" y="755.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1021.6" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.09%)</title><rect x="1018.6" y="739.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1021.6" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.09%)</title><rect x="1018.6" y="723.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1021.6" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.09%)</title><rect x="1018.6" y="707.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1021.6" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/AsyncService.entity (196 samples, 4.41%)</title><rect x="1019.6" y="787.0" width="52.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1022.6" y="798.0">ru/ma..</text>
</g>
<g>
<title>java/lang/String.getBytes (4 samples, 0.09%)</title><rect x="1022.3" y="771.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1025.3" y="782.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (3 samples, 0.07%)</title><rect x="1022.6" y="755.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1025.6" y="766.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (3 samples, 0.07%)</title><rect x="1022.6" y="739.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1025.6" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.04%)</title><rect x="1022.8" y="723.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1025.8" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.04%)</title><rect x="1023.4" y="771.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1026.4" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.04%)</title><rect x="1023.4" y="755.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1026.4" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/AsyncService$$Lambda$66/730931500.get$Lambda (2 samples, 0.04%)</title><rect x="1023.4" y="739.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1026.4" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/AsyncService$$Lambda$66/730931500.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1023.4" y="723.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1026.4" y="734.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1023.4" y="707.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1026.4" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/AsyncService.runAsyncHandler (173 samples, 3.89%)</title><rect x="1023.9" y="771.0" width="45.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1026.9" y="782.0">ru/m..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (11 samples, 0.25%)</title><rect x="1023.9" y="755.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1026.9" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (11 samples, 0.25%)</title><rect x="1023.9" y="739.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1026.9" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/AsyncService$$Lambda$67/1598457346.get$Lambda (11 samples, 0.25%)</title><rect x="1023.9" y="723.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1026.9" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/AsyncService$$Lambda$67/1598457346.&lt;init&gt; (11 samples, 0.25%)</title><rect x="1023.9" y="707.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1026.9" y="718.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1026.5" y="691.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1029.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (162 samples, 3.64%)</title><rect x="1026.8" y="755.0" width="43.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1029.8" y="766.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (162 samples, 3.64%)</title><rect x="1026.8" y="739.0" width="43.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1029.8" y="750.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (17 samples, 0.38%)</title><rect x="1028.9" y="723.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1031.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (17 samples, 0.38%)</title><rect x="1028.9" y="707.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1031.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (6 samples, 0.13%)</title><rect x="1028.9" y="691.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1031.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.02%)</title><rect x="1029.5" y="675.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1032.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.02%)</title><rect x="1029.5" y="659.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1032.5" y="670.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="1029.5" y="643.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1032.5" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1029.5" y="627.0" width="0.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1032.5" y="638.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.02%)</title><rect x="1029.5" y="611.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1032.5" y="622.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="1029.5" y="595.0" width="0.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1032.5" y="606.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.02%)</title><rect x="1029.5" y="579.0" width="0.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1032.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (1 samples, 0.02%)</title><rect x="1029.7" y="675.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1032.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.04%)</title><rect x="1030.0" y="675.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1033.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="1030.0" y="659.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1033.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.04%)</title><rect x="1030.0" y="643.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1033.0" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.04%)</title><rect x="1030.0" y="627.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1033.0" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.04%)</title><rect x="1030.0" y="611.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1033.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (5 samples, 0.11%)</title><rect x="1030.5" y="691.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1033.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (2 samples, 0.04%)</title><rect x="1030.8" y="675.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1033.8" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.04%)</title><rect x="1030.8" y="659.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1033.8" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (2 samples, 0.04%)</title><rect x="1030.8" y="643.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1033.8" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.02%)</title><rect x="1031.1" y="627.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1034.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (2 samples, 0.04%)</title><rect x="1031.3" y="675.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1034.3" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.04%)</title><rect x="1031.3" y="659.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1034.3" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (2 samples, 0.04%)</title><rect x="1031.3" y="643.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1034.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.13%)</title><rect x="1031.9" y="691.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1034.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.13%)</title><rect x="1031.9" y="675.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1034.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (6 samples, 0.13%)</title><rect x="1031.9" y="659.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1034.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (137 samples, 3.08%)</title><rect x="1033.4" y="723.0" width="36.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1036.4" y="734.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (137 samples, 3.08%)</title><rect x="1033.4" y="707.0" width="36.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1036.4" y="718.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (137 samples, 3.08%)</title><rect x="1033.4" y="691.0" width="36.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1036.4" y="702.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (137 samples, 3.08%)</title><rect x="1033.4" y="675.0" width="36.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1036.4" y="686.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (137 samples, 3.08%)</title><rect x="1033.4" y="659.0" width="36.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1036.4" y="670.0">jdk..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.02%)</title><rect x="1034.0" y="643.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1037.0" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.02%)</title><rect x="1034.2" y="643.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1037.2" y="654.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.02%)</title><rect x="1034.5" y="643.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1037.5" y="654.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.02%)</title><rect x="1034.8" y="643.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1037.8" y="654.0"></text>
</g>
<g>
<title>Unsafe_Unpark (32 samples, 0.72%)</title><rect x="1035.0" y="643.0" width="8.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1038.0" y="654.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="1036.9" y="627.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1039.9" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.04%)</title><rect x="1037.2" y="627.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1040.2" y="638.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (4 samples, 0.09%)</title><rect x="1037.7" y="627.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1040.7" y="638.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.07%)</title><rect x="1038.8" y="627.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1041.8" y="638.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.02%)</title><rect x="1039.5" y="627.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1042.5" y="638.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (4 samples, 0.09%)</title><rect x="1039.8" y="627.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1042.8" y="638.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.02%)</title><rect x="1040.9" y="627.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1043.9" y="638.0"></text>
</g>
<g>
<title>pthread_mutex_lock (7 samples, 0.16%)</title><rect x="1041.1" y="627.0" width="1.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1044.1" y="638.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.04%)</title><rect x="1043.0" y="627.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1046.0" y="638.0"></text>
</g>
<g>
<title>__pthread_cond_signal (93 samples, 2.09%)</title><rect x="1043.5" y="643.0" width="24.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1046.5" y="654.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (84 samples, 1.89%)</title><rect x="1045.9" y="627.0" width="22.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1048.9" y="638.0">e..</text>
</g>
<g>
<title>do_syscall_64 (84 samples, 1.89%)</title><rect x="1045.9" y="611.0" width="22.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1048.9" y="622.0">d..</text>
</g>
<g>
<title>__x64_sys_futex (63 samples, 1.42%)</title><rect x="1051.5" y="595.0" width="16.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1054.5" y="606.0"></text>
</g>
<g>
<title>do_futex (62 samples, 1.39%)</title><rect x="1051.8" y="579.0" width="16.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1054.8" y="590.0"></text>
</g>
<g>
<title>futex_wake (60 samples, 1.35%)</title><rect x="1051.8" y="563.0" width="15.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1054.8" y="574.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.02%)</title><rect x="1052.3" y="547.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1055.3" y="558.0"></text>
</g>
<g>
<title>hash_futex (1 samples, 0.02%)</title><rect x="1052.6" y="547.0" width="0.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1055.6" y="558.0"></text>
</g>
<g>
<title>wake_up_q (56 samples, 1.26%)</title><rect x="1052.8" y="547.0" width="14.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1055.8" y="558.0"></text>
</g>
<g>
<title>try_to_wake_up (56 samples, 1.26%)</title><rect x="1052.8" y="531.0" width="14.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1055.8" y="542.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (56 samples, 1.26%)</title><rect x="1052.8" y="515.0" width="14.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1055.8" y="526.0"></text>
</g>
<g>
<title>hash_futex (2 samples, 0.04%)</title><rect x="1067.7" y="563.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1070.7" y="574.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.07%)</title><rect x="1068.2" y="643.0" width="0.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1071.2" y="654.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.04%)</title><rect x="1069.0" y="643.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1072.0" y="654.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (1 samples, 0.02%)</title><rect x="1069.5" y="643.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1072.5" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/DAOByteOnlyConverter.tuneArrayToBuf (7 samples, 0.16%)</title><rect x="1069.8" y="771.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1072.8" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 0.16%)</title><rect x="1069.8" y="755.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1072.8" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 0.16%)</title><rect x="1069.8" y="739.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1072.8" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.16%)</title><rect x="1069.8" y="723.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1072.8" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.16%)</title><rect x="1069.8" y="707.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1072.8" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.16%)</title><rect x="1069.8" y="691.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1072.8" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.13%)</title><rect x="1070.1" y="675.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1073.1" y="686.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (13 samples, 0.29%)</title><rect x="1071.7" y="803.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1074.7" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (13 samples, 0.29%)</title><rect x="1071.7" y="787.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1074.7" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (11 samples, 0.25%)</title><rect x="1071.9" y="771.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1074.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.equals (11 samples, 0.25%)</title><rect x="1071.9" y="755.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1074.9" y="766.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.02%)</title><rect x="1074.3" y="739.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1077.3" y="750.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="1074.3" y="723.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1077.3" y="734.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.02%)</title><rect x="1074.3" y="707.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1077.3" y="718.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="1074.3" y="691.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1077.3" y="702.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.02%)</title><rect x="1074.3" y="675.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1077.3" y="686.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.02%)</title><rect x="1074.3" y="659.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1077.3" y="670.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.02%)</title><rect x="1074.3" y="643.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1077.3" y="654.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.02%)</title><rect x="1074.6" y="739.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1077.6" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.02%)</title><rect x="1074.8" y="771.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1077.8" y="782.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.02%)</title><rect x="1074.8" y="755.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1077.8" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.02%)</title><rect x="1074.8" y="739.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1077.8" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.02%)</title><rect x="1075.1" y="803.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1078.1" y="814.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.02%)</title><rect x="1075.1" y="787.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1078.1" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="1075.1" y="771.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1078.1" y="782.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1075.1" y="755.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1078.1" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (57 samples, 1.28%)</title><rect x="1075.4" y="835.0" width="15.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1078.4" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (29 samples, 0.65%)</title><rect x="1076.7" y="819.0" width="7.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1079.7" y="830.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 0.07%)</title><rect x="1078.3" y="803.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1081.3" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (16 samples, 0.36%)</title><rect x="1079.1" y="803.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1082.1" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (16 samples, 0.36%)</title><rect x="1079.1" y="787.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1082.1" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.09%)</title><rect x="1080.4" y="771.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1083.4" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.09%)</title><rect x="1080.4" y="755.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1083.4" y="766.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.07%)</title><rect x="1081.5" y="771.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1084.5" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (4 samples, 0.09%)</title><rect x="1082.3" y="771.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1085.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 0.09%)</title><rect x="1083.3" y="803.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1086.3" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (23 samples, 0.52%)</title><rect x="1084.4" y="819.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1087.4" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (22 samples, 0.49%)</title><rect x="1084.7" y="803.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1087.7" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="1086.0" y="787.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1089.0" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="1086.0" y="771.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1089.0" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="1086.0" y="755.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1089.0" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="1086.0" y="739.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1089.0" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="1086.0" y="723.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1089.0" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.02%)</title><rect x="1086.0" y="707.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1089.0" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.02%)</title><rect x="1086.0" y="691.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1089.0" y="702.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.02%)</title><rect x="1086.0" y="675.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1089.0" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.02%)</title><rect x="1086.0" y="659.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1089.0" y="670.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (1 samples, 0.02%)</title><rect x="1086.0" y="643.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1089.0" y="654.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.02%)</title><rect x="1086.0" y="627.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1089.0" y="638.0"></text>
</g>
<g>
<title>AbsSeq::dsd() const (1 samples, 0.02%)</title><rect x="1086.0" y="611.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1089.0" y="622.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.02%)</title><rect x="1086.2" y="787.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1089.2" y="798.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.02%)</title><rect x="1086.2" y="771.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1089.2" y="782.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.02%)</title><rect x="1086.2" y="755.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1089.2" y="766.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.02%)</title><rect x="1086.2" y="739.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1089.2" y="750.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.02%)</title><rect x="1086.2" y="723.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1089.2" y="734.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.02%)</title><rect x="1086.2" y="707.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1089.2" y="718.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.02%)</title><rect x="1086.2" y="691.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1089.2" y="702.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (12 samples, 0.27%)</title><rect x="1086.5" y="787.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1089.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (12 samples, 0.27%)</title><rect x="1086.5" y="771.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1089.5" y="782.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1087.6" y="755.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1090.6" y="766.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (7 samples, 0.16%)</title><rect x="1087.8" y="755.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1090.8" y="766.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (3 samples, 0.07%)</title><rect x="1089.7" y="787.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1092.7" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (14 samples, 0.31%)</title><rect x="1090.5" y="835.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1093.5" y="846.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (7 samples, 0.16%)</title><rect x="1090.5" y="819.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1093.5" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (7 samples, 0.16%)</title><rect x="1090.5" y="803.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1093.5" y="814.0"></text>
</g>
<g>
<title>java/lang/Character.digit (7 samples, 0.16%)</title><rect x="1090.5" y="787.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1093.5" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.digit (7 samples, 0.16%)</title><rect x="1090.5" y="771.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1093.5" y="782.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (6 samples, 0.13%)</title><rect x="1090.8" y="755.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1093.8" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.09%)</title><rect x="1091.3" y="739.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1094.3" y="750.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (5 samples, 0.11%)</title><rect x="1092.4" y="819.0" width="1.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1095.4" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (2 samples, 0.04%)</title><rect x="1093.7" y="819.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1096.7" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.02%)</title><rect x="1094.2" y="835.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1097.2" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (11 samples, 0.25%)</title><rect x="1094.5" y="835.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1097.5" y="846.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8 samples, 0.18%)</title><rect x="1095.3" y="819.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1098.3" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.18%)</title><rect x="1095.3" y="803.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1098.3" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (17 samples, 0.38%)</title><rect x="1097.4" y="835.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1100.4" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (17 samples, 0.38%)</title><rect x="1097.4" y="819.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1100.4" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (15 samples, 0.34%)</title><rect x="1097.4" y="803.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1100.4" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (15 samples, 0.34%)</title><rect x="1097.4" y="787.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1100.4" y="798.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1100.8" y="771.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1103.8" y="782.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="1101.4" y="803.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1104.4" y="814.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (1 samples, 0.02%)</title><rect x="1101.9" y="851.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1104.9" y="862.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (323 samples, 7.26%)</title><rect x="1102.2" y="851.0" width="85.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1105.2" y="862.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (316 samples, 7.11%)</title><rect x="1104.0" y="835.0" width="83.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1107.0" y="846.0">one/nio/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (44 samples, 0.99%)</title><rect x="1108.3" y="819.0" width="11.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1111.3" y="830.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (4 samples, 0.09%)</title><rect x="1110.4" y="803.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1113.4" y="814.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.04%)</title><rect x="1111.5" y="803.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1114.5" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (4 samples, 0.09%)</title><rect x="1112.0" y="803.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1115.0" y="814.0"></text>
</g>
<g>
<title>__memmove_ssse3 (8 samples, 0.18%)</title><rect x="1113.0" y="803.0" width="2.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1116.0" y="814.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (17 samples, 0.38%)</title><rect x="1115.2" y="803.0" width="4.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1118.2" y="814.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.02%)</title><rect x="1117.8" y="787.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1120.8" y="798.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.02%)</title><rect x="1118.1" y="787.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.1" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.07%)</title><rect x="1118.4" y="787.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.4" y="798.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.04%)</title><rect x="1119.2" y="787.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1122.2" y="798.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.04%)</title><rect x="1119.2" y="771.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.2" y="782.0"></text>
</g>
<g>
<title>memmove@plt (1 samples, 0.02%)</title><rect x="1119.7" y="803.0" width="0.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1122.7" y="814.0"></text>
</g>
<g>
<title>__GI___recv (242 samples, 5.44%)</title><rect x="1119.9" y="819.0" width="64.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1122.9" y="830.0">__GI___..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (229 samples, 5.15%)</title><rect x="1123.4" y="803.0" width="60.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1126.4" y="814.0">entry_..</text>
</g>
<g>
<title>__x64_sys_recvfrom (4 samples, 0.09%)</title><rect x="1123.4" y="787.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1126.4" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (225 samples, 5.06%)</title><rect x="1124.5" y="787.0" width="59.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1127.5" y="798.0">do_sys..</text>
</g>
<g>
<title>__x64_sys_recvfrom (179 samples, 4.03%)</title><rect x="1136.7" y="771.0" width="47.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1139.7" y="782.0">__x6..</text>
</g>
<g>
<title>__sys_recvfrom (175 samples, 3.94%)</title><rect x="1136.9" y="755.0" width="46.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1139.9" y="766.0">__sy..</text>
</g>
<g>
<title>import_single_range (2 samples, 0.04%)</title><rect x="1138.3" y="739.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1141.3" y="750.0"></text>
</g>
<g>
<title>iov_iter_init (1 samples, 0.02%)</title><rect x="1138.5" y="723.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1141.5" y="734.0"></text>
</g>
<g>
<title>inet_recvmsg (1 samples, 0.02%)</title><rect x="1138.8" y="739.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1141.8" y="750.0"></text>
</g>
<g>
<title>security_socket_recvmsg (1 samples, 0.02%)</title><rect x="1139.1" y="739.0" width="0.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1142.1" y="750.0"></text>
</g>
<g>
<title>sock_recvmsg (147 samples, 3.31%)</title><rect x="1139.3" y="739.0" width="39.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1142.3" y="750.0">soc..</text>
</g>
<g>
<title>inet_recvmsg (128 samples, 2.88%)</title><rect x="1139.6" y="723.0" width="33.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1142.6" y="734.0">in..</text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.02%)</title><rect x="1140.6" y="707.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1143.6" y="718.0"></text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.02%)</title><rect x="1140.9" y="707.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1143.9" y="718.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.02%)</title><rect x="1141.2" y="707.0" width="0.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1144.2" y="718.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (1 samples, 0.02%)</title><rect x="1141.4" y="707.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1144.4" y="718.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (1 samples, 0.02%)</title><rect x="1141.7" y="707.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1144.7" y="718.0"></text>
</g>
<g>
<title>tcp_recvmsg (119 samples, 2.68%)</title><rect x="1142.0" y="707.0" width="31.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1145.0" y="718.0">tc..</text>
</g>
<g>
<title>__kfree_skb (10 samples, 0.22%)</title><rect x="1147.5" y="691.0" width="2.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1150.5" y="702.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.02%)</title><rect x="1147.5" y="675.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1150.5" y="686.0"></text>
</g>
<g>
<title>skb_release_all (7 samples, 0.16%)</title><rect x="1147.8" y="675.0" width="1.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1150.8" y="686.0"></text>
</g>
<g>
<title>skb_release_data (4 samples, 0.09%)</title><rect x="1147.8" y="659.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1150.8" y="670.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.02%)</title><rect x="1148.9" y="659.0" width="0.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1151.9" y="670.0"></text>
</g>
<g>
<title>sock_rfree (1 samples, 0.02%)</title><rect x="1148.9" y="643.0" width="0.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1151.9" y="654.0"></text>
</g>
<g>
<title>sock_rfree (2 samples, 0.04%)</title><rect x="1149.1" y="659.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1152.1" y="670.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.02%)</title><rect x="1149.7" y="675.0" width="0.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1152.7" y="686.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.02%)</title><rect x="1149.9" y="675.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1152.9" y="686.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.02%)</title><rect x="1150.2" y="691.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1153.2" y="702.0"></text>
</g>
<g>
<title>__tcp_select_window (2 samples, 0.04%)</title><rect x="1150.5" y="691.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1153.5" y="702.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.02%)</title><rect x="1151.0" y="691.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1154.0" y="702.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (3 samples, 0.07%)</title><rect x="1151.3" y="691.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1154.3" y="702.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.02%)</title><rect x="1152.1" y="691.0" width="0.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1155.1" y="702.0"></text>
</g>
<g>
<title>lock_sock_nested (7 samples, 0.16%)</title><rect x="1152.3" y="691.0" width="1.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1155.3" y="702.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.04%)</title><rect x="1153.4" y="675.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1156.4" y="686.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.02%)</title><rect x="1153.9" y="675.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1156.9" y="686.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (1 samples, 0.02%)</title><rect x="1153.9" y="659.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1156.9" y="670.0"></text>
</g>
<g>
<title>release_sock (4 samples, 0.09%)</title><rect x="1154.2" y="691.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1157.2" y="702.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.02%)</title><rect x="1155.0" y="675.0" width="0.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1158.0" y="686.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (45 samples, 1.01%)</title><rect x="1155.2" y="691.0" width="12.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1158.2" y="702.0"></text>
</g>
<g>
<title>__skb_datagram_iter (42 samples, 0.94%)</title><rect x="1155.2" y="675.0" width="11.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1158.2" y="686.0"></text>
</g>
<g>
<title>__check_object_size (2 samples, 0.04%)</title><rect x="1157.6" y="659.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1160.6" y="670.0"></text>
</g>
<g>
<title>simple_copy_to_iter (31 samples, 0.70%)</title><rect x="1158.2" y="659.0" width="8.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1161.2" y="670.0"></text>
</g>
<g>
<title>__check_object_size (16 samples, 0.36%)</title><rect x="1158.4" y="643.0" width="4.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1161.4" y="654.0"></text>
</g>
<g>
<title>__check_heap_object (2 samples, 0.04%)</title><rect x="1159.8" y="627.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1162.8" y="638.0"></text>
</g>
<g>
<title>__virt_addr_valid (9 samples, 0.20%)</title><rect x="1160.3" y="627.0" width="2.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1163.3" y="638.0"></text>
</g>
<g>
<title>__virt_addr_valid (2 samples, 0.04%)</title><rect x="1162.7" y="643.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1165.7" y="654.0"></text>
</g>
<g>
<title>_copy_to_iter (6 samples, 0.13%)</title><rect x="1163.2" y="643.0" width="1.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1166.2" y="654.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (1 samples, 0.02%)</title><rect x="1163.5" y="627.0" width="0.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1166.5" y="638.0"></text>
</g>
<g>
<title>copy_user_generic_unrolled (4 samples, 0.09%)</title><rect x="1163.7" y="627.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1166.7" y="638.0"></text>
</g>
<g>
<title>check_stack_object (6 samples, 0.13%)</title><rect x="1164.8" y="643.0" width="1.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1167.8" y="654.0"></text>
</g>
<g>
<title>simple_copy_to_iter (3 samples, 0.07%)</title><rect x="1166.4" y="675.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1169.4" y="686.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (5 samples, 0.11%)</title><rect x="1167.2" y="691.0" width="1.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1170.2" y="702.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (2 samples, 0.04%)</title><rect x="1168.5" y="691.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1171.5" y="702.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (14 samples, 0.31%)</title><rect x="1169.0" y="691.0" width="3.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1172.0" y="702.0"></text>
</g>
<g>
<title>ktime_get (4 samples, 0.09%)</title><rect x="1169.6" y="675.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1172.6" y="686.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (8 samples, 0.18%)</title><rect x="1170.6" y="675.0" width="2.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1173.6" y="686.0"></text>
</g>
<g>
<title>ktime_get (6 samples, 0.13%)</title><rect x="1170.9" y="659.0" width="1.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1173.9" y="670.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.02%)</title><rect x="1172.2" y="643.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1175.2" y="654.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.02%)</title><rect x="1172.5" y="659.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1175.5" y="670.0"></text>
</g>
<g>
<title>tcp_release_cb (3 samples, 0.07%)</title><rect x="1172.8" y="691.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1175.8" y="702.0"></text>
</g>
<g>
<title>security_socket_recvmsg (18 samples, 0.40%)</title><rect x="1173.5" y="723.0" width="4.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1176.5" y="734.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.02%)</title><rect x="1173.8" y="707.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1176.8" y="718.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (16 samples, 0.36%)</title><rect x="1174.1" y="707.0" width="4.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1177.1" y="718.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.02%)</title><rect x="1174.1" y="691.0" width="0.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1177.1" y="702.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (15 samples, 0.34%)</title><rect x="1174.3" y="691.0" width="4.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1177.3" y="702.0"></text>
</g>
<g>
<title>aa_sk_perm (15 samples, 0.34%)</title><rect x="1174.3" y="675.0" width="4.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1177.3" y="686.0"></text>
</g>
<g>
<title>rcu_all_qs (2 samples, 0.04%)</title><rect x="1177.8" y="659.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1180.8" y="670.0"></text>
</g>
<g>
<title>sockfd_lookup_light (19 samples, 0.43%)</title><rect x="1178.3" y="739.0" width="5.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1181.3" y="750.0"></text>
</g>
<g>
<title>__fdget (15 samples, 0.34%)</title><rect x="1178.3" y="723.0" width="4.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1181.3" y="734.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.02%)</title><rect x="1178.3" y="707.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1181.3" y="718.0"></text>
</g>
<g>
<title>__fget_light (14 samples, 0.31%)</title><rect x="1178.6" y="707.0" width="3.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1181.6" y="718.0"></text>
</g>
<g>
<title>__fget (10 samples, 0.22%)</title><rect x="1179.7" y="691.0" width="2.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1182.7" y="702.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.09%)</title><rect x="1182.3" y="723.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1185.3" y="734.0"></text>
</g>
<g>
<title>fput (1 samples, 0.02%)</title><rect x="1183.4" y="755.0" width="0.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1186.4" y="766.0"></text>
</g>
<g>
<title>sockfd_lookup_light (2 samples, 0.04%)</title><rect x="1183.6" y="755.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1186.6" y="766.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (5 samples, 0.11%)</title><rect x="1184.2" y="819.0" width="1.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1187.2" y="830.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (8 samples, 0.18%)</title><rect x="1185.5" y="819.0" width="2.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1188.5" y="830.0"></text>
</g>
<g>
<title>recv@plt (1 samples, 0.02%)</title><rect x="1187.6" y="819.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1190.6" y="830.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.07%)</title><rect x="1187.9" y="883.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.9" y="894.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.07%)</title><rect x="1187.9" y="867.0" width="0.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1190.9" y="878.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.07%)</title><rect x="1187.9" y="851.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1190.9" y="862.0"></text>
</g>
<g>
<title>start_thread (5 samples, 0.11%)</title><rect x="1188.7" y="899.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1191.7" y="910.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (5 samples, 0.11%)</title><rect x="1188.7" y="883.0" width="1.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1191.7" y="894.0"></text>
</g>
<g>
<title>Thread::call_run() (5 samples, 0.11%)</title><rect x="1188.7" y="867.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.7" y="878.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.02%)</title><rect x="1188.7" y="851.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.7" y="862.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.02%)</title><rect x="1188.7" y="835.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.7" y="846.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (1 samples, 0.02%)</title><rect x="1188.7" y="819.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.7" y="830.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (1 samples, 0.02%)</title><rect x="1188.7" y="803.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.7" y="814.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.02%)</title><rect x="1188.7" y="787.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.7" y="798.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.04%)</title><rect x="1188.9" y="851.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.9" y="862.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (2 samples, 0.04%)</title><rect x="1188.9" y="835.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.9" y="846.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (2 samples, 0.04%)</title><rect x="1188.9" y="819.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.9" y="830.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.04%)</title><rect x="1188.9" y="803.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.9" y="814.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (2 samples, 0.04%)</title><rect x="1188.9" y="787.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.9" y="798.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (1 samples, 0.02%)</title><rect x="1188.9" y="771.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.9" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (1 samples, 0.02%)</title><rect x="1188.9" y="755.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.9" y="766.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.02%)</title><rect x="1188.9" y="739.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.9" y="750.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.02%)</title><rect x="1188.9" y="723.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.9" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="1188.9" y="707.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.9" y="718.0"></text>
</g>
<g>
<title>Compile::Optimize() (1 samples, 0.02%)</title><rect x="1189.2" y="771.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.2" y="782.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.341] (1 samples, 0.02%)</title><rect x="1189.2" y="755.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.2" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.02%)</title><rect x="1189.2" y="739.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.2" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.02%)</title><rect x="1189.2" y="723.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.2" y="734.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.02%)</title><rect x="1189.5" y="851.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.5" y="862.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.02%)</title><rect x="1189.5" y="835.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.5" y="846.0"></text>
</g>
<g>
<title>sched_yield (1 samples, 0.02%)</title><rect x="1189.5" y="819.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1192.5" y="830.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="1189.5" y="803.0" width="0.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1192.5" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.02%)</title><rect x="1189.5" y="787.0" width="0.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1192.5" y="798.0"></text>
</g>
<g>
<title>do_sched_yield (1 samples, 0.02%)</title><rect x="1189.5" y="771.0" width="0.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1192.5" y="782.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.02%)</title><rect x="1189.7" y="851.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.7" y="862.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.02%)</title><rect x="1189.7" y="835.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.7" y="846.0"></text>
</g>
<g>
<title>StatSamplerTask::task() (1 samples, 0.02%)</title><rect x="1189.7" y="819.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.7" y="830.0"></text>
</g>
</g>
</svg>
