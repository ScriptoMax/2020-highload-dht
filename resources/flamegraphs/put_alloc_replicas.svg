<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Replication control | RAM</text>
<text id="details" x="10" y="389"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="389"> </text>
<g id="frames">
<g>
<title>all (32,890 samples, 100.00%)</title><rect x="10.0" y="355.0" width="1180.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.0" y="366.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (32,890 samples, 100.00%)</title><rect x="10.0" y="339.0" width="1180.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="350.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (513 samples, 1.56%)</title><rect x="10.0" y="323.0" width="18.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (513 samples, 1.56%)</title><rect x="10.0" y="307.0" width="18.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (32,377 samples, 98.44%)</title><rect x="28.4" y="323.0" width="1161.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="31.4" y="334.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (32,377 samples, 98.44%)</title><rect x="28.4" y="307.0" width="1161.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="31.4" y="318.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (32,377 samples, 98.44%)</title><rect x="28.4" y="291.0" width="1161.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.4" y="302.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (22,114 samples, 67.24%)</title><rect x="28.4" y="275.0" width="793.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="31.4" y="286.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (22,114 samples, 67.24%)</title><rect x="28.4" y="259.0" width="793.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.4" y="270.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (21,361 samples, 64.95%)</title><rect x="28.4" y="243.0" width="766.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.4" y="254.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (748 samples, 2.27%)</title><rect x="28.4" y="227.0" width="26.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="31.4" y="238.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (748 samples, 2.27%)</title><rect x="28.4" y="211.0" width="26.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.4" y="222.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (748 samples, 2.27%)</title><rect x="28.4" y="195.0" width="26.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="31.4" y="206.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (748 samples, 2.27%)</title><rect x="28.4" y="179.0" width="26.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.4" y="190.0">j..</text>
</g>
<g>
<title>java.lang.String (323 samples, 0.98%)</title><rect x="28.4" y="163.0" width="11.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="31.4" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (425 samples, 1.29%)</title><rect x="40.0" y="163.0" width="15.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="43.0" y="174.0"></text>
</g>
<g>
<title>byte[] (425 samples, 1.29%)</title><rect x="40.0" y="147.0" width="15.2" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="43.0" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/RepliServiceImpl.entity (20,613 samples, 62.67%)</title><rect x="55.2" y="227.0" width="739.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="58.2" y="238.0">ru/mail/polis/service/codearound/RepliServiceImpl.entity</text>
</g>
<g>
<title>java/lang/String.getBytes (374 samples, 1.14%)</title><rect x="55.2" y="211.0" width="13.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="58.2" y="222.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (374 samples, 1.14%)</title><rect x="55.2" y="195.0" width="13.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="58.2" y="206.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (374 samples, 1.14%)</title><rect x="55.2" y="179.0" width="13.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="58.2" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (374 samples, 1.14%)</title><rect x="55.2" y="163.0" width="13.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="58.2" y="174.0"></text>
</g>
<g>
<title>byte[] (374 samples, 1.14%)</title><rect x="55.2" y="147.0" width="13.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="58.2" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (3,224 samples, 9.80%)</title><rect x="68.7" y="211.0" width="115.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="71.7" y="222.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (2,360 samples, 7.18%)</title><rect x="68.7" y="195.0" width="84.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="71.7" y="206.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1,627 samples, 4.95%)</title><rect x="68.7" y="179.0" width="58.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="71.7" y="190.0">one/ni..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1,627 samples, 4.95%)</title><rect x="68.7" y="163.0" width="58.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="71.7" y="174.0">one/ni..</text>
</g>
<g>
<title>byte[] (1,627 samples, 4.95%)</title><rect x="68.7" y="147.0" width="58.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="71.7" y="158.0">byte[]</text>
</g>
<g>
<title>one/nio/net/Session.write (733 samples, 2.23%)</title><rect x="127.0" y="179.0" width="26.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="130.0" y="190.0">o..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (733 samples, 2.23%)</title><rect x="127.0" y="163.0" width="26.3" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="130.0" y="174.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (864 samples, 2.63%)</title><rect x="153.3" y="195.0" width="31.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="156.3" y="206.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (864 samples, 2.63%)</title><rect x="153.3" y="179.0" width="31.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="156.3" y="190.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (864 samples, 2.63%)</title><rect x="153.3" y="163.0" width="31.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="156.3" y="174.0">ja..</text>
</g>
<g>
<title>java.lang.String (339 samples, 1.03%)</title><rect x="153.3" y="147.0" width="12.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="156.3" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (525 samples, 1.60%)</title><rect x="165.5" y="147.0" width="18.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="168.5" y="158.0"></text>
</g>
<g>
<title>byte[] (525 samples, 1.60%)</title><rect x="165.5" y="131.0" width="18.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="168.5" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (539 samples, 1.64%)</title><rect x="184.3" y="211.0" width="19.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="187.3" y="222.0"></text>
</g>
<g>
<title>java/lang/String.substring (539 samples, 1.64%)</title><rect x="184.3" y="195.0" width="19.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="187.3" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (539 samples, 1.64%)</title><rect x="184.3" y="179.0" width="19.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="187.3" y="190.0"></text>
</g>
<g>
<title>java.lang.String (284 samples, 0.86%)</title><rect x="184.3" y="163.0" width="10.2" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="187.3" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (255 samples, 0.78%)</title><rect x="194.5" y="163.0" width="9.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="197.5" y="174.0"></text>
</g>
<g>
<title>byte[] (255 samples, 0.78%)</title><rect x="194.5" y="147.0" width="9.2" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="197.5" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/DAOByteOnlyConverter.tuneArrayToBuf (419 samples, 1.27%)</title><rect x="203.7" y="211.0" width="15.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="206.7" y="222.0"></text>
</g>
<g>
<title>byte[] (419 samples, 1.27%)</title><rect x="203.7" y="195.0" width="15.0" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="206.7" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/RepliServiceImpl.upsertWithMultipleNodes (16,057 samples, 48.82%)</title><rect x="218.7" y="211.0" width="576.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.7" y="222.0">ru/mail/polis/service/codearound/RepliServiceImpl.upsertWithMultipleNodes</text>
</g>
<g>
<title>java.lang.String[] (12 samples, 0.04%)</title><rect x="218.7" y="195.0" width="0.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="221.7" y="206.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (459 samples, 1.40%)</title><rect x="219.1" y="195.0" width="16.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="222.1" y="206.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (459 samples, 1.40%)</title><rect x="219.1" y="179.0" width="16.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="222.1" y="190.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (459 samples, 1.40%)</title><rect x="219.1" y="163.0" width="16.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="222.1" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (459 samples, 1.40%)</title><rect x="219.1" y="147.0" width="16.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="222.1" y="158.0"></text>
</g>
<g>
<title>byte[] (459 samples, 1.40%)</title><rect x="219.1" y="131.0" width="16.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="222.1" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (42 samples, 0.13%)</title><rect x="235.6" y="195.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="238.6" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1822971466.invoke (42 samples, 0.13%)</title><rect x="235.6" y="179.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="238.6" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (42 samples, 0.13%)</title><rect x="235.6" y="163.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.6" y="174.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (14 samples, 0.04%)</title><rect x="235.6" y="147.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="238.6" y="158.0"></text>
</g>
<g>
<title>java.lang.String (14 samples, 0.04%)</title><rect x="235.6" y="131.0" width="0.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="238.6" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (28 samples, 0.09%)</title><rect x="236.1" y="147.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="239.1" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (28 samples, 0.09%)</title><rect x="236.1" y="131.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="239.1" y="142.0"></text>
</g>
<g>
<title>byte[] (28 samples, 0.09%)</title><rect x="236.1" y="115.0" width="1.0" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="239.1" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (593 samples, 1.80%)</title><rect x="237.1" y="195.0" width="21.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="240.1" y="206.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (593 samples, 1.80%)</title><rect x="237.1" y="179.0" width="21.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="240.1" y="190.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (593 samples, 1.80%)</title><rect x="237.1" y="163.0" width="21.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="240.1" y="174.0">j..</text>
</g>
<g>
<title>one.nio.http.Response (314 samples, 0.95%)</title><rect x="258.4" y="195.0" width="11.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="261.4" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.put (11,049 samples, 33.59%)</title><rect x="269.6" y="195.0" width="396.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="272.6" y="206.0">one/nio/http/HttpClient.put</text>
</g>
<g>
<title>byte[] (10 samples, 0.03%)</title><rect x="269.6" y="179.0" width="0.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="272.6" y="190.0"></text>
</g>
<g>
<title>java.lang.String (12 samples, 0.04%)</title><rect x="270.0" y="179.0" width="0.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="273.0" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.createRequest (78 samples, 0.24%)</title><rect x="270.4" y="179.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="273.4" y="190.0"></text>
</g>
<g>
<title>one.nio.http.Request (23 samples, 0.07%)</title><rect x="270.4" y="163.0" width="0.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="273.4" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (55 samples, 0.17%)</title><rect x="271.3" y="163.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="274.3" y="174.0"></text>
</g>
<g>
<title>java.lang.String[] (55 samples, 0.17%)</title><rect x="271.3" y="147.0" width="1.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="274.3" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (10,949 samples, 33.29%)</title><rect x="273.2" y="179.0" width="392.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="276.2" y="190.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (10,949 samples, 33.29%)</title><rect x="273.2" y="163.0" width="392.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="276.2" y="174.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (74 samples, 0.22%)</title><rect x="273.2" y="147.0" width="2.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="276.2" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (9,305 samples, 28.29%)</title><rect x="275.9" y="147.0" width="333.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="278.9" y="158.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (8,672 samples, 26.37%)</title><rect x="275.9" y="131.0" width="311.1" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="278.9" y="142.0">byte[]</text>
</g>
<g>
<title>byte[] (633 samples, 1.92%)</title><rect x="587.0" y="131.0" width="22.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="590.0" y="142.0">b..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (1,365 samples, 4.15%)</title><rect x="609.7" y="147.0" width="49.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="612.7" y="158.0">one/..</text>
</g>
<g>
<title>byte[] (8 samples, 0.02%)</title><rect x="609.7" y="131.0" width="0.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="612.7" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (64 samples, 0.19%)</title><rect x="610.0" y="131.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="613.0" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (64 samples, 0.19%)</title><rect x="610.0" y="115.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="613.0" y="126.0"></text>
</g>
<g>
<title>java.lang.String (23 samples, 0.07%)</title><rect x="610.0" y="99.0" width="0.8" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="613.0" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (41 samples, 0.12%)</title><rect x="610.8" y="99.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="613.8" y="110.0"></text>
</g>
<g>
<title>byte[] (41 samples, 0.12%)</title><rect x="610.8" y="83.0" width="1.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="613.8" y="94.0"></text>
</g>
<g>
<title>one.nio.http.Response (28 samples, 0.09%)</title><rect x="612.3" y="131.0" width="1.0" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="615.3" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (1,166 samples, 3.55%)</title><rect x="613.3" y="131.0" width="41.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="616.3" y="142.0">one..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,166 samples, 3.55%)</title><rect x="613.3" y="115.0" width="41.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="616.3" y="126.0">one..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,166 samples, 3.55%)</title><rect x="613.3" y="99.0" width="41.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="616.3" y="110.0">one..</text>
</g>
<g>
<title>char[] (938 samples, 2.85%)</title><rect x="613.3" y="83.0" width="33.7" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="616.3" y="94.0">ch..</text>
</g>
<g>
<title>java.lang.String (82 samples, 0.25%)</title><rect x="647.0" y="83.0" width="2.9" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="650.0" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (146 samples, 0.44%)</title><rect x="649.9" y="83.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="652.9" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (146 samples, 0.44%)</title><rect x="649.9" y="67.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="652.9" y="78.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (146 samples, 0.44%)</title><rect x="649.9" y="51.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="652.9" y="62.0"></text>
</g>
<g>
<title>byte[] (146 samples, 0.44%)</title><rect x="649.9" y="35.0" width="5.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="652.9" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (40 samples, 0.12%)</title><rect x="655.1" y="131.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="658.1" y="142.0"></text>
</g>
<g>
<title>java.lang.String[] (40 samples, 0.12%)</title><rect x="655.1" y="115.0" width="1.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="658.1" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (59 samples, 0.18%)</title><rect x="656.6" y="131.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="659.6" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (59 samples, 0.18%)</title><rect x="656.6" y="115.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="659.6" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (59 samples, 0.18%)</title><rect x="656.6" y="99.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="659.6" y="110.0"></text>
</g>
<g>
<title>java.lang.String (25 samples, 0.08%)</title><rect x="656.6" y="83.0" width="0.9" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="659.6" y="94.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (34 samples, 0.10%)</title><rect x="657.5" y="83.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="660.5" y="94.0"></text>
</g>
<g>
<title>byte[] (34 samples, 0.10%)</title><rect x="657.5" y="67.0" width="1.2" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="660.5" y="78.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (115 samples, 0.35%)</title><rect x="658.7" y="147.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="661.7" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (115 samples, 0.35%)</title><rect x="658.7" y="131.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="661.7" y="142.0"></text>
</g>
<g>
<title>byte[] (115 samples, 0.35%)</title><rect x="658.7" y="115.0" width="4.1" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="661.7" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (72 samples, 0.22%)</title><rect x="662.8" y="147.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="665.8" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (72 samples, 0.22%)</title><rect x="662.8" y="131.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="665.8" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (72 samples, 0.22%)</title><rect x="662.8" y="115.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="665.8" y="126.0"></text>
</g>
<g>
<title>java.lang.String (41 samples, 0.12%)</title><rect x="662.8" y="99.0" width="1.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="665.8" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (31 samples, 0.09%)</title><rect x="664.3" y="99.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="667.3" y="110.0"></text>
</g>
<g>
<title>byte[] (31 samples, 0.09%)</title><rect x="664.3" y="83.0" width="1.1" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="667.3" y="94.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (18 samples, 0.05%)</title><rect x="665.4" y="147.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="668.4" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (18 samples, 0.05%)</title><rect x="665.4" y="131.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="668.4" y="142.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (18 samples, 0.05%)</title><rect x="665.4" y="115.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="668.4" y="126.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (18 samples, 0.05%)</title><rect x="665.4" y="99.0" width="0.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="668.4" y="110.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2,804 samples, 8.53%)</title><rect x="666.0" y="195.0" width="100.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="669.0" y="206.0">one/nio/http..</text>
</g>
<g>
<title>byte[] (1,137 samples, 3.46%)</title><rect x="666.0" y="179.0" width="40.8" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="669.0" y="190.0">byt..</text>
</g>
<g>
<title>java.lang.String[] (461 samples, 1.40%)</title><rect x="706.8" y="179.0" width="16.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="709.8" y="190.0"></text>
</g>
<g>
<title>java.lang.String (1,206 samples, 3.67%)</title><rect x="723.4" y="179.0" width="43.2" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="726.4" y="190.0">java..</text>
</g>
<g>
<title>ru/mail/polis/service/codearound/ModularTopology.replicasFor (10 samples, 0.03%)</title><rect x="766.6" y="195.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="769.6" y="206.0"></text>
</g>
<g>
<title>java.lang.String[] (10 samples, 0.03%)</title><rect x="766.6" y="179.0" width="0.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="769.6" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/TaskDAO.upsertValue (774 samples, 2.35%)</title><rect x="767.0" y="195.0" width="27.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="770.0" y="206.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/codearound/DAOByteOnlyConverter.tuneBufToArray (389 samples, 1.18%)</title><rect x="767.0" y="179.0" width="14.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="770.0" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/DAOByteOnlyConverter.readByteArray (389 samples, 1.18%)</title><rect x="767.0" y="163.0" width="14.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="770.0" y="174.0"></text>
</g>
<g>
<title>byte[] (389 samples, 1.18%)</title><rect x="767.0" y="147.0" width="14.0" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="770.0" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/Value.getBytesFromValue (385 samples, 1.17%)</title><rect x="781.0" y="179.0" width="13.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="784.0" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (385 samples, 1.17%)</title><rect x="781.0" y="163.0" width="13.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="784.0" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (385 samples, 1.17%)</title><rect x="781.0" y="147.0" width="13.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="784.0" y="158.0"></text>
</g>
<g>
<title>byte[] (385 samples, 1.17%)</title><rect x="781.0" y="131.0" width="13.8" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="784.0" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (753 samples, 2.29%)</title><rect x="794.8" y="243.0" width="27.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="797.8" y="254.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (753 samples, 2.29%)</title><rect x="794.8" y="227.0" width="27.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="797.8" y="238.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (753 samples, 2.29%)</title><rect x="794.8" y="211.0" width="27.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="797.8" y="222.0">j..</text>
</g>
<g>
<title>java.lang.String (366 samples, 1.11%)</title><rect x="794.8" y="195.0" width="13.1" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="797.8" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (387 samples, 1.18%)</title><rect x="807.9" y="195.0" width="13.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="810.9" y="206.0"></text>
</g>
<g>
<title>byte[] (387 samples, 1.18%)</title><rect x="807.9" y="179.0" width="13.9" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="810.9" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3,725 samples, 11.33%)</title><rect x="821.8" y="275.0" width="133.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="824.8" y="286.0">one/nio/http/Http..</text>
</g>
<g>
<title>one.nio.http.Request (731 samples, 2.22%)</title><rect x="821.8" y="259.0" width="26.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="824.8" y="270.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (934 samples, 2.84%)</title><rect x="848.0" y="259.0" width="33.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="851.0" y="270.0">on..</text>
</g>
<g>
<title>java.lang.String[] (934 samples, 2.84%)</title><rect x="848.0" y="243.0" width="33.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="851.0" y="254.0">ja..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,060 samples, 6.26%)</title><rect x="881.5" y="259.0" width="73.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="884.5" y="270.0">one/nio/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,060 samples, 6.26%)</title><rect x="881.5" y="243.0" width="73.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="884.5" y="254.0">one/nio/..</text>
</g>
<g>
<title>char[] (1,281 samples, 3.89%)</title><rect x="881.5" y="227.0" width="46.0" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="884.5" y="238.0">char[]</text>
</g>
<g>
<title>java.lang.String (329 samples, 1.00%)</title><rect x="927.5" y="227.0" width="11.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="930.5" y="238.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (450 samples, 1.37%)</title><rect x="939.3" y="227.0" width="16.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="942.3" y="238.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (450 samples, 1.37%)</title><rect x="939.3" y="211.0" width="16.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="942.3" y="222.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (450 samples, 1.37%)</title><rect x="939.3" y="195.0" width="16.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="942.3" y="206.0"></text>
</g>
<g>
<title>byte[] (450 samples, 1.37%)</title><rect x="939.3" y="179.0" width="16.1" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="942.3" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (301 samples, 0.92%)</title><rect x="955.4" y="275.0" width="10.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="958.4" y="286.0"></text>
</g>
<g>
<title>byte[] (301 samples, 0.92%)</title><rect x="955.4" y="259.0" width="10.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="958.4" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (578 samples, 1.76%)</title><rect x="966.2" y="275.0" width="20.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="969.2" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (578 samples, 1.76%)</title><rect x="966.2" y="259.0" width="20.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="969.2" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (578 samples, 1.76%)</title><rect x="966.2" y="243.0" width="20.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="969.2" y="254.0"></text>
</g>
<g>
<title>java.lang.String (280 samples, 0.85%)</title><rect x="966.2" y="227.0" width="10.1" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="969.2" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (298 samples, 0.91%)</title><rect x="976.3" y="227.0" width="10.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="979.3" y="238.0"></text>
</g>
<g>
<title>byte[] (298 samples, 0.91%)</title><rect x="976.3" y="211.0" width="10.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="979.3" y="222.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5,659 samples, 17.21%)</title><rect x="987.0" y="275.0" width="203.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="990.0" y="286.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>one/nio/util/Utf8.read (5,659 samples, 17.21%)</title><rect x="987.0" y="259.0" width="203.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="990.0" y="270.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>char[] (2,715 samples, 8.25%)</title><rect x="987.0" y="243.0" width="97.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="990.0" y="254.0">char[]</text>
</g>
<g>
<title>java.lang.String (1,143 samples, 3.48%)</title><rect x="1084.4" y="243.0" width="41.0" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1087.4" y="254.0">jav..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,801 samples, 5.48%)</title><rect x="1125.4" y="243.0" width="64.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1128.4" y="254.0">java/la..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,801 samples, 5.48%)</title><rect x="1125.4" y="227.0" width="64.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1128.4" y="238.0">java/la..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,801 samples, 5.48%)</title><rect x="1125.4" y="211.0" width="64.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1128.4" y="222.0">java/la..</text>
</g>
<g>
<title>byte[] (1,801 samples, 5.48%)</title><rect x="1125.4" y="195.0" width="64.6" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1128.4" y="206.0">byte[]</text>
</g>
</g>
</svg>
