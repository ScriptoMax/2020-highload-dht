<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Replication control | RAM</text>
<text id="details" x="10" y="389"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="389"> </text>
<g id="frames">
<g>
<title>all (34,871 samples, 100.00%)</title><rect x="10.0" y="355.0" width="1180.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="13.0" y="366.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (34,871 samples, 100.00%)</title><rect x="10.0" y="339.0" width="1180.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="350.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (563 samples, 1.61%)</title><rect x="10.0" y="323.0" width="19.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (563 samples, 1.61%)</title><rect x="10.0" y="307.0" width="19.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (34,308 samples, 98.39%)</title><rect x="29.1" y="323.0" width="1160.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="32.1" y="334.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (34,308 samples, 98.39%)</title><rect x="29.1" y="307.0" width="1160.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.1" y="318.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (34,308 samples, 98.39%)</title><rect x="29.1" y="291.0" width="1160.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="32.1" y="302.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (27,507 samples, 78.88%)</title><rect x="29.1" y="275.0" width="930.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="32.1" y="286.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (27,507 samples, 78.88%)</title><rect x="29.1" y="259.0" width="930.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="32.1" y="270.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (26,803 samples, 76.86%)</title><rect x="29.1" y="243.0" width="906.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="32.1" y="254.0">RequestHandler0_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (650 samples, 1.86%)</title><rect x="29.1" y="227.0" width="21.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="32.1" y="238.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (650 samples, 1.86%)</title><rect x="29.1" y="211.0" width="21.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="32.1" y="222.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (650 samples, 1.86%)</title><rect x="29.1" y="195.0" width="21.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.1" y="206.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (650 samples, 1.86%)</title><rect x="29.1" y="179.0" width="21.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="32.1" y="190.0">j..</text>
</g>
<g>
<title>java.lang.String (268 samples, 0.77%)</title><rect x="29.1" y="163.0" width="9.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="32.1" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (382 samples, 1.10%)</title><rect x="38.1" y="163.0" width="12.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="41.1" y="174.0"></text>
</g>
<g>
<title>byte[] (382 samples, 1.10%)</title><rect x="38.1" y="147.0" width="12.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="41.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/RepliServiceImpl.entity (26,153 samples, 75.00%)</title><rect x="51.0" y="227.0" width="885.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.0" y="238.0">ru/mail/polis/service/codearound/RepliServiceImpl.entity</text>
</g>
<g>
<title>java/lang/String.getBytes (286 samples, 0.82%)</title><rect x="51.0" y="211.0" width="9.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="54.0" y="222.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (286 samples, 0.82%)</title><rect x="51.0" y="195.0" width="9.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="54.0" y="206.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (286 samples, 0.82%)</title><rect x="51.0" y="179.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.0" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (286 samples, 0.82%)</title><rect x="51.0" y="163.0" width="9.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="54.0" y="174.0"></text>
</g>
<g>
<title>byte[] (286 samples, 0.82%)</title><rect x="51.0" y="147.0" width="9.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="54.0" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2,376 samples, 6.81%)</title><rect x="60.7" y="211.0" width="80.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="63.7" y="222.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,781 samples, 5.11%)</title><rect x="60.7" y="195.0" width="60.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="63.7" y="206.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1,316 samples, 3.77%)</title><rect x="60.7" y="179.0" width="44.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="63.7" y="190.0">one/..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1,316 samples, 3.77%)</title><rect x="60.7" y="163.0" width="44.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="63.7" y="174.0">one/..</text>
</g>
<g>
<title>byte[] (1,316 samples, 3.77%)</title><rect x="60.7" y="147.0" width="44.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="63.7" y="158.0">byte[]</text>
</g>
<g>
<title>one/nio/net/Session.write (465 samples, 1.33%)</title><rect x="105.3" y="179.0" width="15.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="108.3" y="190.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (465 samples, 1.33%)</title><rect x="105.3" y="163.0" width="15.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="108.3" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (595 samples, 1.71%)</title><rect x="121.0" y="195.0" width="20.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="124.0" y="206.0"></text>
</g>
<g>
<title>java/lang/String.substring (595 samples, 1.71%)</title><rect x="121.0" y="179.0" width="20.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="124.0" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (595 samples, 1.71%)</title><rect x="121.0" y="163.0" width="20.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="124.0" y="174.0"></text>
</g>
<g>
<title>java.lang.String (332 samples, 0.95%)</title><rect x="121.0" y="147.0" width="11.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="124.0" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (263 samples, 0.75%)</title><rect x="132.2" y="147.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="135.2" y="158.0"></text>
</g>
<g>
<title>byte[] (263 samples, 0.75%)</title><rect x="132.2" y="131.0" width="8.9" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="135.2" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (470 samples, 1.35%)</title><rect x="141.1" y="211.0" width="15.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="144.1" y="222.0"></text>
</g>
<g>
<title>java/lang/String.substring (470 samples, 1.35%)</title><rect x="141.1" y="195.0" width="15.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="144.1" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (470 samples, 1.35%)</title><rect x="141.1" y="179.0" width="15.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="144.1" y="190.0"></text>
</g>
<g>
<title>java.lang.String (188 samples, 0.54%)</title><rect x="141.1" y="163.0" width="6.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="144.1" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (282 samples, 0.81%)</title><rect x="147.5" y="163.0" width="9.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="150.5" y="174.0"></text>
</g>
<g>
<title>byte[] (282 samples, 0.81%)</title><rect x="147.5" y="147.0" width="9.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="150.5" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/DAOByteOnlyConverter.tuneArrayToBuf (415 samples, 1.19%)</title><rect x="157.0" y="211.0" width="14.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="160.0" y="222.0"></text>
</g>
<g>
<title>byte[] (415 samples, 1.19%)</title><rect x="157.0" y="195.0" width="14.1" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="160.0" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/ReplicationLsm.getWithMultipleNodes (22,606 samples, 64.83%)</title><rect x="171.1" y="211.0" width="764.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="174.1" y="222.0">ru/mail/polis/service/codearound/ReplicationLsm.getWithMultipleNodes</text>
</g>
<g>
<title>java.lang.String[] (36 samples, 0.10%)</title><rect x="171.1" y="195.0" width="1.2" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="174.1" y="206.0"></text>
</g>
<g>
<title>java.util.ArrayList (331 samples, 0.95%)</title><rect x="172.3" y="195.0" width="11.2" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="175.3" y="206.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (787 samples, 2.26%)</title><rect x="183.5" y="195.0" width="26.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="186.5" y="206.0">j..</text>
</g>
<g>
<title>java/lang/StringCoding.encode (787 samples, 2.26%)</title><rect x="183.5" y="179.0" width="26.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="186.5" y="190.0">j..</text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (787 samples, 2.26%)</title><rect x="183.5" y="163.0" width="26.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="186.5" y="174.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (787 samples, 2.26%)</title><rect x="183.5" y="147.0" width="26.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="186.5" y="158.0">j..</text>
</g>
<g>
<title>byte[] (787 samples, 2.26%)</title><rect x="183.5" y="131.0" width="26.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="186.5" y="142.0">b..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (80 samples, 0.23%)</title><rect x="210.1" y="195.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="213.1" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1353070773.invoke (80 samples, 0.23%)</title><rect x="210.1" y="179.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="213.1" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (80 samples, 0.23%)</title><rect x="210.1" y="163.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="213.1" y="174.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (29 samples, 0.08%)</title><rect x="210.1" y="147.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="213.1" y="158.0"></text>
</g>
<g>
<title>java.lang.String (29 samples, 0.08%)</title><rect x="210.1" y="131.0" width="1.0" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="213.1" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (51 samples, 0.15%)</title><rect x="211.1" y="147.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="214.1" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (51 samples, 0.15%)</title><rect x="211.1" y="131.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="214.1" y="142.0"></text>
</g>
<g>
<title>byte[] (51 samples, 0.15%)</title><rect x="211.1" y="115.0" width="1.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="214.1" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (700 samples, 2.01%)</title><rect x="212.8" y="195.0" width="23.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="215.8" y="206.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (700 samples, 2.01%)</title><rect x="212.8" y="179.0" width="23.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="215.8" y="190.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (700 samples, 2.01%)</title><rect x="212.8" y="163.0" width="23.7" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="215.8" y="174.0">j..</text>
</g>
<g>
<title>java/util/ArrayList.add (489 samples, 1.40%)</title><rect x="236.5" y="195.0" width="16.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="239.5" y="206.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (489 samples, 1.40%)</title><rect x="236.5" y="179.0" width="16.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="239.5" y="190.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (489 samples, 1.40%)</title><rect x="236.5" y="163.0" width="16.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="239.5" y="174.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (489 samples, 1.40%)</title><rect x="236.5" y="147.0" width="16.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="239.5" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (489 samples, 1.40%)</title><rect x="236.5" y="131.0" width="16.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="239.5" y="142.0"></text>
</g>
<g>
<title>java.lang.Object[] (489 samples, 1.40%)</title><rect x="236.5" y="115.0" width="16.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="239.5" y="126.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.get (13,448 samples, 38.56%)</title><rect x="253.1" y="195.0" width="455.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="256.1" y="206.0">one/nio/http/HttpClient.get</text>
</g>
<g>
<title>one/nio/http/HttpClient.createRequest (141 samples, 0.40%)</title><rect x="253.1" y="179.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.1" y="190.0"></text>
</g>
<g>
<title>one.nio.http.Request (56 samples, 0.16%)</title><rect x="253.1" y="163.0" width="1.9" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="256.1" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (85 samples, 0.24%)</title><rect x="255.0" y="163.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.0" y="174.0"></text>
</g>
<g>
<title>java.lang.String[] (85 samples, 0.24%)</title><rect x="255.0" y="147.0" width="2.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="258.0" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (13,307 samples, 38.16%)</title><rect x="257.8" y="179.0" width="450.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="260.8" y="190.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (13,307 samples, 38.16%)</title><rect x="257.8" y="163.0" width="450.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="260.8" y="174.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (101 samples, 0.29%)</title><rect x="257.8" y="147.0" width="3.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="260.8" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (11,340 samples, 32.52%)</title><rect x="261.3" y="147.0" width="383.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.3" y="158.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (10,441 samples, 29.94%)</title><rect x="261.3" y="131.0" width="353.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="264.3" y="142.0">byte[]</text>
</g>
<g>
<title>byte[] (899 samples, 2.58%)</title><rect x="614.6" y="131.0" width="30.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="617.6" y="142.0">by..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (1,688 samples, 4.84%)</title><rect x="645.0" y="147.0" width="57.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="648.0" y="158.0">one/ni..</text>
</g>
<g>
<title>byte[] (40 samples, 0.11%)</title><rect x="645.0" y="131.0" width="1.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="648.0" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (47 samples, 0.13%)</title><rect x="646.3" y="131.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="649.3" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (47 samples, 0.13%)</title><rect x="646.3" y="115.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="649.3" y="126.0"></text>
</g>
<g>
<title>java.lang.String (28 samples, 0.08%)</title><rect x="646.3" y="99.0" width="1.0" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="649.3" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (19 samples, 0.05%)</title><rect x="647.3" y="99.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="650.3" y="110.0"></text>
</g>
<g>
<title>byte[] (19 samples, 0.05%)</title><rect x="647.3" y="83.0" width="0.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="650.3" y="94.0"></text>
</g>
<g>
<title>one.nio.http.Response (25 samples, 0.07%)</title><rect x="647.9" y="131.0" width="0.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="650.9" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (1,471 samples, 4.22%)</title><rect x="648.8" y="131.0" width="49.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="651.8" y="142.0">one/n..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,471 samples, 4.22%)</title><rect x="648.8" y="115.0" width="49.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="651.8" y="126.0">one/n..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,471 samples, 4.22%)</title><rect x="648.8" y="99.0" width="49.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="651.8" y="110.0">one/n..</text>
</g>
<g>
<title>char[] (1,219 samples, 3.50%)</title><rect x="648.8" y="83.0" width="41.2" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="651.8" y="94.0">cha..</text>
</g>
<g>
<title>java.lang.String (126 samples, 0.36%)</title><rect x="690.0" y="83.0" width="4.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="693.0" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (126 samples, 0.36%)</title><rect x="694.3" y="83.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="697.3" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (126 samples, 0.36%)</title><rect x="694.3" y="67.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="697.3" y="78.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (126 samples, 0.36%)</title><rect x="694.3" y="51.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="697.3" y="62.0"></text>
</g>
<g>
<title>byte[] (126 samples, 0.36%)</title><rect x="694.3" y="35.0" width="4.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="697.3" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (54 samples, 0.15%)</title><rect x="698.6" y="131.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="701.6" y="142.0"></text>
</g>
<g>
<title>java.lang.String[] (54 samples, 0.15%)</title><rect x="698.6" y="115.0" width="1.8" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="701.6" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (51 samples, 0.15%)</title><rect x="700.4" y="131.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="703.4" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (51 samples, 0.15%)</title><rect x="700.4" y="115.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="703.4" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (51 samples, 0.15%)</title><rect x="700.4" y="99.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="703.4" y="110.0"></text>
</g>
<g>
<title>java.lang.String (25 samples, 0.07%)</title><rect x="700.4" y="83.0" width="0.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="703.4" y="94.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (26 samples, 0.07%)</title><rect x="701.2" y="83.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="704.2" y="94.0"></text>
</g>
<g>
<title>byte[] (26 samples, 0.07%)</title><rect x="701.2" y="67.0" width="0.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="704.2" y="78.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (96 samples, 0.28%)</title><rect x="702.1" y="147.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="705.1" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (96 samples, 0.28%)</title><rect x="702.1" y="131.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="705.1" y="142.0"></text>
</g>
<g>
<title>byte[] (96 samples, 0.28%)</title><rect x="702.1" y="115.0" width="3.3" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="705.1" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (61 samples, 0.17%)</title><rect x="705.4" y="147.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="708.4" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (61 samples, 0.17%)</title><rect x="705.4" y="131.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="708.4" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (61 samples, 0.17%)</title><rect x="705.4" y="115.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="708.4" y="126.0"></text>
</g>
<g>
<title>java.lang.String (28 samples, 0.08%)</title><rect x="705.4" y="99.0" width="0.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="708.4" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (33 samples, 0.09%)</title><rect x="706.3" y="99.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="709.3" y="110.0"></text>
</g>
<g>
<title>byte[] (33 samples, 0.09%)</title><rect x="706.3" y="83.0" width="1.1" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="709.3" y="94.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (21 samples, 0.06%)</title><rect x="707.4" y="147.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="710.4" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (21 samples, 0.06%)</title><rect x="707.4" y="131.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="710.4" y="142.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (21 samples, 0.06%)</title><rect x="707.4" y="115.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="710.4" y="126.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (21 samples, 0.06%)</title><rect x="707.4" y="99.0" width="0.7" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="710.4" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/RepliServiceUtils.getNodeReplica (189 samples, 0.54%)</title><rect x="708.1" y="195.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="711.1" y="206.0"></text>
</g>
<g>
<title>java.lang.String[] (172 samples, 0.49%)</title><rect x="708.1" y="179.0" width="5.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="711.1" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/ModularTopology.replicasFor (17 samples, 0.05%)</title><rect x="714.0" y="179.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="717.0" y="190.0"></text>
</g>
<g>
<title>java.lang.String[] (17 samples, 0.05%)</title><rect x="714.0" y="163.0" width="0.5" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="717.0" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/RepliServiceUtils.issueExternalResponse (2,111 samples, 6.05%)</title><rect x="714.5" y="195.0" width="71.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="717.5" y="206.0">ru/mail/..</text>
</g>
<g>
<title>one.nio.http.Response (289 samples, 0.83%)</title><rect x="714.5" y="179.0" width="9.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="717.5" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1,126 samples, 3.23%)</title><rect x="724.3" y="179.0" width="38.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="727.3" y="190.0">one..</text>
</g>
<g>
<title>byte[] (360 samples, 1.03%)</title><rect x="724.3" y="163.0" width="12.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="727.3" y="174.0"></text>
</g>
<g>
<title>java.lang.String[] (477 samples, 1.37%)</title><rect x="736.5" y="163.0" width="16.1" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="739.5" y="174.0"></text>
</g>
<g>
<title>java.lang.String (289 samples, 0.83%)</title><rect x="752.6" y="163.0" width="9.8" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="755.6" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/RepliServiceUtils.syncReplicaValues (247 samples, 0.71%)</title><rect x="762.4" y="179.0" width="8.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="765.4" y="190.0"></text>
</g>
<g>
<title>java/util/Collection.stream (91 samples, 0.26%)</title><rect x="762.4" y="163.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="765.4" y="174.0"></text>
</g>
<g>
<title>java/util/ArrayList.spliterator (17 samples, 0.05%)</title><rect x="762.4" y="147.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="765.4" y="158.0"></text>
</g>
<g>
<title>java.util.ArrayList$ArrayListSpliterator (17 samples, 0.05%)</title><rect x="762.4" y="131.0" width="0.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="765.4" y="142.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (74 samples, 0.21%)</title><rect x="763.0" y="147.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="766.0" y="158.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (74 samples, 0.21%)</title><rect x="763.0" y="131.0" width="2.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="766.0" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator.comparingLong (11 samples, 0.03%)</title><rect x="765.5" y="163.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="768.5" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (11 samples, 0.03%)</title><rect x="765.5" y="147.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="768.5" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (11 samples, 0.03%)</title><rect x="765.5" y="131.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="768.5" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$68/816675818.get$Lambda (11 samples, 0.03%)</title><rect x="765.5" y="115.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="768.5" y="126.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$68 (11 samples, 0.03%)</title><rect x="765.5" y="99.0" width="0.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="768.5" y="110.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (58 samples, 0.17%)</title><rect x="765.9" y="163.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="768.9" y="174.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$2 (58 samples, 0.17%)</title><rect x="765.9" y="147.0" width="1.9" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="768.9" y="158.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.max (87 samples, 0.25%)</title><rect x="767.8" y="163.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="770.8" y="174.0"></text>
</g>
<g>
<title>java/util/function/BinaryOperator.maxBy (23 samples, 0.07%)</title><rect x="767.8" y="147.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="770.8" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (23 samples, 0.07%)</title><rect x="767.8" y="131.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="770.8" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (23 samples, 0.07%)</title><rect x="767.8" y="115.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="770.8" y="126.0"></text>
</g>
<g>
<title>java/util/function/BinaryOperator$$Lambda$70/1167852559.get$Lambda (23 samples, 0.07%)</title><rect x="767.8" y="99.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="770.8" y="110.0"></text>
</g>
<g>
<title>java.util.function.BinaryOperator$$Lambda$70 (23 samples, 0.07%)</title><rect x="767.8" y="83.0" width="0.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="770.8" y="94.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.reduce (64 samples, 0.18%)</title><rect x="768.6" y="147.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="771.6" y="158.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (64 samples, 0.18%)</title><rect x="768.6" y="131.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="771.6" y="142.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (64 samples, 0.18%)</title><rect x="768.6" y="115.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="771.6" y="126.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (22 samples, 0.06%)</title><rect x="768.6" y="99.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="771.6" y="110.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (22 samples, 0.06%)</title><rect x="768.6" y="83.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="771.6" y="94.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.opWrapSink (22 samples, 0.06%)</title><rect x="768.6" y="67.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="771.6" y="78.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$2$1 (22 samples, 0.06%)</title><rect x="768.6" y="51.0" width="0.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="771.6" y="62.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2.makeSink (28 samples, 0.08%)</title><rect x="769.3" y="99.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="772.3" y="110.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2.makeSink (28 samples, 0.08%)</title><rect x="769.3" y="83.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="772.3" y="94.0"></text>
</g>
<g>
<title>java.util.stream.ReduceOps$2ReducingSink (28 samples, 0.08%)</title><rect x="769.3" y="67.0" width="1.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="772.3" y="78.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2ReducingSink.get (14 samples, 0.04%)</title><rect x="770.3" y="99.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="773.3" y="110.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2ReducingSink.get (14 samples, 0.04%)</title><rect x="770.3" y="83.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="773.3" y="94.0"></text>
</g>
<g>
<title>java/util/Optional.of (14 samples, 0.04%)</title><rect x="770.3" y="67.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="773.3" y="78.0"></text>
</g>
<g>
<title>java.util.Optional (14 samples, 0.04%)</title><rect x="770.3" y="51.0" width="0.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="773.3" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/Value.getBytes (10 samples, 0.03%)</title><rect x="770.8" y="179.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="773.8" y="190.0"></text>
</g>
<g>
<title>byte[] (10 samples, 0.03%)</title><rect x="770.8" y="163.0" width="0.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="773.8" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/Value.getBytesFromValue (439 samples, 1.26%)</title><rect x="771.1" y="179.0" width="14.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="774.1" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (439 samples, 1.26%)</title><rect x="771.1" y="163.0" width="14.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="774.1" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (439 samples, 1.26%)</title><rect x="771.1" y="147.0" width="14.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="774.1" y="158.0"></text>
</g>
<g>
<title>byte[] (439 samples, 1.26%)</title><rect x="771.1" y="131.0" width="14.9" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="774.1" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/RepliServiceUtils.issueInternalResponse (3,301 samples, 9.47%)</title><rect x="786.0" y="195.0" width="111.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="789.0" y="206.0">ru/mail/polis..</text>
</g>
<g>
<title>one.nio.http.Response (339 samples, 0.97%)</title><rect x="786.0" y="179.0" width="11.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="789.0" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1,104 samples, 3.17%)</title><rect x="797.4" y="179.0" width="37.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="800.4" y="190.0">one..</text>
</g>
<g>
<title>byte[] (389 samples, 1.12%)</title><rect x="797.4" y="163.0" width="13.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="800.4" y="174.0"></text>
</g>
<g>
<title>java.lang.String[] (407 samples, 1.17%)</title><rect x="810.6" y="163.0" width="13.8" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="813.6" y="174.0"></text>
</g>
<g>
<title>java.lang.String (308 samples, 0.88%)</title><rect x="824.4" y="163.0" width="10.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="827.4" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/TaskDAO.getValue (1,527 samples, 4.38%)</title><rect x="834.8" y="179.0" width="51.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="837.8" y="190.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/service/codearound/TaskDAO.getValueFromBytes (642 samples, 1.84%)</title><rect x="834.8" y="163.0" width="21.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="837.8" y="174.0">r..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (363 samples, 1.04%)</title><rect x="834.8" y="147.0" width="12.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="837.8" y="158.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (363 samples, 1.04%)</title><rect x="834.8" y="131.0" width="12.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="837.8" y="142.0"></text>
</g>
<g>
<title>byte[] (363 samples, 1.04%)</title><rect x="834.8" y="115.0" width="12.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="837.8" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/DAOByteOnlyConverter.tuneBufToArray (279 samples, 0.80%)</title><rect x="847.1" y="147.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="850.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/DAOByteOnlyConverter.readByteArray (279 samples, 0.80%)</title><rect x="847.1" y="131.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="850.1" y="142.0"></text>
</g>
<g>
<title>byte[] (279 samples, 0.80%)</title><rect x="847.1" y="115.0" width="9.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="850.1" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/Value.getValueFromBytes (885 samples, 2.54%)</title><rect x="856.5" y="163.0" width="30.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="859.5" y="174.0">ru..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (567 samples, 1.63%)</title><rect x="856.5" y="147.0" width="19.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="859.5" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (567 samples, 1.63%)</title><rect x="856.5" y="131.0" width="19.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="859.5" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (567 samples, 1.63%)</title><rect x="856.5" y="115.0" width="19.2" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="859.5" y="126.0"></text>
</g>
<g>
<title>ru.mail.polis.service.codearound.Value (318 samples, 0.91%)</title><rect x="875.7" y="147.0" width="10.8" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="878.7" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/Value.getBytesFromValue (331 samples, 0.95%)</title><rect x="886.5" y="179.0" width="11.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="889.5" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (331 samples, 0.95%)</title><rect x="886.5" y="163.0" width="11.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="889.5" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (331 samples, 0.95%)</title><rect x="886.5" y="147.0" width="11.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="889.5" y="158.0"></text>
</g>
<g>
<title>byte[] (331 samples, 0.95%)</title><rect x="886.5" y="131.0" width="11.2" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="889.5" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/codearound/Value.getValueFromBytes (1,134 samples, 3.25%)</title><rect x="897.7" y="195.0" width="38.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="900.7" y="206.0">ru/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (879 samples, 2.52%)</title><rect x="897.7" y="179.0" width="29.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="900.7" y="190.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (879 samples, 2.52%)</title><rect x="897.7" y="163.0" width="29.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="900.7" y="174.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (879 samples, 2.52%)</title><rect x="897.7" y="147.0" width="29.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="900.7" y="158.0">ja..</text>
</g>
<g>
<title>ru.mail.polis.service.codearound.Value (255 samples, 0.73%)</title><rect x="927.4" y="179.0" width="8.6" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="930.4" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (704 samples, 2.02%)</title><rect x="936.0" y="243.0" width="23.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="939.0" y="254.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (704 samples, 2.02%)</title><rect x="936.0" y="227.0" width="23.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="939.0" y="238.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (704 samples, 2.02%)</title><rect x="936.0" y="211.0" width="23.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="939.0" y="222.0">j..</text>
</g>
<g>
<title>java.lang.String (268 samples, 0.77%)</title><rect x="936.0" y="195.0" width="9.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="939.0" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (436 samples, 1.25%)</title><rect x="945.1" y="195.0" width="14.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="948.1" y="206.0"></text>
</g>
<g>
<title>byte[] (436 samples, 1.25%)</title><rect x="945.1" y="179.0" width="14.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="948.1" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3,063 samples, 8.78%)</title><rect x="959.9" y="275.0" width="103.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="962.9" y="286.0">one/nio/http..</text>
</g>
<g>
<title>one.nio.http.Request (464 samples, 1.33%)</title><rect x="959.9" y="259.0" width="15.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="962.9" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (979 samples, 2.81%)</title><rect x="975.6" y="259.0" width="33.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="978.6" y="270.0">on..</text>
</g>
<g>
<title>java.lang.String[] (979 samples, 2.81%)</title><rect x="975.6" y="243.0" width="33.1" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="978.6" y="254.0">ja..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,620 samples, 4.65%)</title><rect x="1008.7" y="259.0" width="54.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1011.7" y="270.0">one/n..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,620 samples, 4.65%)</title><rect x="1008.7" y="243.0" width="54.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1011.7" y="254.0">one/n..</text>
</g>
<g>
<title>char[] (895 samples, 2.57%)</title><rect x="1008.7" y="227.0" width="30.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1011.7" y="238.0">ch..</text>
</g>
<g>
<title>java.lang.String (266 samples, 0.76%)</title><rect x="1039.0" y="227.0" width="9.0" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1042.0" y="238.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (459 samples, 1.32%)</title><rect x="1048.0" y="227.0" width="15.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1051.0" y="238.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (459 samples, 1.32%)</title><rect x="1048.0" y="211.0" width="15.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1051.0" y="222.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (459 samples, 1.32%)</title><rect x="1048.0" y="195.0" width="15.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1051.0" y="206.0"></text>
</g>
<g>
<title>byte[] (459 samples, 1.32%)</title><rect x="1048.0" y="179.0" width="15.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="1051.0" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3,738 samples, 10.72%)</title><rect x="1063.5" y="275.0" width="126.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1066.5" y="286.0">one/nio/util/Utf..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (3,738 samples, 10.72%)</title><rect x="1063.5" y="259.0" width="126.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1066.5" y="270.0">one/nio/util/Utf..</text>
</g>
<g>
<title>char[] (1,727 samples, 4.95%)</title><rect x="1063.5" y="243.0" width="58.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1066.5" y="254.0">char[]</text>
</g>
<g>
<title>java.lang.String (842 samples, 2.41%)</title><rect x="1121.9" y="243.0" width="28.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1124.9" y="254.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,169 samples, 3.35%)</title><rect x="1150.4" y="243.0" width="39.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1153.4" y="254.0">jav..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,169 samples, 3.35%)</title><rect x="1150.4" y="227.0" width="39.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1153.4" y="238.0">jav..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,169 samples, 3.35%)</title><rect x="1150.4" y="211.0" width="39.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1153.4" y="222.0">jav..</text>
</g>
<g>
<title>byte[] (1,169 samples, 3.35%)</title><rect x="1150.4" y="195.0" width="39.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1153.4" y="206.0">byt..</text>
</g>
</g>
</svg>
